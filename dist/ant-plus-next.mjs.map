{"version":3,"file":"ant-plus-next.mjs","sources":["../src/types/constants.ts","../src/utils/messages.ts","../src/core/driver/nodeUSBDriver.ts","../src/core/garminStick2.ts","../src/core/garminStick3.ts","../src/sensors/heartRate/heartRateUtils.ts","../src/sensors/heartRate/heartRateSensorState.ts","../src/sensors/heartRate/heartRateScannerState.ts","../src/sensors/baseSensor.ts","../src/sensors/antPlusBaseSensor.ts","../src/sensors/antPlusSensor.ts","../src/sensors/heartRate/heartRateSensor.ts","../src/sensors/antPlusScanner.ts","../src/sensors/heartRate/heartRateScanner.ts","../src/sensors/strideSpeedDistance/strideSpeedDistanceUtils.ts","../src/sensors/strideSpeedDistance/strideSpeedDistanceSensorState.ts","../src/sensors/strideSpeedDistance/strideSpeedDistanceScanState.ts","../src/sensors/strideSpeedDistance/strideSpeedDistanceSensor.ts","../src/sensors/strideSpeedDistance/strideSpeedDistanceScanner.ts","../src/sensors/speedCadence/speedCadenceUtils.ts","../src/sensors/speedCadence/speedCadenceSensorState.ts","../src/sensors/speedCadence/speedCadenceScanState.ts","../src/sensors/speedCadence/speedCadenceSensor.ts","../src/sensors/speedCadence/speedCadenceScanner.ts","../src/sensors/speed/speedUtils.ts","../src/sensors/speed/speedSensorState.ts","../src/sensors/speed/speedScanState.ts","../src/sensors/speed/speedSensor.ts","../src/sensors/speed/speedScanner.ts","../src/sensors/cadence/cadenceUtils.ts","../src/sensors/cadence/cadenceSensorState.ts","../src/sensors/cadence/cadenceScanState.ts","../src/sensors/cadence/cadenceSensor.ts","../src/sensors/cadence/cadenceScanner.ts","../src/sensors/bicyclePower/bicyclePowerUtils.ts","../src/sensors/bicyclePower/bicyclePowerSensorState.ts","../src/sensors/bicyclePower/bicyclePowerScanState.ts","../src/sensors/bicyclePower/bicyclePowerSensor.ts","../src/sensors/bicyclePower/bicyclePowerScanner.ts","../src/sensors/fitnessEquipment/fitnessEquipmentUtils.ts","../src/sensors/fitnessEquipment/fitnessEquipmentSensorState.ts","../src/sensors/fitnessEquipment/fitnessEquipmentScanState.ts","../src/sensors/fitnessEquipment/fitnessEquipmentSensor.ts","../src/sensors/fitnessEquipment/fitnessEquipmentScanner.ts","../src/sensors/muscleOxygen/muscleOxygenUtils.ts","../src/sensors/muscleOxygen/muscleOxygenSensorState.ts","../src/sensors/muscleOxygen/muscleOxygenScanState.ts","../src/sensors/muscleOxygen/muscleOxygenSensor.ts","../src/sensors/muscleOxygen/muscleOxygenScanner.ts","../src/sensors/environment/environmentUtils.ts","../src/sensors/environment/environmentSensorState.ts","../src/sensors/environment/environmentScanState.ts","../src/sensors/environment/environmentSensor.ts","../src/sensors/environment/environmentScanner.ts"],"sourcesContent":["/**\n * A collection of constants used in the ANT+ protocol for wireless communication.\n * These constants define various message types, configuration parameters, events,\n * and capabilities used to control and manage channels, transmit data, and handle\n * protocol-specific operations.\n *\n * @class Constants\n * @see {@link https://www.thisisant.com/developer/resources/downloads#documents} for the ANT+ protocol documentation.\n */\nexport class Constants {\n    // Message Types\n    /**\n     * Represents a generic Radio Frequency (RF) message type used in the ANT+ protocol.\n     * @type {number}\n     */\n    static readonly MESSAGE_RF: number = 0x01;\n\n    /**\n     * Represents a synchronization message used to align data transmission.\n     * @type {number}\n     */\n    static readonly MESSAGE_TX_SYNC: number = 0xa4;\n\n    /**\n     * Default network number used by ANT+ devices.\n     * @type {number}\n     */\n    static readonly DEFAULT_NETWORK_NUMBER: number = 0x00;\n\n    // Configuration Messages\n    /**\n     * Unassigns a channel, making it available for reassignment or closing.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_UNASSIGN: number = 0x41;\n\n    /**\n     * Assigns a channel with a specific type and network number.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_ASSIGN: number = 0x42;\n\n    /**\n     * Sets the unique identifier for a channel.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_ID: number = 0x51;\n\n    /**\n     * Configures the message period for a channel, defining the frequency of data messages.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_PERIOD: number = 0x43;\n\n    /**\n     * Sets the timeout period for channel searching operations.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_SEARCH_TIMEOUT: number = 0x44;\n\n    /**\n     * Configures the frequency of the channel in the RF spectrum.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_FREQUENCY: number = 0x45;\n\n    /**\n     * Sets the transmission power level for a specific channel.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_TX_POWER: number = 0x60;\n\n    /**\n     * Sets the network key for secure communication between ANT+ devices.\n     * @type {number}\n     */\n    static readonly MESSAGE_NETWORK_KEY: number = 0x46;\n\n    /**\n     * Defines the transmit power for the device.\n     * @type {number}\n     */\n    static readonly MESSAGE_TX_POWER: number = 0x47;\n\n    /**\n     * Enables proximity search for devices within a specified range.\n     * @type {number}\n     */\n    static readonly MESSAGE_PROXIMITY_SEARCH: number = 0x71;\n\n    /**\n     * Enables extended receive mode for handling additional data.\n     * @type {number}\n     */\n    static readonly MESSAGE_ENABLE_RX_EXT: number = 0x66;\n\n    /**\n     * Configures the library settings for ANT+ communication.\n     * @type {number}\n     */\n    static readonly MESSAGE_LIB_CONFIG: number = 0x6e;\n\n    /**\n     * Opens a channel for RX scan mode, allowing the device to search for broadcasts.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_OPEN_RX_SCAN: number = 0x5b;\n\n    // Notifications\n    /**\n     * Indicates a startup event, typically sent after a device reset or initialization.\n     * @type {number}\n     */\n    static readonly MESSAGE_STARTUP: number = 0x6f;\n\n    // Control Messages\n    /**\n     * Resets the ANT+ device system.\n     * @type {number}\n     */\n    static readonly MESSAGE_SYSTEM_RESET: number = 0x4a;\n\n    /**\n     * Opens a communication channel for data transmission.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_OPEN: number = 0x4b;\n\n    /**\n     * Closes a previously opened communication channel.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_CLOSE: number = 0x4c;\n\n    /**\n     * Requests a specific operation or status update for a channel.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_REQUEST: number = 0x4d;\n\n    // Data Messages\n    /**\n     * Transmits broadcast data over an open channel.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_BROADCAST_DATA: number = 0x4e;\n\n    /**\n     * Sends acknowledged data that requires a response confirmation.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_ACKNOWLEDGED_DATA: number = 0x4f;\n\n    /**\n     * Sends burst data packets over a channel, useful for high-throughput scenarios.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_BURST_DATA: number = 0x50;\n\n    // Channel Event Messages\n    /**\n     * Represents various events occurring on a channel, such as RX or TX completion.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_EVENT: number = 0x40;\n\n    // Requested Response Messages\n    /**\n     * Queries the status of a channel, returning details like state or assigned ID.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_STATUS: number = 0x52;\n\n    /**\n     * Retrieves the version of the ANT+ device software or protocol.\n     * @type {number}\n     */\n    static readonly MESSAGE_VERSION: number = 0x3e;\n\n    /**\n     * Retrieves the capabilities of the ANT+ device, such as supported features.\n     * @type {number}\n     */\n    static readonly MESSAGE_CAPABILITIES: number = 0x54;\n\n    /**\n     * Retrieves the unique serial number of the ANT+ device.\n     * @type {number}\n     */\n    static readonly MESSAGE_SERIAL_NUMBER: number = 0x61;\n\n    // Message Parameters\n    /**\n     * Channel type for two-way data reception.\n     * @type {number}\n     */\n    static readonly CHANNEL_TYPE_TWOWAY_RECEIVE: number = 0x00;\n\n    /**\n     * Channel type for two-way data transmission.\n     * @type {number}\n     */\n    static readonly CHANNEL_TYPE_TWOWAY_TRANSMIT: number = 0x10;\n\n    /**\n     * Channel type for shared data reception.\n     * @type {number}\n     */\n    static readonly CHANNEL_TYPE_SHARED_RECEIVE: number = 0x20;\n\n    /**\n     * Channel type for shared data transmission.\n     * @type {number}\n     */\n    static readonly CHANNEL_TYPE_SHARED_TRANSMIT: number = 0x30;\n\n    /**\n     * Channel type for one-way data reception.\n     * @type {number}\n     */\n    static readonly CHANNEL_TYPE_ONEWAY_RECEIVE: number = 0x40;\n\n    /**\n     * Channel type for one-way data transmission.\n     * @type {number}\n     */\n    static readonly CHANNEL_TYPE_ONEWAY_TRANSMIT: number = 0x50;\n\n    /**\n     * Radio transmit power level: -20 dB.\n     * @type {number}\n     */\n    static readonly RADIO_TX_POWER_MINUS20DB: number = 0x00;\n\n    /**\n     * Radio transmit power level: -10 dB.\n     * @type {number}\n     */\n    static readonly RADIO_TX_POWER_MINUS10DB: number = 0x01;\n\n    /**\n     * Radio transmit power level: 0 dB.\n     * @type {number}\n     */\n    static readonly RADIO_TX_POWER_0DB: number = 0x02;\n\n    /**\n     * Radio transmit power level: +4 dB.\n     * @type {number}\n     */\n    static readonly RADIO_TX_POWER_PLUS4DB: number = 0x03;\n\n    // Event Codes\n    /**\n     * No error occurred in the response.\n     * @type {number}\n     */\n    static readonly RESPONSE_NO_ERROR: number = 0x00;\n\n    /**\n     * RX search timed out.\n     * @type {number}\n     */\n    static readonly EVENT_RX_SEARCH_TIMEOUT: number = 0x01;\n\n    /**\n     * RX failed.\n     * @type {number}\n     */\n    static readonly EVENT_RX_FAIL: number = 0x02;\n\n    /**\n     * TX completed successfully.\n     * @type {number}\n     */\n    static readonly EVENT_TX: number = 0x03;\n\n    /**\n     * Transfer RX failed.\n     * @type {number}\n     */\n    static readonly EVENT_TRANSFER_RX_FAILED: number = 0x04;\n\n    /**\n     * Transfer TX completed successfully.\n     * @type {number}\n     */\n    static readonly EVENT_TRANSFER_TX_COMPLETED: number = 0x05;\n\n    /**\n     * Transfer TX failed.\n     * @type {number}\n     */\n    static readonly EVENT_TRANSFER_TX_FAILED: number = 0x06;\n\n    /**\n     * Channel was closed.\n     * @type {number}\n     */\n    static readonly EVENT_CHANNEL_CLOSED: number = 0x07;\n\n    /**\n     * RX failed; channel will go to search.\n     * @type {number}\n     */\n    static readonly EVENT_RX_FAIL_GO_TO_SEARCH: number = 0x08;\n\n    /**\n     * Channel collision detected.\n     * @type {number}\n     */\n    static readonly EVENT_CHANNEL_COLLISION: number = 0x09;\n\n    /**\n     * Transfer TX started.\n     * @type {number}\n     */\n    static readonly EVENT_TRANSFER_TX_START: number = 0x0a;\n\n    // Error and State Codes\n    /**\n     * Channel is in the wrong state for the requested operation.\n     * @type {number}\n     */\n    static readonly CHANNEL_IN_WRONG_STATE: number = 0x15;\n\n    /**\n     * Channel is not opened.\n     * @type {number}\n     */\n    static readonly CHANNEL_NOT_OPENED: number = 0x16;\n\n    /**\n     * Channel ID is not set.\n     * @type {number}\n     */\n    static readonly CHANNEL_ID_NOT_SET: number = 0x18;\n\n    /**\n     * Command to close all channels.\n     * @type {number}\n     */\n    static readonly CLOSE_ALL_CHANNELS: number = 0x19;\n\n    /**\n     * Transfer is currently in progress.\n     * @type {number}\n     */\n    static readonly TRANSFER_IN_PROGRESS: number = 0x1f;\n\n    /**\n     * Transfer sequence number error.\n     * @type {number}\n     */\n    static readonly TRANSFER_SEQUENCE_NUMBER_ERROR: number = 0x20;\n\n    /**\n     * Transfer is in an error state.\n     * @type {number}\n     */\n    static readonly TRANSFER_IN_ERROR: number = 0x21;\n\n    /**\n     * Message size exceeds allowed limit.\n     * @type {number}\n     */\n    static readonly MESSAGE_SIZE_EXCEEDS_LIMIT: number = 0x27;\n\n    /**\n     * Invalid message received.\n     * @type {number}\n     */\n    static readonly INVALID_MESSAGE: number = 0x28;\n\n    /**\n     * Invalid network number provided.\n     * @type {number}\n     */\n    static readonly INVALID_NETWORK_NUMBER: number = 0x29;\n\n    /**\n     * Invalid list ID provided.\n     * @type {number}\n     */\n    static readonly INVALID_LIST_ID: number = 0x30;\n\n    /**\n     * Invalid scan TX channel specified.\n     * @type {number}\n     */\n    static readonly INVALID_SCAN_TX_CHANNEL: number = 0x31;\n\n    /**\n     * Invalid parameter provided for a message or operation.\n     * @type {number}\n     */\n    static readonly INVALID_PARAMETER_PROVIDED: number = 0x33;\n\n    /**\n     * Event queue overflow occurred.\n     * @type {number}\n     */\n    static readonly EVENT_QUEUE_OVERFLOW: number = 0x35;\n\n    /**\n     * USB string write operation failed.\n     * @type {number}\n     */\n    static readonly USB_STRING_WRITE_FAIL: number = 0x70;\n\n    // Channel States\n    /**\n     * Channel is unassigned.\n     * @type {number}\n     */\n    static readonly CHANNEL_STATE_UNASSIGNED: number = 0x00;\n\n    /**\n     * Channel is assigned.\n     * @type {number}\n     */\n    static readonly CHANNEL_STATE_ASSIGNED: number = 0x01;\n\n    /**\n     * Channel is searching for another device.\n     * @type {number}\n     */\n    static readonly CHANNEL_STATE_SEARCHING: number = 0x02;\n\n    /**\n     * Channel is tracking another device.\n     * @type {number}\n     */\n    static readonly CHANNEL_STATE_TRACKING: number = 0x03;\n\n    // Capability Flags\n    /**\n     * Device has no receive channels.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_NO_RECEIVE_CHANNELS: number = 0x01;\n\n    /**\n     * Device has no transmit channels.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_NO_TRANSMIT_CHANNELS: number = 0x02;\n\n    /**\n     * Device has no receive message capability.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_NO_RECEIVE_MESSAGES: number = 0x04;\n\n    /**\n     * Device has no transmit message capability.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_NO_TRANSMIT_MESSAGES: number = 0x08;\n\n    /**\n     * Device has no acknowledged message capability.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_NO_ACKNOWLEDGED_MESSAGES: number = 0x10;\n\n    /**\n     * Device has no burst message capability.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_NO_BURST_MESSAGES: number = 0x20;\n\n    /**\n     * Device supports network communication.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_NETWORK_ENABLED: number = 0x02;\n\n    /**\n     * Device serial number feature enabled.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_SERIAL_NUMBER_ENABLED: number = 0x08;\n\n    /**\n     * Per-channel transmit power adjustment enabled.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_PER_CHANNEL_TX_POWER_ENABLED: number = 0x10;\n\n    /**\n     * Low priority search capability enabled.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_LOW_PRIORITY_SEARCH_ENABLED: number = 0x20;\n\n    /**\n     * Script feature enabled.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_SCRIPT_ENABLED: number = 0x40;\n\n    /**\n     * Search list capability enabled.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_SEARCH_LIST_ENABLED: number = 0x80;\n\n    /**\n     * LED feature enabled.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_LED_ENABLED: number = 0x01;\n\n    /**\n     * Extended messaging enabled.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_EXT_MESSAGE_ENABLED: number = 0x02;\n\n    /**\n     * Scan mode enabled.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_SCAN_MODE_ENABLED: number = 0x04;\n\n    /**\n     * Proximity search capability enabled.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_PROX_SEARCH_ENABLED: number = 0x10;\n\n    /**\n     * Extended channel assignment enabled.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_EXT_ASSIGN_ENABLED: number = 0x20;\n\n    /**\n     * File share (ANT-FS) feature enabled.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_FS_ANTFS_ENABLED: number = 0x40;\n\n    // Miscellaneous\n    /**\n     * Special value indicating that the timeout for an operation is set to never expire.\n     * @type {number}\n     */\n    static readonly TIMEOUT_NEVER: number = 0xff;\n}\n","import { Constants } from \"../types/constants.js\";\n\nexport class Messages {\n    static BUFFER_INDEX_MSG_LEN: number = 1;\n    static BUFFER_INDEX_MSG_TYPE: number = 2;\n    static BUFFER_INDEX_CHANNEL_NUM: number = 3;\n    static BUFFER_INDEX_MSG_DATA: number = 4;\n    static BUFFER_INDEX_EXT_MSG_BEGIN: number = 12;\n\n    static resetSystem(): Buffer {\n        const payload: number[] = [];\n        payload.push(0x00);\n        return this.buildMessage(payload, Constants.MESSAGE_SYSTEM_RESET);\n    }\n\n    static requestMessage(channel: number, messageId: number): Buffer {\n        let payload: number[] = [];\n        payload = payload.concat(this.intToLEHexArray(channel));\n        payload.push(messageId);\n        return this.buildMessage(payload, Constants.MESSAGE_CHANNEL_REQUEST);\n    }\n\n    static setNetworkKey(): Buffer {\n        const payload: number[] = [];\n        payload.push(Constants.DEFAULT_NETWORK_NUMBER);\n        payload.push(0xb9);\n        payload.push(0xa5);\n        payload.push(0x21);\n        payload.push(0xfb);\n        payload.push(0xbd);\n        payload.push(0x72);\n        payload.push(0xc3);\n        payload.push(0x45);\n        return this.buildMessage(payload, Constants.MESSAGE_NETWORK_KEY);\n    }\n\n    static assignChannel(channel: number, type = \"receive\"): Buffer {\n        let payload: number[] = [];\n        payload = payload.concat(this.intToLEHexArray(channel));\n        if (type === \"receive\") {\n            payload.push(Constants.CHANNEL_TYPE_TWOWAY_RECEIVE);\n        } else if (type === \"receive_only\") {\n            payload.push(Constants.CHANNEL_TYPE_ONEWAY_RECEIVE);\n        } else if (type === \"receive_shared\") {\n            payload.push(Constants.CHANNEL_TYPE_SHARED_RECEIVE);\n        } else if (type === \"transmit\") {\n            payload.push(Constants.CHANNEL_TYPE_TWOWAY_TRANSMIT);\n        } else if (type === \"transmit_only\") {\n            payload.push(Constants.CHANNEL_TYPE_ONEWAY_TRANSMIT);\n        } else if (type === \"transmit_shared\") {\n            payload.push(Constants.CHANNEL_TYPE_SHARED_TRANSMIT);\n        } else {\n            throw new Error(\"type not allowed\");\n        }\n        payload.push(Constants.DEFAULT_NETWORK_NUMBER);\n        return this.buildMessage(payload, Constants.MESSAGE_CHANNEL_ASSIGN);\n    }\n\n    static setDevice(channel: number, deviceId: number, deviceType: number, transmissionType: number): Buffer {\n        let payload: number[] = [];\n        payload = payload.concat(this.intToLEHexArray(channel));\n        payload = payload.concat(this.intToLEHexArray(deviceId, 2));\n        payload = payload.concat(this.intToLEHexArray(deviceType));\n        payload = payload.concat(this.intToLEHexArray(transmissionType));\n        return this.buildMessage(payload, Constants.MESSAGE_CHANNEL_ID);\n    }\n\n    static searchChannel(channel: number, timeout: number): Buffer {\n        let payload: number[] = [];\n        payload = payload.concat(this.intToLEHexArray(channel));\n        payload = payload.concat(this.intToLEHexArray(timeout));\n        return this.buildMessage(payload, Constants.MESSAGE_CHANNEL_SEARCH_TIMEOUT);\n    }\n\n    static setPeriod(channel: number, period: number): Buffer {\n        let payload: number[] = [];\n        payload = payload.concat(this.intToLEHexArray(channel));\n        payload = payload.concat(this.intToLEHexArray(period));\n        return this.buildMessage(payload, Constants.MESSAGE_CHANNEL_PERIOD);\n    }\n\n    static setFrequency(channel: number, frequency: number): Buffer {\n        let payload: number[] = [];\n        payload = payload.concat(this.intToLEHexArray(channel));\n        payload = payload.concat(this.intToLEHexArray(frequency));\n        return this.buildMessage(payload, Constants.MESSAGE_CHANNEL_FREQUENCY);\n    }\n\n    static setRxExt(): Buffer {\n        let payload: number[] = [];\n        payload = payload.concat(this.intToLEHexArray(0));\n        payload = payload.concat(this.intToLEHexArray(1));\n        return this.buildMessage(payload, Constants.MESSAGE_ENABLE_RX_EXT);\n    }\n\n    static libConfig(channel: number, how: number): Buffer {\n        let payload: number[] = [];\n        payload = payload.concat(this.intToLEHexArray(channel));\n        payload = payload.concat(this.intToLEHexArray(how));\n        return this.buildMessage(payload, Constants.MESSAGE_LIB_CONFIG);\n    }\n\n    static openRxScan(): Buffer {\n        let payload: number[] = [];\n        payload = payload.concat(this.intToLEHexArray(0));\n        payload = payload.concat(this.intToLEHexArray(1));\n        return this.buildMessage(payload, Constants.MESSAGE_CHANNEL_OPEN_RX_SCAN);\n    }\n\n    static openChannel(channel: number): Buffer {\n        let payload: number[] = [];\n        payload = payload.concat(this.intToLEHexArray(channel));\n        return this.buildMessage(payload, Constants.MESSAGE_CHANNEL_OPEN);\n    }\n\n    static closeChannel(channel: number): Buffer {\n        let payload: number[] = [];\n        payload = payload.concat(this.intToLEHexArray(channel));\n        return this.buildMessage(payload, Constants.MESSAGE_CHANNEL_CLOSE);\n    }\n\n    static unassignChannel(channel: number): Buffer {\n        let payload: number[] = [];\n        payload = payload.concat(this.intToLEHexArray(channel));\n        return this.buildMessage(payload, Constants.MESSAGE_CHANNEL_UNASSIGN);\n    }\n\n    static acknowledgedData(channel: number, payload: number[]): Buffer {\n        payload = this.intToLEHexArray(channel).concat(payload);\n        return this.buildMessage(payload, Constants.MESSAGE_CHANNEL_ACKNOWLEDGED_DATA);\n    }\n\n    static broadcastData(channel: number, payload: number[]): Buffer {\n        payload = this.intToLEHexArray(channel).concat(payload);\n        return this.buildMessage(payload, Constants.MESSAGE_CHANNEL_BROADCAST_DATA);\n    }\n\n    static buildMessage(payload: number[] = [], messageId = 0x00): Buffer {\n        const message: number[] = [];\n        message.push(Constants.MESSAGE_TX_SYNC);\n        message.push(payload.length);\n        message.push(messageId);\n        payload.forEach((byte) => {\n            message.push(byte);\n        });\n        message.push(this.getChecksum(message));\n\n        return Buffer.from(message);\n    }\n\n    static intToLEHexArray(int: number, numBytes = 1): number[] {\n        numBytes = numBytes || 1;\n        const a: number[] = [];\n        const b = Buffer.from(this.decimalToHex(int, numBytes * 2), \"hex\");\n        let i = b.length - 1;\n        while (i >= 0) {\n            a.push(b[i]);\n            i--;\n        }\n\n        return a;\n    }\n\n    static decimalToHex(d: number, numDigits: number): string {\n        let hex = Number(d).toString(16);\n        numDigits = numDigits || 2;\n        while (hex.length < numDigits) {\n            hex = \"0\" + hex;\n        }\n\n        return hex;\n    }\n\n    static getChecksum(message: number[]): number {\n        let checksum = 0;\n        message.forEach((byte) => {\n            checksum = (checksum ^ byte) % 0xff;\n        });\n\n        return checksum;\n    }\n}\n","import { BaseSensor } from \"@/sensors/baseSensor\";\nimport { Constants } from \"@/types/constants\";\nimport { DebugOptions } from \"@/types/debugOptions\";\nimport { USBDriverBase } from \"@/types/usbDriverBase\";\nimport { Messages } from \"@/utils/messages\";\nimport EventEmitter from \"events\";\nimport * as usb from \"usb\";\n\nexport class NodeUSBDriver extends EventEmitter implements USBDriverBase {\n    private static deviceInUse: usb.Device[] = [];\n    private device: usb.Device | undefined;\n    private iface: usb.Interface | undefined;\n    private detachedKernelDriver = false;\n    private inEndpoint: (usb.InEndpoint & EventEmitter) | undefined;\n    private outEndpoint: (usb.OutEndpoint & EventEmitter) | undefined;\n    private leftover: Buffer | undefined;\n    private usedChannels: number = 0;\n    private attachedSensors: BaseSensor[] = [];\n\n    maxChannels: number = 0;\n    _canScan: boolean = false;\n\n    /**\n     * Creates an instance of USBDriver.\n     *\n     * @param {number} idVendor - The vendor ID of the USB device.\n     * @param {number} idProduct - The product ID of the USB device.\n     * @param {DebugOptions} [debugOptions={}] - Optional debug options for USB operations.\n     * @param {boolean} [webUsb=false] - Optional option for webUsb. If set true, then idVensor and idProduct is irgnored.\n     */\n    constructor(\n        private idVendor: number,\n        private idProduct: number,\n        debugOptions: DebugOptions = {},\n        private webUsb: boolean = false\n    ) {\n        super();\n        this.setMaxListeners(50);\n        usb.usb.setDebugLevel(debugOptions.usbDebugLevel || 0);\n    }\n\n    async canScan(): Promise<boolean> {\n        return Promise.resolve(this._canScan);\n    }\n\n    async open(): Promise<boolean> {\n        const devices = this.getDevices();\n\n        while (devices.length) {\n            try {\n                const device = devices.shift();\n                if (!device) {\n                    continue;\n                }\n\n                this.device = device;\n                this.device.open();\n                this.iface = this.device.interfaces![0];\n\n                try {\n                    if (this.iface && this.iface.isKernelDriverActive()) {\n                        this.detachedKernelDriver = true;\n                        this.iface.detachKernelDriver();\n                    }\n                } catch {\n                    // Ignore kernel driver errors;\n                }\n\n                this.iface.claim();\n                break;\n            } catch {\n                // Ignore the error and try with the next device, if present\n                if (this.device) {\n                    this.device.close();\n                }\n\n                this.device = undefined;\n                this.iface = undefined;\n            }\n        }\n\n        if (!this.device) {\n            return Promise.resolve(false);\n        }\n\n        NodeUSBDriver.deviceInUse.push(this.device);\n\n        if (!this.iface) {\n            throw new Error(\"Interface not initialized.\");\n        }\n\n        this.inEndpoint = this.iface.endpoints[0] as usb.InEndpoint;\n\n        this.inEndpoint.on(\"data\", (data: Buffer) => {\n            this.onData(data).catch((error) => {\n                console.error(error);\n            });\n        });\n\n        this.inEndpoint.on(\"error\", (err: Error) => {\n            console.error(\"ERROR RECV: \", err);\n        });\n\n        this.inEndpoint.on(\"end\", () => {\n            //console.info(\"STOP RECV\");\n        });\n\n        this.inEndpoint.startPoll();\n\n        this.outEndpoint = this.iface.endpoints[1] as usb.OutEndpoint;\n\n        await this.reset();\n\n        return Promise.resolve(true);\n    }\n\n    async close(): Promise<void> {\n        await this.detachAll();\n        if (this.inEndpoint) {\n            this.inEndpoint.stopPoll(() => {\n                if (this.iface) {\n                    this.iface.release(true, () => {\n                        if (this.detachedKernelDriver) {\n                            this.detachedKernelDriver = false;\n                            try {\n                                this.iface?.attachKernelDriver();\n                            } catch {\n                                // Ignore kernel driver errors;\n                            }\n                        }\n                        this.iface = undefined;\n                        if (this.device) {\n                            this.device.reset(() => {\n                                this.device?.close();\n                                this.emit(\"shutdown\");\n                                const devIdx = NodeUSBDriver.deviceInUse.indexOf(this.device!);\n                                if (devIdx >= 0) {\n                                    NodeUSBDriver.deviceInUse.splice(devIdx, 1);\n                                }\n                                if (usb.usb.listenerCount(\"attach\")) {\n                                    usb.usb.emit(\"attach\", this.device!);\n                                }\n                                this.device = undefined;\n                            });\n                        }\n                    });\n                }\n            });\n        }\n    }\n\n    async read(data: Buffer): Promise<void> {\n        //console.debug(\"DATA RECV: \", data);\n        const messageId = data.readUInt8(2);\n        if (messageId === Constants.MESSAGE_STARTUP) {\n            await this.write(Messages.requestMessage(0, Constants.MESSAGE_CAPABILITIES));\n        } else if (messageId === Constants.MESSAGE_CAPABILITIES) {\n            this.maxChannels = data.readUInt8(3);\n            this._canScan = (data.readUInt8(7) & 0x06) === 0x06;\n            await this.write(Messages.setNetworkKey());\n        } else if (messageId === Constants.MESSAGE_CHANNEL_EVENT && data.readUInt8(4) === Constants.MESSAGE_NETWORK_KEY) {\n            this.emit(\"startup\", data);\n        } else {\n            this.emit(\"read\", data);\n        }\n    }\n\n    async write(data: Buffer): Promise<void> {\n        await new Promise<void>((resolve, reject) => {\n            if (this.outEndpoint) {\n                //console.debug(\"DATA SEND: \", data);\n                this.outEndpoint.transfer(data, (error) => {\n                    if (error) {\n                        console.error(\"ERROR SEND: \", error);\n                        reject(error);\n                    } else {\n                        resolve();\n                    }\n                });\n            }\n        });\n    }\n\n    async reset(): Promise<void> {\n        await this.detachAll();\n        this.maxChannels = 0;\n        this.usedChannels = 0;\n        await this.write(Messages.resetSystem());\n    }\n\n    async attach(sensor: BaseSensor, forScan: boolean): Promise<boolean> {\n        if (this.usedChannels < 0) {\n            return Promise.resolve(false);\n        }\n        if (forScan) {\n            if (this.usedChannels !== 0) {\n                return Promise.resolve(false);\n            }\n\n            this.usedChannels = -1;\n        } else {\n            if (this.maxChannels <= this.usedChannels) {\n                return Promise.resolve(false);\n            }\n\n            ++this.usedChannels;\n        }\n\n        this.attachedSensors.push(sensor);\n\n        return Promise.resolve(true);\n    }\n\n    async detach(sensor: BaseSensor): Promise<boolean> {\n        const idx = this.attachedSensors.indexOf(sensor);\n        if (idx < 0) {\n            return Promise.resolve(false);\n        }\n\n        if (this.usedChannels < 0) {\n            this.usedChannels = 0;\n        } else {\n            --this.usedChannels;\n        }\n\n        this.attachedSensors.splice(idx, 1);\n\n        return Promise.resolve(true);\n    }\n\n    async isPresent(): Promise<boolean> {\n        return Promise.resolve(this.getDevices().length > 0);\n    }\n\n    async isScanning(): Promise<boolean> {\n        return Promise.resolve(this.usedChannels === -1);\n    }\n\n    /**\n     * Retrieves a list of USB devices matching the specified vendor and product IDs.\n     *\n     * @private\n     * @returns {usb.usb.Device[]} An array of USB devices that match the specified criteria.\n     */\n    private getDevices(): usb.usb.Device[] {\n        const allDevices = usb.getDeviceList();\n\n        return allDevices.filter((d) => d.deviceDescriptor.idVendor === this.idVendor && d.deviceDescriptor.idProduct === this.idProduct).filter((d) => NodeUSBDriver.deviceInUse.indexOf(d) === -1);\n    }\n\n    /**\n     * Detaches all sensors from the USB driver.\n     */\n    private async detachAll(): Promise<void> {\n        const copy = this.attachedSensors;\n\n        for (const sensor of copy) {\n            await sensor.detach();\n        }\n    }\n\n    private async onData(data: Buffer) {\n        if (!data.length) {\n            return;\n        }\n\n        if (this.leftover) {\n            data = Buffer.concat([this.leftover, data]);\n            this.leftover = undefined;\n        }\n\n        if (data.readUInt8(0) !== 0xa4) {\n            throw new Error(\"SYNC missing\");\n        }\n\n        const len = data.length;\n        let beginBlock = 0;\n        while (beginBlock < len) {\n            if (beginBlock + 1 === len) {\n                this.leftover = data.slice(beginBlock);\n                break;\n            }\n            const blockLen = data.readUInt8(beginBlock + 1);\n            const endBlock = beginBlock + blockLen + 4;\n            if (endBlock > len) {\n                this.leftover = data.slice(beginBlock);\n                break;\n            }\n            const readData = data.slice(beginBlock, endBlock);\n            await this.read(readData);\n            beginBlock = endBlock;\n        }\n    }\n}\n","import { DebugOptions } from \"../types/debugOptions.js\";\nimport { NodeUSBDriver } from \"./driver/index.js\";\n\n/**\n * Class representing a Garmin Stick 2 USB driver, which extends the base USBDriver class.\n */\nexport class GarminStick2 extends NodeUSBDriver {\n    /**\n     * Creates an instance of GarminStick2.\n     *\n     * @param {DebugOptions} [debugOptions={}] - Optional debug options for USB operations.\n     *\n     * @example\n     * ```typescript\n     * const garminStick = new GarminStick2();\n     * garminStick.open(); // Opens the connection to the Garmin Stick 2 device.\n     * ```\n     */\n    constructor(debugOptions: DebugOptions = {}) {\n        super(0x0fcf, 0x1008, debugOptions);\n    }\n}\n","import { DebugOptions } from \"../types/debugOptions.js\";\nimport { NodeUSBDriver } from \"./driver/index.js\";\n\n/**\n * Class representing a Garmin Stick 3 USB driver, which extends the base USBDriver class.\n */\nexport class GarminStick3 extends NodeUSBDriver {\n    /**\n     * Creates an instance of GarminStick3.\n     *\n     * @param {DebugOptions} [debugOptions={}] - Optional debug options for USB operations.\n     *\n     * @example\n     * ```typescript\n     * const garminStick = new GarminStick3({ usbDebugLevel: 1 });\n     * garminStick.open(); // Opens the connection to the Garmin Stick 3 device.\n     * ```\n     */\n    constructor(debugOptions: DebugOptions = {}) {\n        super(0x0fcf, 0x1009, debugOptions);\n    }\n}\n","import { HeartRateScanner } from \"./heartRateScanner.js\";\nimport { HeartRateScannerState } from \"./heartRateScannerState.js\";\nimport { HeartRateSensor } from \"./heartRateSensor.js\";\nimport { HeartRateSensorState } from \"./heartRateSensorState.js\";\nimport { Messages } from \"../../utils/messages.js\";\n\nexport enum PageState {\n    INIT_PAGE,\n    STD_PAGE,\n    EXT_PAGE,\n}\n\nexport type Page = {\n    oldPage: number;\n    pageState: PageState; // sets the state of the receiver - INIT, STD_PAGE, EXT_PAGE\n};\n\nconst TOGGLE_MASK = 0x80;\n\n/**\n * Updates the state of a Heart Rate sensor or scanner based on incoming data.\n * Decodes various pages of data to update the state, including operating time, manufacturer details,\n * battery status, heart rate data, and more.\n *\n * @param {HeartRateSensor | HeartRateScanner} sensor - The sensor or scanner instance emitting the data.\n * @param {HeartRateSensorState | HeartRateScannerState} state - The current state of the sensor or scanner.\n * @param {Page} page - The page information containing the current and old page number.\n * @param {Buffer} data - The raw data buffer received from the sensor.\n * @returns {void}\n *\n * @example\n * const sensor = new HeartRateSensor();\n * const state = new HeartRateSensorState(12345);\n * const page = { oldPage: 0, pageState: PageState.INIT_PAGE };\n * const dataBuffer = getDataFromSensor(); // Assume this function gets data from a sensor\n * updateState(sensor, state, page, dataBuffer);\n */\nexport function updateState(sensor: HeartRateSensor | HeartRateScanner, state: HeartRateSensorState | HeartRateScannerState, page: Page, data: Buffer): void {\n    const pageNum = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA);\n    if (page.pageState === PageState.INIT_PAGE) {\n        page.pageState = PageState.STD_PAGE; // change the state to STD_PAGE and allow the checking of old and new pages\n    } else if (pageNum !== page.oldPage || page.pageState === PageState.EXT_PAGE) {\n        page.pageState = PageState.EXT_PAGE; // set the state to use the extended page format\n        switch (\n            pageNum & ~TOGGLE_MASK // Check the new pages and remove the toggle bit\n        ) {\n            case 1:\n                // Decode the cumulative operating time\n                state.OperatingTime = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 1);\n                state.OperatingTime |= data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 2) << 8;\n                state.OperatingTime |= data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 3) << 16;\n                state.OperatingTime *= 2;\n                break;\n            case 2:\n                // Decode the Manufacturer ID\n                state.ManId = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 1);\n                // Decode the 4-byte serial number\n                state.SerialNumber = state.DeviceId;\n                state.SerialNumber |= data.readUInt16LE(Messages.BUFFER_INDEX_MSG_DATA + 2) << 16;\n                state.SerialNumber >>>= 0;\n                break;\n            case 3:\n                // Decode hardware version, software version, and model number\n                state.HwVersion = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 1);\n                state.SwVersion = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 2);\n                state.ModelNum = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n                break;\n            case 4:\n                // Decode the previous heart beat measurement time\n                state.PreviousBeat = data.readUInt16LE(Messages.BUFFER_INDEX_MSG_DATA + 2);\n                break;\n            case 5:\n                state.IntervalAverage = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 1);\n                state.IntervalMax = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 2);\n                state.SessionAverage = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n                break;\n            case 6:\n                state.SupportedFeatures = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 2);\n                state.EnabledFeatures = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n                break;\n            case 7: {\n                const batteryLevel = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 1);\n                const batteryFrac = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 2);\n                const batteryStatus = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n                if (batteryLevel !== 0xff) {\n                    state.BatteryLevel = batteryLevel;\n                }\n                state.BatteryVoltage = (batteryStatus & 0x0f) + batteryFrac / 256;\n                const batteryFlags = (batteryStatus & 0x70) >>> 4;\n                switch (batteryFlags) {\n                    case 1:\n                        state.BatteryStatus = \"New\";\n                        break;\n                    case 2:\n                        state.BatteryStatus = \"Good\";\n                        break;\n                    case 3:\n                        state.BatteryStatus = \"Ok\";\n                        break;\n                    case 4:\n                        state.BatteryStatus = \"Low\";\n                        break;\n                    case 5:\n                        state.BatteryStatus = \"Critical\";\n                        break;\n                    default:\n                        state.BatteryVoltage = undefined;\n                        state.BatteryStatus = \"Invalid\";\n                        break;\n                }\n                break;\n            }\n            default:\n                break;\n        }\n    }\n    // Decode the last four bytes of the HRM format, the first byte of this message is the channel number\n    DecodeDefaultHRM(state, data.slice(Messages.BUFFER_INDEX_MSG_DATA + 4));\n    page.oldPage = pageNum;\n\n    sensor.emit(\"hbdata\", state);\n    sensor.emit(\"hbData\", state);\n}\n\n/**\n * Decodes the default Heart Rate Monitor (HRM) data from the buffer and updates the sensor state.\n *\n * @param {HeartRateSensorState | HeartRateScannerState} state - The current state of the sensor or scanner.\n * @param {Buffer} pucPayload - The buffer containing the HRM data.\n * @returns {void}\n *\n * @example\n * const state = new HeartRateSensorState(12345);\n * const hrmData = Buffer.from([0x00, 0x01, 0x02, 0x03]); // Sample HRM data buffer\n * DecodeDefaultHRM(state, hrmData);\n */\nfunction DecodeDefaultHRM(state: HeartRateSensorState | HeartRateScannerState, pucPayload: Buffer): void {\n    // Decode the measurement time data (two bytes)\n    state.BeatTime = pucPayload.readUInt16LE(0);\n    // Decode the measurement count data\n    state.BeatCount = pucPayload.readUInt8(2);\n    // Decode the computed heart rate data\n    state.ComputedHeartRate = pucPayload.readUInt8(3);\n}\n","/**\n * Represents the state of a Heart Rate sensor.\n * This class holds the data fields associated with the state of a Heart Rate sensor,\n * including heart rate measurements, device details, and battery status.\n */\nexport class HeartRateSensorState {\n    /**\n     * Creates an instance of the HeartRateSensorState.\n     *\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @example\n     * const sensorState = new HeartRateSensorState(12345);\n     */\n    constructor(deviceId: number) {\n        this.DeviceId = deviceId;\n    }\n\n    /**\n     * The unique identifier of the sensor device.\n     * @type {number}\n     */\n    DeviceId: number;\n\n    /**\n     * The time of the last beat event in milliseconds.\n     * @type {number | undefined}\n     */\n    BeatTime: number | undefined;\n\n    /**\n     * The cumulative count of beat events since the sensor started.\n     * @type {number | undefined}\n     */\n    BeatCount: number | undefined;\n\n    /**\n     * The computed heart rate in beats per minute (BPM).\n     * @type {number | undefined}\n     */\n    ComputedHeartRate: number | undefined;\n\n    /**\n     * The cumulative operating time of the sensor in seconds.\n     * @type {number | undefined}\n     */\n    OperatingTime?: number;\n\n    /**\n     * The manufacturer ID of the sensor.\n     * @type {number | undefined}\n     */\n    ManId?: number;\n\n    /**\n     * The serial number of the sensor.\n     * @type {number | undefined}\n     */\n    SerialNumber?: number;\n\n    /**\n     * The hardware version of the sensor.\n     * @type {number | undefined}\n     */\n    HwVersion?: number;\n\n    /**\n     * The software version of the sensor.\n     * @type {number | undefined}\n     */\n    SwVersion?: number;\n\n    /**\n     * The model number of the sensor.\n     * @type {number | undefined}\n     */\n    ModelNum?: number;\n\n    /**\n     * The time of the previous beat measurement.\n     * @type {number | undefined}\n     */\n    PreviousBeat?: number;\n\n    /**\n     * The average heart rate over a certain interval.\n     * @type {number | undefined}\n     */\n    IntervalAverage?: number;\n\n    /**\n     * The maximum heart rate over a certain interval.\n     * @type {number | undefined}\n     */\n    IntervalMax?: number;\n\n    /**\n     * The average heart rate over the current session.\n     * @type {number | undefined}\n     */\n    SessionAverage?: number;\n\n    /**\n     * The supported features of the sensor.\n     * @type {number | undefined}\n     */\n    SupportedFeatures?: number;\n\n    /**\n     * The enabled features of the sensor.\n     * @type {number | undefined}\n     */\n    EnabledFeatures?: number;\n\n    /**\n     * The battery level of the sensor.\n     * @type {number | undefined}\n     */\n    BatteryLevel?: number;\n\n    /**\n     * The battery voltage of the sensor.\n     * @type {number | undefined}\n     */\n    BatteryVoltage?: number;\n\n    /**\n     * The battery status of the sensor.\n     * Can be \"New\", \"Good\", \"Ok\", \"Low\", \"Critical\", or \"Invalid\".\n     * @type {\"New\" | \"Good\" | \"Ok\" | \"Low\" | \"Critical\" | \"Invalid\" | undefined}\n     */\n    BatteryStatus?: \"New\" | \"Good\" | \"Ok\" | \"Low\" | \"Critical\" | \"Invalid\";\n}\n","import { HeartRateSensorState } from \"./heartRateSensorState.js\";\n\n/**\n * Represents the state of a Heart Rate sensor during scanning.\n * Extends the HeartRateSensorState to include additional fields specific to scanning,\n * such as RSSI (Received Signal Strength Indicator) and signal threshold.\n */\nexport class HeartRateScannerState extends HeartRateSensorState {\n    /**\n     * The received signal strength indicator (RSSI) of the sensor signal.\n     * @type {number | undefined}\n     */\n    Rssi: number | undefined;\n\n    /**\n     * The signal threshold value for the sensor.\n     * @type {number | undefined}\n     */\n    Threshold: number | undefined;\n}\n","import { EventEmitter } from \"events\";\nimport { SendCallback } from \"../types/sendCallback.js\";\nimport { Constants } from \"../types/constants.js\";\nimport { Messages } from \"../utils/messages.js\";\nimport { Status } from \"../types/status.js\";\nimport { USBDriverBase } from \"@/types/usbDriverBase.js\";\n\n/**\n * Abstract base class for sensors that communicates over a USB connection.\n * Extends EventEmitter to handle various events related to sensor data and status.\n */\nexport abstract class BaseSensor extends EventEmitter {\n    channel: number | undefined;\n    deviceId!: number;\n    transmissionType!: number;\n\n    private messageQueue: { msg: Buffer; cbk?: SendCallback }[] = [];\n\n    protected decodeDataCbk: ((data: Buffer) => Promise<void>) | undefined;\n    protected statusCbk: ((status: Status) => Promise<boolean>) | undefined;\n\n    /**\n     * Abstract method to update the state of the sensor.\n     * Must be implemented by subclasses.\n     *\n     * @param {number} deviceId - The device ID to update.\n     * @param {Buffer} data - The data buffer containing the state information.\n     */\n    protected abstract updateState(deviceId: number, data: Buffer): void;\n\n    /**\n     * Creates an instance of BaseSensor.\n     *\n     * @param {USBDriverBase} stick - The USB driver used for communication with the sensor.\n     */\n    constructor(private stick: USBDriverBase) {\n        super();\n        stick.on(\"read\", (data: Buffer) => {\n            this.handleEventMessages(data).catch((error) => {\n                console.error(error);\n            });\n        });\n    }\n\n    /**\n     * Starts scanning for devices of the specified type at a given frequency.\n     *\n     * @param {string} type - The type of device to scan for.\n     * @param {number} frequency - The frequency at which to scan.\n     *\n     * @throws Will throw an error if already attached or if the stick cannot scan.\n     */\n    protected async scan(type: string, frequency: number): Promise<void> {\n        if (this.channel !== undefined) {\n            throw new Error(\"already attached\");\n        }\n\n        if (!this.stick.canScan) {\n            throw new Error(\"stick cannot scan\");\n        }\n\n        const channel = 0;\n\n        const onStatus = async (status: Status) => {\n            switch (status.msg) {\n                case Constants.MESSAGE_RF:\n                    // Handle various message statuses\n                    switch (status.code) {\n                        case Constants.EVENT_CHANNEL_CLOSED:\n                        case Constants.EVENT_RX_FAIL_GO_TO_SEARCH:\n                            await this.write(Messages.unassignChannel(channel));\n                            return true;\n                        case Constants.EVENT_TRANSFER_TX_COMPLETED:\n                        case Constants.EVENT_TRANSFER_TX_FAILED:\n                        case Constants.EVENT_RX_FAIL:\n                        case Constants.INVALID_SCAN_TX_CHANNEL: {\n                            const mc = this.messageQueue.shift();\n                            if (mc && mc.cbk) {\n                                mc.cbk(status.code === Constants.EVENT_TRANSFER_TX_COMPLETED);\n                            }\n                            if (this.messageQueue.length) {\n                                await this.write(this.messageQueue[0].msg);\n                            }\n                            return true;\n                        }\n                        default:\n                            break;\n                    }\n                    break;\n                case Constants.MESSAGE_CHANNEL_ASSIGN:\n                    await this.write(Messages.setDevice(channel, 0, 0, 0));\n                    return true;\n                case Constants.MESSAGE_CHANNEL_ID:\n                    await this.write(Messages.setFrequency(channel, frequency));\n                    return true;\n                case Constants.MESSAGE_CHANNEL_FREQUENCY:\n                    await this.write(Messages.setRxExt());\n                    return true;\n                case Constants.MESSAGE_ENABLE_RX_EXT:\n                    await this.write(Messages.libConfig(channel, 0xe0));\n                    return true;\n                case Constants.MESSAGE_LIB_CONFIG:\n                    await this.write(Messages.openRxScan());\n                    return true;\n                case Constants.MESSAGE_CHANNEL_OPEN_RX_SCAN:\n                    process.nextTick(() => this.emit(\"attached\"));\n                    return true;\n                case Constants.MESSAGE_CHANNEL_CLOSE:\n                    return true;\n                case Constants.MESSAGE_CHANNEL_UNASSIGN:\n                    this.statusCbk = undefined;\n                    this.channel = undefined;\n                    process.nextTick(() => this.emit(\"detached\"));\n                    return true;\n                case Constants.MESSAGE_CHANNEL_ACKNOWLEDGED_DATA:\n                    return status.code === Constants.TRANSFER_IN_PROGRESS;\n                default:\n                    break;\n            }\n            return false;\n        };\n\n        if (await this.stick.isScanning()) {\n            this.channel = channel;\n            this.deviceId = 0;\n            this.transmissionType = 0;\n\n            this.statusCbk = onStatus;\n\n            process.nextTick(() => this.emit(\"attached\"));\n        } else if (await this.stick.attach(this, true)) {\n            this.channel = channel;\n            this.deviceId = 0;\n            this.transmissionType = 0;\n\n            this.statusCbk = onStatus;\n\n            await this.write(Messages.assignChannel(channel, type));\n        } else {\n            throw new Error(\"cannot attach\");\n        }\n    }\n\n    /**\n     * Attaches the sensor to a specific channel with the given parameters.\n     *\n     * @param {number} channel - The channel number to attach to.\n     * @param {string} type - The type of device.\n     * @param {number} deviceId - The device ID.\n     * @param {number} deviceType - The type of the device.\n     * @param {number} transmissionType - The transmission type.\n     * @param {number} timeout - The timeout value for the channel.\n     * @param {number} period - The period for communication.\n     * @param {number} frequency - The frequency for communication.\n     *\n     * @throws Will throw an error if already attached or if unable to attach.\n     */\n    protected async attachSensor(channel: number, type: string, deviceId: number, deviceType: number, transmissionType: number, timeout: number, period: number, frequency: number) {\n        if (this.channel !== undefined) {\n            throw new Error(\"already attached\");\n        }\n\n        const attached = await this.stick.attach(this, false);\n        if (!attached) {\n            throw new Error(\"cannot attach\");\n        }\n\n        this.channel = channel;\n        this.deviceId = deviceId;\n        this.transmissionType = transmissionType;\n\n        const onStatus = async (status: Status) => {\n            switch (status.msg) {\n                case Constants.MESSAGE_RF:\n                    // Handle various message statuses\n                    switch (status.code) {\n                        case Constants.EVENT_CHANNEL_CLOSED:\n                        case Constants.EVENT_RX_FAIL_GO_TO_SEARCH:\n                            await this.write(Messages.unassignChannel(channel));\n                            return true;\n                        case Constants.EVENT_TRANSFER_TX_COMPLETED:\n                        case Constants.EVENT_TRANSFER_TX_FAILED:\n                        case Constants.EVENT_RX_FAIL:\n                        case Constants.INVALID_SCAN_TX_CHANNEL: {\n                            const mc = this.messageQueue.shift();\n                            if (mc && mc.cbk) {\n                                mc.cbk(status.code === Constants.EVENT_TRANSFER_TX_COMPLETED);\n                            }\n                            if (this.messageQueue.length) {\n                                await this.write(this.messageQueue[0].msg);\n                            }\n                            return true;\n                        }\n                        case Constants.EVENT_CHANNEL_COLLISION:\n                            return true;\n                        default:\n                            break;\n                    }\n                    break;\n                case Constants.MESSAGE_CHANNEL_ASSIGN:\n                    await this.write(Messages.setDevice(channel, deviceId, deviceType, transmissionType));\n                    return true;\n                case Constants.MESSAGE_CHANNEL_ID:\n                    await this.write(Messages.searchChannel(channel, timeout));\n                    return true;\n                case Constants.MESSAGE_CHANNEL_SEARCH_TIMEOUT:\n                    await this.write(Messages.setFrequency(channel, frequency));\n                    return true;\n                case Constants.MESSAGE_CHANNEL_FREQUENCY:\n                    await this.write(Messages.setPeriod(channel, period));\n                    return true;\n                case Constants.MESSAGE_CHANNEL_PERIOD:\n                    await this.write(Messages.libConfig(channel, 0xe0));\n                    return true;\n                case Constants.MESSAGE_LIB_CONFIG:\n                    await this.write(Messages.openChannel(channel));\n                    return true;\n                case Constants.MESSAGE_CHANNEL_OPEN:\n                    process.nextTick(() => this.emit(\"attached\"));\n                    return true;\n                case Constants.MESSAGE_CHANNEL_CLOSE:\n                    return true;\n                case Constants.MESSAGE_CHANNEL_UNASSIGN:\n                    this.statusCbk = undefined;\n                    this.channel = undefined;\n                    process.nextTick(() => this.emit(\"detached\"));\n                    return true;\n                case Constants.MESSAGE_CHANNEL_ACKNOWLEDGED_DATA:\n                    return status.code === Constants.TRANSFER_IN_PROGRESS;\n                default:\n                    break;\n            }\n            return false;\n        };\n\n        this.statusCbk = onStatus;\n\n        await this.write(Messages.assignChannel(channel, type));\n    }\n\n    /**\n     * Detaches the sensor from its assigned channel and stops communication.\n     *\n     * @throws Will throw an error if there is an issue detaching.\n     */\n    public async detach() {\n        if (this.channel === undefined) {\n            return;\n        }\n        await this.write(Messages.closeChannel(this.channel));\n        const detached = await this.stick.detach(this);\n        if (!detached) {\n            throw new Error(\"error detaching\");\n        }\n    }\n\n    /**\n     * Sends data to the USB device.\n     *\n     * @param {Buffer} data - The data buffer to send.\n     */\n    protected async write(data: Buffer): Promise<void> {\n        await this.stick.write(data);\n    }\n\n    /**\n     * Handles incoming event messages from the USB device.\n     *\n     * @private\n     * @param {Buffer} data - The data buffer containing the event message.\n     */\n    private async handleEventMessages(data: Buffer): Promise<void> {\n        const messageId = data.readUInt8(Messages.BUFFER_INDEX_MSG_TYPE);\n        const channel = data.readUInt8(Messages.BUFFER_INDEX_CHANNEL_NUM);\n\n        if (channel === this.channel) {\n            if (messageId === Constants.MESSAGE_CHANNEL_EVENT) {\n                const status: Status = {\n                    msg: data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA),\n                    code: data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 1),\n                };\n\n                const handled = this.statusCbk && this.statusCbk(status);\n                if (!handled) {\n                    console.log(\"Unhandled event: \" + data.toString(\"hex\"));\n                    this.emit(\"eventData\", {\n                        message: data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA),\n                        code: data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 1),\n                    });\n                }\n            } else if (this.decodeDataCbk) {\n                await this.decodeDataCbk(data);\n            }\n        }\n    }\n\n    /**\n     * Sends data and optionally a callback to handle the result of the send operation.\n     *\n     * @param {Buffer} data - The data buffer to send.\n     * @param {SendCallback} [cbk] - Optional callback to handle the send result.\n     */\n    protected async send(data: Buffer, cbk?: SendCallback): Promise<void> {\n        this.messageQueue.push({ msg: data, cbk });\n        if (this.messageQueue.length === 1) {\n            await this.write(data);\n        }\n    }\n}\n","import { BaseSensor } from \"./baseSensor.js\";\n\n/**\n * Abstract base class for ANT+ sensors, extending the functionality of the BaseSensor class.\n * This class provides methods to scan and attach ANT+ sensors with specific configurations.\n */\nexport abstract class AntPlusBaseSensor extends BaseSensor {\n    /**\n     * Initiates a scan for ANT+ sensors of a specific type.\n     *\n     * @protected\n     * @param {string} type - The type of sensor to scan for.\n     * @returns {Promise<void>} A promise that resolves when the scan is complete.\n     *\n     * @example\n     * // Example usage:\n     * const sensor = new AntPlusSensor();\n     * sensor.scan('heartRate');\n     */\n    protected async scan(type: string): Promise<void> {\n        return await super.scan(type, 57);\n    }\n\n    /**\n     * Attaches to a specific ANT+ sensor by configuring the channel, type, device ID, device type, transmission type, timeout, and period.\n     *\n     * @protected\n     * @param {number} channel - The channel number to use for communication with the sensor.\n     * @param {string} type - The type of sensor to attach to.\n     * @param {number} deviceId - The unique ID of the device to attach to.\n     * @param {number} deviceType - The type of the device (e.g., heart rate monitor, speed sensor).\n     * @param {number} transmissionType - The transmission type used by the sensor.\n     * @param {number} timeout - The timeout period for communication in seconds.\n     * @param {number} period - The communication period with the sensor in milliseconds.\n     * @returns {Promise<void>} A promise that resolves when the sensor is successfully attached.\n     *\n     * @example\n     * // Example usage:\n     * const sensor = new AntPlusSensor();\n     * sensor.attachSensor(1, 'heartRate', 12345, 120, 5, 60, 8070);\n     */\n    protected async attachSensor(channel: number, type: string, deviceId: number, deviceType: number, transmissionType: number, timeout: number, period: number): Promise<void> {\n        return await super.attachSensor(channel, type, deviceId, deviceType, transmissionType, timeout, period, 57);\n    }\n}\n","import { AntPlusBaseSensor } from \"./antPlusBaseSensor.js\";\nimport { Constants } from \"../types/constants.js\";\nimport { Messages } from \"../utils/messages.js\";\nimport { USBDriverBase } from \"@/types/usbDriverBase.js\";\n\n/**\n * Abstract base class for managing a specific ANT+ sensor, extending the functionality\n * of the AntPlusBaseSensor class. Provides methods for attaching sensors and decoding data.\n */\nexport abstract class AntPlusSensor extends AntPlusBaseSensor {\n    /**\n     * Constructs an instance of the AntPlusSensor class.\n     *\n     * @param {USBDriverBase} stick - The USB driver instance used for communication with the ANT+ stick.\n     */\n    constructor(stick: USBDriverBase) {\n        super(stick);\n        this.decodeDataCbk = this.decodeData.bind(this);\n    }\n\n    /**\n     * Unsupported method for scanning sensors. Throws an error when called.\n     *\n     * @protected\n     * @throws {Error} Always throws an error indicating that scanning is unsupported.\n     */\n    protected scan(): Promise<void> {\n        throw new Error(\"scanning unsupported\");\n    }\n\n    /**\n     * Attaches to a specific ANT+ sensor by configuring the channel, type, device ID, device type,\n     * transmission type, timeout, and period.\n     *\n     * @protected\n     * @param {number} channel - The channel number to use for communication with the sensor.\n     * @param {string} type - The type of sensor to attach to.\n     * @param {number} deviceId - The unique ID of the device to attach to.\n     * @param {number} deviceType - The type of the device (e.g., heart rate monitor, speed sensor).\n     * @param {number} transmissionType - The transmission type used by the sensor.\n     * @param {number} timeout - The timeout period for communication in seconds.\n     * @param {number} period - The communication period with the sensor in milliseconds.\n     * @returns {Promise<void>} A promise that resolves when the sensor is successfully attached.\n     *\n     * @example\n     * // Example usage:\n     * const sensor = new AntPlusSensor();\n     * sensor.attachSensor(1, 'heartRate', 12345, 120, 5, 60, 8070);\n     */\n    protected async attachSensor(channel: number, type: string, deviceId: number, deviceType: number, transmissionType: number, timeout: number, period: number): Promise<void> {\n        return await super.attachSensor(channel, type, deviceId, deviceType, transmissionType, timeout, period);\n    }\n\n    /**\n     * Decodes the incoming data from the ANT+ sensor and updates the sensor state.\n     *\n     * @private\n     * @param {Buffer} data - The raw data buffer received from the ANT+ sensor.\n     * @returns {void}\n     *\n     * @example\n     * // Example usage:\n     * const dataBuffer = getDataFromSensor(); // assume this function gets data from a sensor\n     * decodeData(dataBuffer);\n     */\n    private async decodeData(data: Buffer): Promise<void> {\n        switch (data.readUInt8(Messages.BUFFER_INDEX_MSG_TYPE)) {\n            case Constants.MESSAGE_CHANNEL_BROADCAST_DATA:\n            case Constants.MESSAGE_CHANNEL_ACKNOWLEDGED_DATA:\n            case Constants.MESSAGE_CHANNEL_BURST_DATA:\n                if (this.deviceId === 0 && this.channel) {\n                    await this.write(Messages.requestMessage(this.channel, Constants.MESSAGE_CHANNEL_ID));\n                }\n                this.updateState(this.deviceId, data);\n                break;\n            case Constants.MESSAGE_CHANNEL_ID:\n                this.deviceId = data.readUInt16LE(Messages.BUFFER_INDEX_MSG_DATA);\n                this.transmissionType = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n                break;\n            default:\n                break;\n        }\n    }\n}\n","/*\n * ANT+ profile: https://www.thisisant.com/developer/ant-plus/device-profiles/#526_tab\n * Spec sheet: https://www.thisisant.com/resources/heart-rate-monitor/\n */\n\nimport { Page, PageState, updateState } from \"./heartRateUtils.js\";\nimport { HeartRateSensorState } from \"./heartRateSensorState.js\";\nimport { AntPlusSensor } from \"../antPlusSensor.js\";\n\n/**\n * Represents a Heart Rate sensor.\n * This class extends the AntPlusSensor class to handle specific data related to heart rate monitoring.\n */\nexport class HeartRateSensor extends AntPlusSensor {\n    /**\n     * The device type code for Heart Rate sensors.\n     * @type {number}\n     * @readonly\n     */\n    static deviceType: number = 120;\n\n    /**\n     * Attaches the sensor to a specified ANT+ channel and initializes its state.\n     *\n     * @public\n     * @param {number} channel - The ANT+ channel number used for communication with the sensor.\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @returns {void}\n     *\n     * @example\n     * const sensor = new HeartRateSensor();\n     * sensor.attach(1, 12345); // Attaches to channel 1 with device ID 12345\n     */\n    public attach(channel: number, deviceId: number) {\n        super.attachSensor(channel, \"receive\", deviceId, HeartRateSensor.deviceType, 0, 255, 8070);\n        this.state = new HeartRateSensorState(deviceId);\n    }\n\n    /**\n     * The current state of the Heart Rate sensor.\n     * @private\n     * @type {HeartRateSensorState}\n     */\n    private state!: HeartRateSensorState;\n\n    /**\n     * Represents the page information used in communication with the sensor.\n     * @private\n     * @type {Page}\n     * @default { oldPage: -1, pageState: PageState.INIT_PAGE }\n     */\n    private page: Page = {\n        oldPage: -1,\n        pageState: PageState.INIT_PAGE,\n    };\n\n    /**\n     * Updates the state of the sensor based on incoming data.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {Buffer} data - The raw data buffer received from the sensor.\n     * @returns {void}\n     *\n     * @example\n     * const dataBuffer = getDataFromSensor(); // assume this function gets data from a sensor\n     * sensor.updateState(12345, dataBuffer);\n     */\n    protected updateState(deviceId: number, data: Buffer) {\n        this.state.DeviceId = deviceId;\n        updateState(this, this.state, this.page, data);\n    }\n}\n","import { AntPlusBaseSensor } from \"./antPlusBaseSensor.js\";\nimport { Constants } from \"../types/constants.js\";\nimport { Messages } from \"../utils/messages.js\";\nimport { USBDriverBase } from \"@/types/usbDriverBase.js\";\n\n/**\n * Abstract base class for scanning and decoding data from ANT+ sensors.\n * This class provides methods to scan for sensors, handle sensor data, and manage sensor states.\n */\nexport abstract class AntPlusScanner extends AntPlusBaseSensor {\n    /**\n     * Returns the type of device being scanned for.\n     *\n     * @protected\n     * @returns {number} The numeric code representing the device type.\n     */\n    protected abstract deviceType(): number;\n\n    /**\n     * Creates a new state for the device if it does not already exist.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the device.\n     */\n    protected abstract createStateIfNew(deviceId: number): void;\n\n    /**\n     * Updates the RSSI (Received Signal Strength Indicator) and the signal threshold for the specified device.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the device.\n     * @param {number} rssi - The received signal strength indicator of the device.\n     * @param {number} threshold - The signal threshold value for the device.\n     */\n    protected abstract updateRssiAndThreshold(deviceId: number, rssi: number, threshold: number): void;\n\n    /**\n     * Constructs an instance of the AntPlusScanner class.\n     *\n     * @param {USBDriverBase} stick - The USB driver instance used for communication with the ANT+ stick.\n     */\n    constructor(stick: USBDriverBase) {\n        super(stick);\n        this.decodeDataCbk = this.decodeData.bind(this);\n    }\n\n    /**\n     * Initiates a scan for ANT+ sensors by receiving broadcast messages.\n     *\n     * @public\n     * @returns {Promise<void>} A promise that resolves when the scanning process is complete.\n     *\n     * @example\n     * // Example usage:\n     * const scanner = new AntPlusScanner();\n     * scanner.scan();\n     */\n    public async scan(): Promise<void> {\n        return await super.scan(\"receive\");\n    }\n\n    /**\n     * Unsupported method for attaching to a sensor. Throws an error when called.\n     *\n     * @protected\n     * @throws {Error} Always throws an error indicating that attaching is unsupported.\n     */\n    protected attach() {\n        throw new Error(\"attach unsupported\");\n    }\n\n    /**\n     * Unsupported method for sending data to a sensor. Throws an error when called.\n     *\n     * @protected\n     * @throws {Error} Always throws an error indicating that sending is unsupported.\n     */\n    protected send(): Promise<void> {\n        throw new Error(\"send unsupported\");\n    }\n\n    /**\n     * Decodes the incoming data from the ANT+ sensors and updates the sensor state.\n     *\n     * @private\n     * @param {Buffer} data - The raw data buffer received from the ANT+ sensor.\n     * @returns {void}\n     *\n     * @example\n     * // Example usage:\n     * const dataBuffer = getDataFromSensor(); // assume this function gets data from a sensor\n     * decodeData(dataBuffer);\n     */\n    // eslint-disable-next-line @typescript-eslint/require-await\n    private async decodeData(data: Buffer): Promise<void> {\n        if (data.length <= Messages.BUFFER_INDEX_EXT_MSG_BEGIN + 3 || !(data.readUInt8(Messages.BUFFER_INDEX_EXT_MSG_BEGIN) & 0x80)) {\n            console.log(\"wrong message format\", data.toString(\"hex\"));\n            return;\n        }\n\n        const deviceId = data.readUInt16LE(Messages.BUFFER_INDEX_EXT_MSG_BEGIN + 1);\n        const deviceType = data.readUInt8(Messages.BUFFER_INDEX_EXT_MSG_BEGIN + 3);\n\n        if (deviceType !== this.deviceType()) {\n            return;\n        }\n\n        this.createStateIfNew(deviceId);\n\n        if (data.readUInt8(Messages.BUFFER_INDEX_EXT_MSG_BEGIN) & 0x40) {\n            if (data.readUInt8(Messages.BUFFER_INDEX_EXT_MSG_BEGIN + 5) === 0x20) {\n                this.updateRssiAndThreshold(deviceId, data.readInt8(Messages.BUFFER_INDEX_EXT_MSG_BEGIN + 6), data.readInt8(Messages.BUFFER_INDEX_EXT_MSG_BEGIN + 7));\n            }\n        }\n\n        switch (data.readUInt8(Messages.BUFFER_INDEX_MSG_TYPE)) {\n            case Constants.MESSAGE_CHANNEL_BROADCAST_DATA:\n            case Constants.MESSAGE_CHANNEL_ACKNOWLEDGED_DATA:\n            case Constants.MESSAGE_CHANNEL_BURST_DATA:\n                this.updateState(deviceId, data);\n                break;\n            default:\n                break;\n        }\n    }\n}\n","import { Page, PageState, updateState } from \"./heartRateUtils.js\";\nimport { HeartRateScannerState } from \"./heartRateScannerState.js\";\nimport { HeartRateSensor } from \"./heartRateSensor.js\";\nimport { AntPlusScanner } from \"../antPlusScanner.js\";\n\n/**\n * Represents a scanner for Heart Rate sensors.\n * Extends the AntPlusScanner class to handle scanning and state updates for multiple Heart Rate sensors.\n */\nexport class HeartRateScanner extends AntPlusScanner {\n    /**\n     * Returns the device type code for Heart Rate sensors.\n     *\n     * @protected\n     * @returns {number} The device type code for Heart Rate sensors.\n     */\n    protected deviceType(): number {\n        return HeartRateSensor.deviceType;\n    }\n\n    /**\n     * A dictionary to store the states of detected Heart Rate sensors by their device ID.\n     * @private\n     * @type {{ [id: number]: HeartRateScannerState }}\n     */\n    private states: { [id: number]: HeartRateScannerState } = {};\n\n    /**\n     * A dictionary to store page information for each detected Heart Rate sensor by their device ID.\n     * @private\n     * @type {{ [id: number]: Page }}\n     */\n    private pages: { [id: number]: Page } = {};\n\n    /**\n     * Creates a new state entry and page information for a sensor if they do not already exist.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @returns {void}\n     *\n     * @example\n     * scanner.createStateIfNew(12345); // Creates a new state and page info for device ID 12345 if they do not exist.\n     */\n    protected createStateIfNew(deviceId: number): void {\n        if (!this.states[deviceId]) {\n            this.states[deviceId] = new HeartRateScannerState(deviceId);\n        }\n\n        if (!this.pages[deviceId]) {\n            this.pages[deviceId] = { oldPage: -1, pageState: PageState.INIT_PAGE };\n        }\n    }\n\n    /**\n     * Updates the RSSI (Received Signal Strength Indicator) and signal threshold for a specific sensor.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {number} rssi - The received signal strength indicator of the device.\n     * @param {number} threshold - The signal threshold value for the device.\n     * @returns {void}\n     *\n     * @example\n     * scanner.updateRssiAndThreshold(12345, -70, 30); // Updates the RSSI and threshold for device ID 12345.\n     */\n    protected updateRssiAndThreshold(deviceId: number, rssi: number, threshold: number): void {\n        this.states[deviceId].Rssi = rssi;\n        this.states[deviceId].Threshold = threshold;\n    }\n\n    /**\n     * Updates the state of a sensor based on incoming data.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {Buffer} data - The raw data buffer received from the sensor.\n     * @returns {void}\n     *\n     * @example\n     * const dataBuffer = getDataFromSensor(); // Assume this function gets data from a sensor\n     * scanner.updateState(12345, dataBuffer); // Updates the state for device ID 12345.\n     */\n    protected updateState(deviceId: number, data: Buffer): void {\n        updateState(this, this.states[deviceId], this.pages[deviceId], data);\n    }\n}\n","import { StrideSpeedDistanceScanner } from \"./strideSpeedDistanceScanner.js\";\nimport { StrideSpeedDistanceScanState } from \"./strideSpeedDistanceScanState.js\";\nimport { StrideSpeedDistanceSensor } from \"./strideSpeedDistanceSensor.js\";\nimport { StrideSpeedDistanceSensorState } from \"./strideSpeedDistanceSensorState.js\";\nimport { Messages } from \"../../utils/messages.js\";\n\n/**\n * Updates the state of a Stride-Based Speed and Distance Monitor (SDM) sensor or scanner\n * based on the data received from the sensor.\n *\n * @param {StrideSpeedDistanceSensor | StrideSpeedDistanceScanner} sensor - The sensor or scanner instance emitting the data.\n * @param {StrideSpeedDistanceSensorState | StrideSpeedDistanceScanState} state - The current state of the sensor or scanner.\n * @param {Buffer} data - The raw data buffer received from the sensor.\n * @returns {void}\n *\n * @example\n * const sensor = new StrideSpeedDistanceSensor();\n * const state = new StrideSpeedDistanceSensorState(12345);\n * const dataBuffer = getDataFromSensor(); // Assume this function gets data from a sensor\n * updateState(sensor, state, dataBuffer);\n */\nexport function updateState(sensor: StrideSpeedDistanceSensor | StrideSpeedDistanceScanner, state: StrideSpeedDistanceSensorState | StrideSpeedDistanceScanState, data: Buffer) {\n    const page = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA);\n\n    if (page === 1) {\n        state.TimeFractional = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 1);\n        state.TimeInteger = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 2);\n        state.DistanceInteger = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n        state.DistanceFractional = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 4) >>> 4;\n        state.SpeedInteger = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 4) & 0x0f;\n        state.SpeedFractional = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 5);\n        state.StrideCount = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 6);\n        state.UpdateLatency = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 7);\n    } else if (page >= 2 && page <= 15) {\n        state.CadenceInteger = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n        state.CadenceFractional = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 4) >>> 4;\n        state.SpeedInteger = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 4) & 0x0f;\n        state.SpeedFractional = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 5);\n        state.Status = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 7);\n\n        switch (page) {\n            case 3:\n                state.Calories = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 6);\n                break;\n            default:\n                break;\n        }\n    }\n\n    sensor.emit(\"ssddata\", state);\n    sensor.emit(\"ssdData\", state);\n}\n","/**\n * Represents the state of a Stride-Based Speed and Distance Monitor (SDM) sensor.\n * This class holds the data fields associated with the SDM sensor's state, including device ID,\n * speed, distance, cadence, and other relevant metrics.\n */\nexport class StrideSpeedDistanceSensorState {\n    /**\n     * Creates an instance of the StrideSpeedDistanceSensorState.\n     *\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @example\n     * const sensorState = new StrideSpeedDistanceSensorState(12345);\n     */\n    constructor(deviceId: number) {\n        this.DeviceId = deviceId;\n    }\n\n    /**\n     * The unique identifier of the sensor device.\n     * @type {number}\n     */\n    DeviceId: number;\n\n    /**\n     * The fractional part of the elapsed time in seconds.\n     * @type {number | undefined}\n     */\n    TimeFractional: number | undefined;\n\n    /**\n     * The integer part of the elapsed time in seconds.\n     * @type {number | undefined}\n     */\n    TimeInteger: number | undefined;\n\n    /**\n     * The integer part of the total distance traveled in meters.\n     * @type {number | undefined}\n     */\n    DistanceInteger: number | undefined;\n\n    /**\n     * The fractional part of the total distance traveled in meters.\n     * @type {number | undefined}\n     */\n    DistanceFractional: number | undefined;\n\n    /**\n     * The integer part of the speed in meters per second.\n     * @type {number | undefined}\n     */\n    SpeedInteger: number | undefined;\n\n    /**\n     * The fractional part of the speed in meters per second.\n     * @type {number | undefined}\n     */\n    SpeedFractional: number | undefined;\n\n    /**\n     * The total number of strides counted.\n     * @type {number | undefined}\n     */\n    StrideCount: number | undefined;\n\n    /**\n     * The latency in milliseconds between updates.\n     * @type {number | undefined}\n     */\n    UpdateLatency: number | undefined;\n\n    /**\n     * The integer part of the cadence in strides per minute.\n     * @type {number | undefined}\n     */\n    CadenceInteger: number | undefined;\n\n    /**\n     * The fractional part of the cadence in strides per minute.\n     * @type {number | undefined}\n     */\n    CadenceFractional: number | undefined;\n\n    /**\n     * The status of the sensor, represented by a numeric value.\n     * @type {number | undefined}\n     */\n    Status: number | undefined;\n\n    /**\n     * The total calories burned, if available.\n     * @type {number | undefined}\n     */\n    Calories: number | undefined;\n}\n","import { StrideSpeedDistanceSensorState } from \"./strideSpeedDistanceSensorState.js\";\n\n/**\n * Represents the state of a Stride-Based Speed and Distance Monitor (SDM) sensor during scanning.\n * Extends the StrideSpeedDistanceSensorState to include additional fields specific to scanning,\n * such as RSSI (Received Signal Strength Indicator) and the signal threshold.\n */\nexport class StrideSpeedDistanceScanState extends StrideSpeedDistanceSensorState {\n    /**\n     * The received signal strength indicator (RSSI) of the sensor signal.\n     * @type {number | undefined}\n     */\n    Rssi: number | undefined;\n\n    /**\n     * The signal threshold value.\n     * @type {number | undefined}\n     */\n    Threshold: number | undefined;\n}\n","/*\n * ANT+ profile: https://www.thisisant.com/developer/ant-plus/device-profiles/#528_tab\n * Spec sheet: https://www.thisisant.com/resources/stride-based-speed-and-distance-monitor/\n */\n\nimport { AntPlusSensor } from \"../antPlusSensor.js\";\nimport { updateState } from \"./strideSpeedDistanceUtils.js\";\nimport { StrideSpeedDistanceSensorState } from \"./strideSpeedDistanceSensorState.js\";\n\n/**\n * Represents a Stride-Based Speed and Distance Monitor (SDM) sensor.\n * This class extends the AntPlusSensor class to provide specific functionality for handling SDM sensor data.\n */\nexport class StrideSpeedDistanceSensor extends AntPlusSensor {\n    /**\n     * The device type code for Stride-Based Speed and Distance Monitor (SDM) sensors.\n     * @type {number}\n     * @readonly\n     */\n    static deviceType: number = 124;\n\n    /**\n     * Attaches the sensor to a specified ANT+ channel and initializes its state.\n     *\n     * @public\n     * @param {number} channel - The ANT+ channel number used for communication with the sensor.\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @returns {void}\n     *\n     * @example\n     * const sensor = new StrideSpeedDistanceSensor();\n     * sensor.attach(1, 12345); // Attaches to channel 1 with device ID 12345\n     */\n    public attach(channel: number, deviceId: number) {\n        super.attachSensor(channel, \"receive\", deviceId, StrideSpeedDistanceSensor.deviceType, 0, 255, 8134);\n        this.state = new StrideSpeedDistanceSensorState(deviceId);\n    }\n\n    /**\n     * The current state of the Stride-Based Speed and Distance Monitor sensor.\n     * @private\n     * @type {StrideSpeedDistanceSensorState}\n     */\n    private state!: StrideSpeedDistanceSensorState;\n\n    /**\n     * Updates the state of the sensor based on incoming data.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {Buffer} data - The raw data buffer received from the sensor.\n     * @returns {void}\n     *\n     * @example\n     * const dataBuffer = getDataFromSensor(); // assume this function gets data from a sensor\n     * sensor.updateState(12345, dataBuffer);\n     */\n    protected updateState(deviceId: number, data: Buffer) {\n        this.state.DeviceId = deviceId;\n        updateState(this, this.state, data);\n    }\n}\n","import { AntPlusScanner } from \"../antPlusScanner.js\";\nimport { updateState } from \"./strideSpeedDistanceUtils.js\";\nimport { StrideSpeedDistanceScanState } from \"./strideSpeedDistanceScanState.js\";\nimport { StrideSpeedDistanceSensor } from \"./strideSpeedDistanceSensor.js\";\n\n/**\n * Represents a scanner for Stride-Based Speed and Distance Monitor (SDM) sensors.\n * Extends the AntPlusScanner class to handle scanning and state updates for multiple SDM sensors.\n */\nexport class StrideSpeedDistanceScanner extends AntPlusScanner {\n    /**\n     * Returns the device type code for Stride-Based Speed and Distance Monitor sensors.\n     *\n     * @protected\n     * @returns {number} The device type code for SDM sensors.\n     */\n    protected deviceType(): number {\n        return StrideSpeedDistanceSensor.deviceType;\n    }\n\n    /**\n     * A dictionary to store the states of detected SDM sensors by their device ID.\n     * @private\n     * @type {{ [id: number]: StrideSpeedDistanceScanState }}\n     */\n    private states: { [id: number]: StrideSpeedDistanceScanState } = {};\n\n    /**\n     * Creates a new state entry for a sensor if it does not already exist.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @returns {void}\n     *\n     * @example\n     * scanner.createStateIfNew(12345); // Creates a new state for device ID 12345 if it does not exist.\n     */\n    protected createStateIfNew(deviceId: number): void {\n        if (!this.states[deviceId]) {\n            this.states[deviceId] = new StrideSpeedDistanceScanState(deviceId);\n        }\n    }\n\n    /**\n     * Updates the RSSI (Received Signal Strength Indicator) and signal threshold for a specific sensor.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {number} rssi - The received signal strength indicator of the device.\n     * @param {number} threshold - The signal threshold value for the device.\n     * @returns {void}\n     *\n     * @example\n     * scanner.updateRssiAndThreshold(12345, -70, 30); // Updates the RSSI and threshold for device ID 12345.\n     */\n    protected updateRssiAndThreshold(deviceId: number, rssi: number, threshold: number): void {\n        this.states[deviceId].Rssi = rssi;\n        this.states[deviceId].Threshold = threshold;\n    }\n\n    /**\n     * Updates the state of a sensor based on incoming data.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {Buffer} data - The raw data buffer received from the sensor.\n     * @returns {void}\n     *\n     * @example\n     * const dataBuffer = getDataFromSensor(); // Assume this function gets data from a sensor\n     * scanner.updateState(12345, dataBuffer); // Updates the state for device ID 12345.\n     */\n    protected updateState(deviceId: number, data: Buffer): void {\n        updateState(this, this.states[deviceId], data);\n    }\n}\n","import { SpeedCadenceScanner } from \"./speedCadenceScanner.js\";\nimport { SpeedCadenceScanState } from \"./speedCadenceScanState.js\";\nimport { SpeedCadenceSensor } from \"./speedCadenceSensor.js\";\nimport { SpeedCadenceSensorState } from \"./speedCadenceSensorState.js\";\nimport { Messages } from \"../../utils/messages.js\";\n\n/**\n * Updates the state of a Speed and Cadence sensor or scanner based on the incoming data.\n * Calculates the cadence and speed based on the revolution counts and event times provided in the data buffer.\n *\n * @param {SpeedCadenceSensor | SpeedCadenceScanner} sensor - The sensor or scanner instance emitting the data.\n * @param {SpeedCadenceSensorState | SpeedCadenceScanState} state - The current state of the sensor or scanner.\n * @param {Buffer} data - The raw data buffer received from the sensor.\n * @returns {void}\n *\n * @example\n * const sensor = new SpeedCadenceSensor();\n * const state = new SpeedCadenceSensorState(12345);\n * const dataBuffer = getDataFromSensor(); // Assume this function gets data from a sensor\n * updateState(sensor, state, dataBuffer);\n */\nexport function updateState(sensor: SpeedCadenceSensor | SpeedCadenceScanner, state: SpeedCadenceSensorState | SpeedCadenceScanState, data: Buffer) {\n    // Get old state for calculating cumulative values\n    const oldCadenceTime = state.CadenceEventTime ?? 0;\n    const oldCadenceCount = state.CumulativeCadenceRevolutionCount ?? 0;\n    const oldSpeedTime = state.SpeedEventTime ?? 0;\n    const oldSpeedCount = state.CumulativeSpeedRevolutionCount ?? 0;\n\n    let cadenceTime = data.readUInt16LE(Messages.BUFFER_INDEX_MSG_DATA);\n    let cadenceCount = data.readUInt16LE(Messages.BUFFER_INDEX_MSG_DATA + 2);\n    let speedEventTime = data.readUInt16LE(Messages.BUFFER_INDEX_MSG_DATA + 4);\n    let speedRevolutionCount = data.readUInt16LE(Messages.BUFFER_INDEX_MSG_DATA + 6);\n\n    if (cadenceTime !== oldCadenceTime) {\n        state.CadenceEventTime = cadenceTime;\n        state.CumulativeCadenceRevolutionCount = cadenceCount;\n\n        if (oldCadenceTime > cadenceTime) {\n            // Hit rollover value\n            cadenceTime += 1024 * 64;\n        }\n\n        if (oldCadenceCount > cadenceCount) {\n            // Hit rollover value\n            cadenceCount += 1024 * 64;\n        }\n\n        const cadence = (60 * (cadenceCount - oldCadenceCount) * 1024) / (cadenceTime - oldCadenceTime);\n        if (!isNaN(cadence)) {\n            state.CalculatedCadence = cadence;\n            sensor.emit(\"cadenceData\", state);\n        }\n    }\n\n    if (speedEventTime !== oldSpeedTime) {\n        state.SpeedEventTime = speedEventTime;\n        state.CumulativeSpeedRevolutionCount = speedRevolutionCount;\n\n        if (oldSpeedTime > speedEventTime) {\n            // Hit rollover value\n            speedEventTime += 1024 * 64;\n        }\n\n        if (oldSpeedCount > speedRevolutionCount) {\n            // Hit rollover value\n            speedRevolutionCount += 1024 * 64;\n        }\n\n        const distance = sensor.wheelCircumference * (speedRevolutionCount - oldSpeedCount);\n        state.CalculatedDistance = distance;\n\n        // Calculate speed in m/sec\n        const speed = (distance * 1024) / (speedEventTime - oldSpeedTime);\n        if (!isNaN(speed)) {\n            state.CalculatedSpeed = speed;\n            sensor.emit(\"speedData\", state);\n        }\n    }\n}\n","/**\n * Represents the state of a Speed and Cadence sensor.\n * This class holds the data fields associated with the state of a Speed and Cadence sensor, including\n * cadence, speed, distance, and event times.\n */\nexport class SpeedCadenceSensorState {\n    /**\n     * Creates an instance of the SpeedCadenceSensorState.\n     *\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @example\n     * const sensorState = new SpeedCadenceSensorState(12345);\n     */\n    constructor(deviceId: number) {\n        this.DeviceId = deviceId;\n    }\n\n    /**\n     * The unique identifier of the sensor device.\n     * @type {number}\n     */\n    DeviceId: number;\n\n    /**\n     * The time of the last cadence event in seconds, measured as a fractional part.\n     * @type {number | undefined}\n     */\n    CadenceEventTime: number | undefined;\n\n    /**\n     * The cumulative count of cadence revolutions since the sensor started.\n     * @type {number | undefined}\n     */\n    CumulativeCadenceRevolutionCount: number | undefined;\n\n    /**\n     * The time of the last speed event in seconds, measured as a fractional part.\n     * @type {number | undefined}\n     */\n    SpeedEventTime: number | undefined;\n\n    /**\n     * The cumulative count of speed revolutions since the sensor started.\n     * @type {number | undefined}\n     */\n    CumulativeSpeedRevolutionCount: number | undefined;\n\n    /**\n     * The calculated cadence in revolutions per minute (RPM).\n     * @type {number | undefined}\n     */\n    CalculatedCadence: number | undefined;\n\n    /**\n     * The calculated distance traveled in meters.\n     * @type {number | undefined}\n     */\n    CalculatedDistance: number | undefined;\n\n    /**\n     * The calculated speed in meters per second (m/s).\n     * @type {number | undefined}\n     */\n    CalculatedSpeed: number | undefined;\n}\n","import { SpeedCadenceSensorState } from \"./speedCadenceSensorState.js\";\n\n/**\n * Represents the state of a Speed and Cadence sensor during scanning.\n * Extends the SpeedCadenceSensorState to include additional fields specific to scanning,\n * such as RSSI (Received Signal Strength Indicator) and signal threshold.\n */\nexport class SpeedCadenceScanState extends SpeedCadenceSensorState {\n    /**\n     * The received signal strength indicator (RSSI) of the sensor signal.\n     * @type {number | undefined}\n     */\n    Rssi: number | undefined;\n\n    /**\n     * The signal threshold value.\n     * @type {number | undefined}\n     */\n    Threshold: number | undefined;\n}\n","/*\n * ANT+ profile: https://www.thisisant.com/developer/ant-plus/device-profiles/#523_tab\n * Spec sheet: https://www.thisisant.com/resources/bicycle-speed-and-cadence/\n */\n\nimport { AntPlusSensor } from \"../antPlusSensor.js\";\nimport { updateState } from \"./speedCadenceUtils.js\";\nimport { SpeedCadenceSensorState } from \"./speedCadenceSensorState.js\";\n\n/**\n * Represents a Bicycle Speed and Cadence sensor.\n * This class extends the AntPlusSensor class to handle specific data related to speed and cadence.\n */\nexport class SpeedCadenceSensor extends AntPlusSensor {\n    /**\n     * The device type code for Bicycle Speed and Cadence sensors.\n     * @type {number}\n     * @readonly\n     */\n    static deviceType: number = 0x79;\n\n    /**\n     * The wheel circumference in meters, used to calculate speed.\n     * @type {number}\n     * @default 2.199\n     */\n    wheelCircumference: number = 2.199; // default 70cm wheel\n\n    /**\n     * Sets the wheel circumference for speed calculation.\n     *\n     * @public\n     * @param {number} wheelCircumference - The wheel circumference in meters.\n     * @returns {void}\n     *\n     * @example\n     * const sensor = new SpeedCadenceSensor();\n     * sensor.setWheelCircumference(2.105); // Sets the wheel circumference to 2.105 meters\n     */\n    public setWheelCircumference(wheelCircumference: number) {\n        this.wheelCircumference = wheelCircumference;\n    }\n\n    /**\n     * Attaches the sensor to a specified ANT+ channel and initializes its state.\n     *\n     * @public\n     * @param {number} channel - The ANT+ channel number used for communication with the sensor.\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @returns {void}\n     *\n     * @example\n     * const sensor = new SpeedCadenceSensor();\n     * sensor.attach(1, 12345); // Attaches to channel 1 with device ID 12345\n     */\n    public attach(channel: number, deviceId: number) {\n        super.attachSensor(channel, \"receive\", deviceId, SpeedCadenceSensor.deviceType, 0, 255, 8086);\n        this.state = new SpeedCadenceSensorState(deviceId);\n    }\n\n    /**\n     * The current state of the Bicycle Speed and Cadence sensor.\n     * @private\n     * @type {SpeedCadenceSensorState}\n     */\n    private state!: SpeedCadenceSensorState;\n\n    /**\n     * Updates the state of the sensor based on incoming data.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {Buffer} data - The raw data buffer received from the sensor.\n     * @returns {void}\n     *\n     * @example\n     * const dataBuffer = getDataFromSensor(); // assume this function gets data from a sensor\n     * sensor.updateState(12345, dataBuffer);\n     */\n    protected updateState(deviceId: number, data: Buffer) {\n        this.state.DeviceId = deviceId;\n        updateState(this, this.state, data);\n    }\n}\n","import { AntPlusScanner } from \"../antPlusScanner.js\";\nimport { updateState } from \"./speedCadenceUtils.js\";\nimport { SpeedCadenceScanState } from \"./speedCadenceScanState.js\";\nimport { SpeedCadenceSensor } from \"./speedCadenceSensor.js\";\n\n/**\n * Represents a scanner for Speed and Cadence sensors.\n * Extends the AntPlusScanner class to handle scanning and state updates for multiple Speed and Cadence sensors.\n */\nexport class SpeedCadenceScanner extends AntPlusScanner {\n    /**\n     * Returns the device type code for Speed and Cadence sensors.\n     *\n     * @protected\n     * @returns {number} The device type code for Speed and Cadence sensors.\n     */\n    protected deviceType(): number {\n        return SpeedCadenceSensor.deviceType;\n    }\n\n    /**\n     * The wheel circumference in meters, used to calculate speed.\n     * @type {number}\n     * @default 2.199\n     */\n    wheelCircumference: number = 2.199; // default 70cm wheel\n\n    /**\n     * Sets the wheel circumference for speed calculation.\n     *\n     * @public\n     * @param {number} wheelCircumference - The wheel circumference in meters.\n     * @returns {void}\n     *\n     * @example\n     * const scanner = new SpeedCadenceScanner();\n     * scanner.setWheelCircumference(2.105); // Sets the wheel circumference to 2.105 meters\n     */\n    public setWheelCircumference(wheelCircumference: number): void {\n        this.wheelCircumference = wheelCircumference;\n    }\n\n    /**\n     * A dictionary to store the states of detected Speed and Cadence sensors by their device ID.\n     * @private\n     * @type {{ [id: number]: SpeedCadenceScanState }}\n     */\n    private states: { [id: number]: SpeedCadenceScanState } = {};\n\n    /**\n     * Creates a new state entry for a sensor if it does not already exist.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @returns {void}\n     *\n     * @example\n     * scanner.createStateIfNew(12345); // Creates a new state for device ID 12345 if it does not exist.\n     */\n    protected createStateIfNew(deviceId: number): void {\n        if (!this.states[deviceId]) {\n            this.states[deviceId] = new SpeedCadenceScanState(deviceId);\n        }\n    }\n\n    /**\n     * Updates the RSSI (Received Signal Strength Indicator) and signal threshold for a specific sensor.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {number} rssi - The received signal strength indicator of the device.\n     * @param {number} threshold - The signal threshold value for the device.\n     * @returns {void}\n     *\n     * @example\n     * scanner.updateRssiAndThreshold(12345, -70, 30); // Updates the RSSI and threshold for device ID 12345.\n     */\n    protected updateRssiAndThreshold(deviceId: number, rssi: number, threshold: number): void {\n        this.states[deviceId].Rssi = rssi;\n        this.states[deviceId].Threshold = threshold;\n    }\n\n    /**\n     * Updates the state of a sensor based on incoming data.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {Buffer} data - The raw data buffer received from the sensor.\n     * @returns {void}\n     *\n     * @example\n     * const dataBuffer = getDataFromSensor(); // Assume this function gets data from a sensor\n     * scanner.updateState(12345, dataBuffer); // Updates the state for device ID 12345.\n     */\n    protected updateState(deviceId: number, data: Buffer): void {\n        updateState(this, this.states[deviceId], data);\n    }\n}\n","import { SpeedScanner } from \"./speedScanner.js\";\nimport { SpeedScanState } from \"./speedScanState.js\";\nimport { SpeedSensor } from \"./speedSensor.js\";\nimport { SpeedSensorState } from \"./speedSensorState.js\";\nimport { Messages } from \"../../utils/messages.js\";\n\nconst TOGGLE_MASK = 0x80;\n\n/**\n * Updates the state of a Speed sensor or scanner based on the incoming data.\n * Decodes various pages of data to update the state, including cumulative operating time,\n * manufacturer details, hardware and software versions, battery status, motion status, and speed.\n *\n * @param {SpeedSensor | SpeedScanner} sensor - The sensor or scanner instance emitting the data.\n * @param {SpeedSensorState | SpeedScanState} state - The current state of the sensor or scanner.\n * @param {Buffer} data - The raw data buffer received from the sensor.\n * @returns {void}\n * @example\n * const sensor = new SpeedSensor();\n * const state = new SpeedSensorState(12345);\n * const dataBuffer = getDataFromSensor(); // Assume this function gets data from a sensor\n * updateState(sensor, state, dataBuffer);\n */\nexport function updateState(sensor: SpeedSensor | SpeedScanner, state: SpeedSensorState | SpeedScanState, data: Buffer) {\n    const pageNum = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA);\n    switch (\n        pageNum & ~TOGGLE_MASK // Check the new pages and remove the toggle bit\n    ) {\n        case 1:\n            // Decode the cumulative operating time\n            state.OperatingTime = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 1);\n            state.OperatingTime |= data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 2) << 8;\n            state.OperatingTime |= data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 3) << 16;\n            state.OperatingTime *= 2;\n            break;\n        case 2:\n            // Decode the Manufacturer ID\n            state.ManId = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 1);\n            // Decode the 4-byte serial number\n            state.SerialNumber = state.DeviceId;\n            state.SerialNumber |= data.readUInt16LE(Messages.BUFFER_INDEX_MSG_DATA + 2) << 16;\n            state.SerialNumber >>>= 0;\n            break;\n        case 3:\n            // Decode hardware version, software version, and model number\n            state.HwVersion = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 1);\n            state.SwVersion = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 2);\n            state.ModelNum = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n            break;\n        case 4: {\n            // Decode battery status\n            const batteryFrac = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 2);\n            const batteryStatus = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n            state.BatteryVoltage = (batteryStatus & 0x0f) + batteryFrac / 256;\n            const batteryFlags = (batteryStatus & 0x70) >>> 4;\n            switch (batteryFlags) {\n                case 1:\n                    state.BatteryStatus = \"New\";\n                    break;\n                case 2:\n                    state.BatteryStatus = \"Good\";\n                    break;\n                case 3:\n                    state.BatteryStatus = \"Ok\";\n                    break;\n                case 4:\n                    state.BatteryStatus = \"Low\";\n                    break;\n                case 5:\n                    state.BatteryStatus = \"Critical\";\n                    break;\n                default:\n                    state.BatteryVoltage = undefined;\n                    state.BatteryStatus = \"Invalid\";\n                    break;\n            }\n            break;\n        }\n        case 5:\n            // Decode motion status\n            state.Motion = (data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 1) & 0x01) === 0x01;\n            break;\n        default:\n            break;\n    }\n\n    // Get old state for calculating cumulative values\n    const oldSpeedTime = state.SpeedEventTime ?? 0;\n    const oldSpeedCount = state.CumulativeSpeedRevolutionCount ?? 0;\n\n    let speedEventTime = data.readUInt16LE(Messages.BUFFER_INDEX_MSG_DATA + 4);\n    let speedRevolutionCount = data.readUInt16LE(Messages.BUFFER_INDEX_MSG_DATA + 6);\n\n    if (speedEventTime !== oldSpeedTime) {\n        state.SpeedEventTime = speedEventTime;\n        state.CumulativeSpeedRevolutionCount = speedRevolutionCount;\n\n        if (oldSpeedTime > speedEventTime) {\n            // Hit rollover value\n            speedEventTime += 1024 * 64;\n        }\n\n        if (oldSpeedCount > speedRevolutionCount) {\n            // Hit rollover value\n            speedRevolutionCount += 1024 * 64;\n        }\n\n        const distance = sensor.wheelCircumference * (speedRevolutionCount - oldSpeedCount);\n        state.CalculatedDistance = distance;\n\n        // Calculate speed in m/sec\n        const speed = (distance * 1024) / (speedEventTime - oldSpeedTime);\n        if (!isNaN(speed)) {\n            state.CalculatedSpeed = speed;\n            sensor.emit(\"speedData\", state);\n        }\n    }\n}\n","/**\n * Represents the state of a Speed sensor.\n * This class holds the data fields associated with the state of a Speed sensor, including\n * speed, distance, event times, and various sensor-specific details.\n */\nexport class SpeedSensorState {\n    /**\n     * Creates an instance of the SpeedSensorState.\n     *\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @example\n     * const sensorState = new SpeedSensorState(12345);\n     */\n    constructor(deviceId: number) {\n        this.DeviceId = deviceId;\n    }\n\n    /**\n     * The unique identifier of the sensor device.\n     * @type {number}\n     */\n    DeviceId: number;\n\n    /**\n     * The time of the last speed event in seconds, measured as a fractional part.\n     * @type {number | undefined}\n     */\n    SpeedEventTime: number | undefined;\n\n    /**\n     * The cumulative count of speed revolutions since the sensor started.\n     * @type {number | undefined}\n     */\n    CumulativeSpeedRevolutionCount: number | undefined;\n\n    /**\n     * The calculated distance traveled in meters.\n     * @type {number | undefined}\n     */\n    CalculatedDistance: number | undefined;\n\n    /**\n     * The calculated speed in meters per second (m/s).\n     * @type {number | undefined}\n     */\n    CalculatedSpeed: number | undefined;\n\n    /**\n     * The cumulative operating time of the sensor in seconds.\n     * @type {number | undefined}\n     */\n    OperatingTime?: number;\n\n    /**\n     * The manufacturer ID of the sensor.\n     * @type {number | undefined}\n     */\n    ManId?: number;\n\n    /**\n     * The serial number of the sensor.\n     * @type {number | undefined}\n     */\n    SerialNumber?: number;\n\n    /**\n     * The hardware version of the sensor.\n     * @type {number | undefined}\n     */\n    HwVersion?: number;\n\n    /**\n     * The software version of the sensor.\n     * @type {number | undefined}\n     */\n    SwVersion?: number;\n\n    /**\n     * The model number of the sensor.\n     * @type {number | undefined}\n     */\n    ModelNum?: number;\n\n    /**\n     * The battery voltage of the sensor.\n     * @type {number | undefined}\n     */\n    BatteryVoltage?: number;\n\n    /**\n     * The battery status of the sensor.\n     * Can be \"New\", \"Good\", \"Ok\", \"Low\", \"Critical\", or \"Invalid\".\n     * @type {\"New\" | \"Good\" | \"Ok\" | \"Low\" | \"Critical\" | \"Invalid\" | undefined}\n     */\n    BatteryStatus?: \"New\" | \"Good\" | \"Ok\" | \"Low\" | \"Critical\" | \"Invalid\";\n\n    /**\n     * Indicates whether the sensor detects motion.\n     * @type {boolean | undefined}\n     */\n    Motion?: boolean;\n}\n","import { SpeedSensorState } from \"./speedSensorState.js\";\n\n/**\n * Represents the state of a Speed sensor during scanning.\n * Extends the SpeedSensorState to include additional fields specific to scanning,\n * such as RSSI (Received Signal Strength Indicator) and signal threshold.\n */\nexport class SpeedScanState extends SpeedSensorState {\n    /**\n     * The received signal strength indicator (RSSI) of the sensor signal.\n     * @type {number | undefined}\n     */\n    Rssi: number | undefined;\n\n    /**\n     * The signal threshold value for the sensor.\n     * @type {number | undefined}\n     */\n    Threshold: number | undefined;\n}\n","/*\n * ANT+ profile: https://www.thisisant.com/developer/ant-plus/device-profiles/#523_tab\n * Spec sheet: https://www.thisisant.com/resources/bicycle-speed-and-cadence/\n */\n\nimport { AntPlusSensor } from \"../antPlusSensor.js\";\nimport { updateState } from \"./speedUtils.js\";\nimport { SpeedSensorState } from \"./speedSensorState.js\";\n\n/**\n * Represents a Bicycle Speed sensor.\n * This class extends the AntPlusSensor class to handle specific data related to speed measurement.\n */\nexport class SpeedSensor extends AntPlusSensor {\n    /**\n     * The device type code for Bicycle Speed sensors.\n     * @type {number}\n     * @readonly\n     */\n    static deviceType: number = 0x7b;\n\n    /**\n     * The wheel circumference in meters, used to calculate speed.\n     * @type {number}\n     * @default 2.199\n     */\n    wheelCircumference: number = 2.199; // default 70cm wheel\n\n    /**\n     * Sets the wheel circumference for speed calculation.\n     *\n     * @public\n     * @param {number} wheelCircumference - The wheel circumference in meters.\n     * @returns {void}\n     *\n     * @example\n     * const sensor = new SpeedSensor();\n     * sensor.setWheelCircumference(2.105); // Sets the wheel circumference to 2.105 meters\n     */\n    public setWheelCircumference(wheelCircumference: number) {\n        this.wheelCircumference = wheelCircumference;\n    }\n\n    /**\n     * Attaches the sensor to a specified ANT+ channel and initializes its state.\n     *\n     * @public\n     * @param {number} channel - The ANT+ channel number used for communication with the sensor.\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @returns {void}\n     *\n     * @example\n     * const sensor = new SpeedSensor();\n     * sensor.attach(1, 12345); // Attaches to channel 1 with device ID 12345\n     */\n    public attach(channel: number, deviceId: number) {\n        super.attachSensor(channel, \"receive\", deviceId, SpeedSensor.deviceType, 0, 255, 8118);\n        this.state = new SpeedSensorState(deviceId);\n    }\n\n    /**\n     * The current state of the Bicycle Speed sensor.\n     * @private\n     * @type {SpeedSensorState}\n     */\n    private state!: SpeedSensorState;\n\n    /**\n     * Updates the state of the sensor based on incoming data.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {Buffer} data - The raw data buffer received from the sensor.\n     * @returns {void}\n     *\n     * @example\n     * const dataBuffer = getDataFromSensor(); // assume this function gets data from a sensor\n     * sensor.updateState(12345, dataBuffer);\n     */\n    protected updateState(deviceId: number, data: Buffer) {\n        this.state.DeviceId = deviceId;\n        updateState(this, this.state, data);\n    }\n}\n","import { AntPlusScanner } from \"../antPlusScanner.js\";\nimport { updateState } from \"./speedUtils.js\";\nimport { SpeedScanState } from \"./speedScanState.js\";\nimport { SpeedSensor } from \"./speedSensor.js\";\n\n/**\n * Represents a scanner for Speed sensors.\n * Extends the AntPlusScanner class to handle scanning and state updates for multiple Speed sensors.\n */\nexport class SpeedScanner extends AntPlusScanner {\n    /**\n     * Returns the device type code for Speed sensors.\n     *\n     * @protected\n     * @returns {number} The device type code for Speed sensors.\n     */\n    protected deviceType(): number {\n        return SpeedSensor.deviceType;\n    }\n\n    /**\n     * The wheel circumference in meters, used to calculate speed.\n     * @type {number}\n     * @default 2.199\n     */\n    wheelCircumference: number = 2.199; // default 70cm wheel\n\n    /**\n     * Sets the wheel circumference for speed calculation.\n     *\n     * @public\n     * @param {number} wheelCircumference - The wheel circumference in meters.\n     * @returns {void}\n     *\n     * @example\n     * const scanner = new SpeedScanner();\n     * scanner.setWheelCircumference(2.105); // Sets the wheel circumference to 2.105 meters\n     */\n    public setWheelCircumference(wheelCircumference: number): void {\n        this.wheelCircumference = wheelCircumference;\n    }\n\n    /**\n     * A dictionary to store the states of detected Speed sensors by their device ID.\n     * @private\n     * @type {{ [id: number]: SpeedScanState }}\n     */\n    private states: { [id: number]: SpeedScanState } = {};\n\n    /**\n     * Creates a new state entry for a sensor if it does not already exist.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @returns {void}\n     *\n     * @example\n     * scanner.createStateIfNew(12345); // Creates a new state for device ID 12345 if it does not exist.\n     */\n    protected createStateIfNew(deviceId: number): void {\n        if (!this.states[deviceId]) {\n            this.states[deviceId] = new SpeedScanState(deviceId);\n        }\n    }\n\n    /**\n     * Updates the RSSI (Received Signal Strength Indicator) and signal threshold for a specific sensor.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {number} rssi - The received signal strength indicator of the device.\n     * @param {number} threshold - The signal threshold value for the device.\n     * @returns {void}\n     *\n     * @example\n     * scanner.updateRssiAndThreshold(12345, -70, 30); // Updates the RSSI and threshold for device ID 12345.\n     */\n    protected updateRssiAndThreshold(deviceId: number, rssi: number, threshold: number): void {\n        this.states[deviceId].Rssi = rssi;\n        this.states[deviceId].Threshold = threshold;\n    }\n\n    /**\n     * Updates the state of a sensor based on incoming data.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {Buffer} data - The raw data buffer received from the sensor.\n     * @returns {void}\n     *\n     * @example\n     * const dataBuffer = getDataFromSensor(); // Assume this function gets data from a sensor\n     * scanner.updateState(12345, dataBuffer); // Updates the state for device ID 12345.\n     */\n    protected updateState(deviceId: number, data: Buffer): void {\n        updateState(this, this.states[deviceId], data);\n    }\n}\n","import { CadenceScanner } from \"./cadenceScanner.js\";\nimport { CadenceScanState } from \"./cadenceScanState.js\";\nimport { CadenceSensor } from \"./cadenceSensor.js\";\nimport { CadenceSensorState } from \"./cadenceSensorState.js\";\nimport { Messages } from \"../../utils/messages.js\";\n\nconst TOGGLE_MASK = 0x80;\n\n/**\n * Updates the state of a Cadence sensor or scanner based on incoming data.\n * Decodes the data buffer and updates the sensor state accordingly, including\n * cumulative values such as operating time, manufacturer details, battery status,\n * and calculated cadence.\n *\n * @param {CadenceSensor | CadenceScanner} sensor - The sensor or scanner instance emitting the data.\n * @param {CadenceSensorState | CadenceScanState} state - The current state of the sensor or scanner.\n * @param {Buffer} data - The raw data buffer received from the sensor.\n * @returns {void}\n *\n * @example\n * const sensor = new CadenceSensor();\n * const state = new CadenceSensorState(12345);\n * const dataBuffer = getDataFromSensor(); // Assume this function gets data from a sensor\n * updateState(sensor, state, dataBuffer); // Updates the state based on the received data.\n */\nexport function updateState(sensor: CadenceSensor | CadenceScanner, state: CadenceSensorState | CadenceScanState, data: Buffer): void {\n    const pageNum = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA);\n    switch (\n        pageNum & ~TOGGLE_MASK // Check the new pages and remove the toggle bit\n    ) {\n        case 1:\n            // Decode the cumulative operating time\n            state.OperatingTime = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 1);\n            state.OperatingTime |= data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 2) << 8;\n            state.OperatingTime |= data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 3) << 16;\n            state.OperatingTime *= 2;\n            break;\n        case 2:\n            // Decode the Manufacturer ID\n            state.ManId = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 1);\n            // Decode the 4-byte serial number\n            state.SerialNumber = state.DeviceId;\n            state.SerialNumber |= data.readUInt16LE(Messages.BUFFER_INDEX_MSG_DATA + 2) << 16;\n            state.SerialNumber >>>= 0;\n            break;\n        case 3:\n            // Decode HW version, SW version, and model number\n            state.HwVersion = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 1);\n            state.SwVersion = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 2);\n            state.ModelNum = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n            break;\n        case 4: {\n            const batteryFrac = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 2);\n            const batteryStatus = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n            state.BatteryVoltage = (batteryStatus & 0x0f) + batteryFrac / 256;\n            const batteryFlags = (batteryStatus & 0x70) >>> 4;\n            switch (batteryFlags) {\n                case 1:\n                    state.BatteryStatus = \"New\";\n                    break;\n                case 2:\n                    state.BatteryStatus = \"Good\";\n                    break;\n                case 3:\n                    state.BatteryStatus = \"Ok\";\n                    break;\n                case 4:\n                    state.BatteryStatus = \"Low\";\n                    break;\n                case 5:\n                    state.BatteryStatus = \"Critical\";\n                    break;\n                default:\n                    state.BatteryVoltage = undefined;\n                    state.BatteryStatus = \"Invalid\";\n                    break;\n            }\n            break;\n        }\n        case 5:\n            state.Motion = (data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 1) & 0x01) === 0x01;\n            break;\n        default:\n            break;\n    }\n\n    // Get old state for calculating cumulative values\n    const oldCadenceTime = state.CadenceEventTime ?? 0;\n    const oldCadenceCount = state.CumulativeCadenceRevolutionCount ?? 0;\n\n    let cadenceTime = data.readUInt16LE(Messages.BUFFER_INDEX_MSG_DATA + 4);\n    let cadenceCount = data.readUInt16LE(Messages.BUFFER_INDEX_MSG_DATA + 6);\n\n    if (cadenceTime !== oldCadenceTime) {\n        state.CadenceEventTime = cadenceTime;\n        state.CumulativeCadenceRevolutionCount = cadenceCount;\n\n        if (oldCadenceTime > cadenceTime) {\n            // Hit rollover value\n            cadenceTime += 1024 * 64;\n        }\n\n        if (oldCadenceCount > cadenceCount) {\n            // Hit rollover value\n            cadenceCount += 1024 * 64;\n        }\n\n        const cadence = (60 * (cadenceCount - oldCadenceCount) * 1024) / (cadenceTime - oldCadenceTime);\n        if (!isNaN(cadence)) {\n            state.CalculatedCadence = cadence;\n            sensor.emit(\"cadenceData\", state);\n        }\n    }\n}\n","/**\n * Represents the state of a Cadence Sensor.\n * This class holds the data fields associated with the state of a cadence sensor,\n * including event times, revolution counts, and device information.\n */\nexport class CadenceSensorState {\n    /**\n     * Creates an instance of the CadenceSensorState.\n     *\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     *\n     * @example\n     * const sensorState = new CadenceSensorState(12345);\n     */\n    constructor(deviceId: number) {\n        this.DeviceId = deviceId;\n    }\n\n    /**\n     * The unique identifier of the sensor device.\n     * @type {number}\n     */\n    DeviceId: number;\n\n    /**\n     * The time of the last cadence event, in seconds.\n     * @type {number | undefined}\n     */\n    CadenceEventTime: number | undefined;\n\n    /**\n     * The cumulative number of cadence revolutions counted by the sensor.\n     * @type {number | undefined}\n     */\n    CumulativeCadenceRevolutionCount: number | undefined;\n\n    /**\n     * The calculated cadence in revolutions per minute (RPM).\n     * @type {number | undefined}\n     */\n    CalculatedCadence: number | undefined;\n\n    /**\n     * The cumulative operating time of the sensor in seconds.\n     * @type {number | undefined}\n     */\n    OperatingTime?: number;\n\n    /**\n     * The manufacturer ID of the sensor.\n     * @type {number | undefined}\n     */\n    ManId?: number;\n\n    /**\n     * The serial number of the sensor.\n     * @type {number | undefined}\n     */\n    SerialNumber?: number;\n\n    /**\n     * The hardware version of the sensor.\n     * @type {number | undefined}\n     */\n    HwVersion?: number;\n\n    /**\n     * The software version of the sensor.\n     * @type {number | undefined}\n     */\n    SwVersion?: number;\n\n    /**\n     * The model number of the sensor.\n     * @type {number | undefined}\n     */\n    ModelNum?: number;\n\n    /**\n     * The battery voltage of the sensor.\n     * @type {number | undefined}\n     */\n    BatteryVoltage?: number;\n\n    /**\n     * The battery status of the sensor.\n     * Can be one of the following: \"New\", \"Good\", \"Ok\", \"Low\", \"Critical\", \"Invalid\".\n     * @type {\"New\" | \"Good\" | \"Ok\" | \"Low\" | \"Critical\" | \"Invalid\" | undefined}\n     */\n    BatteryStatus?: \"New\" | \"Good\" | \"Ok\" | \"Low\" | \"Critical\" | \"Invalid\";\n\n    /**\n     * Indicates whether the sensor is in motion.\n     * @type {boolean | undefined}\n     */\n    Motion?: boolean;\n}\n","import { CadenceSensorState } from \"./cadenceSensorState.js\";\n\n/**\n * Represents the state of a Cadence Sensor during scanning.\n * Extends the CadenceSensorState to include additional fields specific to scanning,\n * such as RSSI (Received Signal Strength Indicator) and signal threshold.\n */\nexport class CadenceScanState extends CadenceSensorState {\n    /**\n     * The received signal strength indicator (RSSI) of the sensor signal.\n     * Indicates the strength of the received signal from the cadence sensor.\n     * @type {number | undefined}\n     */\n    Rssi: number | undefined;\n\n    /**\n     * The signal threshold value for the sensor.\n     * Represents the minimum signal strength required for a reliable connection.\n     * @type {number | undefined}\n     */\n    Threshold: number | undefined;\n}\n","/*\n * ANT+ profile: https://www.thisisant.com/developer/ant-plus/device-profiles/#523_tab\n * Spec sheet: https://www.thisisant.com/resources/bicycle-speed-and-cadence/\n */\n\nimport { updateState } from \"./cadenceUtils.js\";\nimport { CadenceSensorState } from \"./cadenceSensorState.js\";\nimport { AntPlusSensor } from \"../antPlusSensor.js\";\n\n/**\n * Represents a Bicycle Cadence sensor.\n * This class extends the AntPlusSensor class to handle specific data related to cadence measurement.\n */\nexport class CadenceSensor extends AntPlusSensor {\n    /**\n     * The device type code for Bicycle Cadence sensors.\n     * @type {number}\n     * @readonly\n     */\n    static deviceType: number = 0x7a;\n\n    /**\n     * The wheel circumference in meters, used to calculate speed.\n     * @type {number}\n     * @default 2.199\n     */\n    wheelCircumference: number = 2.199; // default 70cm wheel\n\n    /**\n     * The current state of the Bicycle Cadence sensor.\n     * @private\n     * @type {CadenceSensorState}\n     */\n    private state!: CadenceSensorState;\n\n    /**\n     * Attaches the sensor to a specified ANT+ channel and initializes its state.\n     *\n     * @public\n     * @param {number} channel - The ANT+ channel number used for communication with the sensor.\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @returns {void}\n     *\n     * @example\n     * const sensor = new CadenceSensor();\n     * sensor.attach(1, 12345); // Attaches to channel 1 with device ID 12345\n     */\n    public attach(channel: number, deviceId: number): void {\n        super.attachSensor(channel, \"receive\", deviceId, CadenceSensor.deviceType, 0, 255, 8102);\n        this.state = new CadenceSensorState(deviceId);\n    }\n\n    /**\n     * Sets the wheel circumference for speed calculation.\n     *\n     * @public\n     * @param {number} wheelCircumference - The wheel circumference in meters.\n     * @returns {void}\n     *\n     * @example\n     * const sensor = new CadenceSensor();\n     * sensor.setWheelCircumference(2.105); // Sets the wheel circumference to 2.105 meters\n     */\n    public setWheelCircumference(wheelCircumference: number): void {\n        this.wheelCircumference = wheelCircumference;\n    }\n\n    /**\n     * Updates the state of the sensor based on incoming data.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {Buffer} data - The raw data buffer received from the sensor.\n     * @returns {void}\n     *\n     * @example\n     * const dataBuffer = getDataFromSensor(); // assume this function gets data from a sensor\n     * sensor.updateState(12345, dataBuffer);\n     */\n    protected updateState(deviceId: number, data: Buffer): void {\n        this.state.DeviceId = deviceId;\n        updateState(this, this.state, data);\n    }\n}\n","import { updateState } from \"./cadenceUtils.js\";\nimport { CadenceScanState } from \"./cadenceScanState.js\";\nimport { CadenceSensor } from \"./cadenceSensor.js\";\nimport { AntPlusScanner } from \"../antPlusScanner.js\";\n\n/**\n * Represents a scanner for Cadence sensors.\n * Extends the AntPlusScanner class to handle scanning and state updates for multiple cadence sensors.\n */\nexport class CadenceScanner extends AntPlusScanner {\n    /**\n     * Returns the device type code for Cadence sensors.\n     *\n     * @protected\n     * @returns {number} The device type code for Cadence sensors.\n     */\n    protected deviceType(): number {\n        return CadenceSensor.deviceType;\n    }\n\n    /**\n     * The wheel circumference used for cadence calculations, in meters.\n     * Defaults to 2.199 meters (70 cm wheel).\n     * @type {number}\n     */\n    wheelCircumference: number = 2.199;\n\n    /**\n     * Sets the wheel circumference for cadence calculations.\n     *\n     * @public\n     * @param {number} wheelCircumference - The wheel circumference in meters.\n     * @returns {void}\n     *\n     * @example\n     * scanner.setWheelCircumference(2.105); // Sets the wheel circumference to 2.105 meters\n     */\n    public setWheelCircumference(wheelCircumference: number): void {\n        this.wheelCircumference = wheelCircumference;\n    }\n\n    /**\n     * A dictionary to store the states of detected Cadence sensors by their device ID.\n     * @private\n     * @type {{ [id: number]: CadenceScanState }}\n     */\n    private states: { [id: number]: CadenceScanState } = {};\n\n    /**\n     * Creates a new state entry for a sensor if it does not already exist.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @returns {void}\n     *\n     * @example\n     * scanner.createStateIfNew(12345); // Creates a new state for device ID 12345 if it does not exist.\n     */\n    protected createStateIfNew(deviceId: number): void {\n        if (!this.states[deviceId]) {\n            this.states[deviceId] = new CadenceScanState(deviceId);\n        }\n    }\n\n    /**\n     * Updates the RSSI (Received Signal Strength Indicator) and signal threshold for a specific sensor.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {number} rssi - The received signal strength indicator of the device.\n     * @param {number} threshold - The signal threshold value for the device.\n     * @returns {void}\n     *\n     * @example\n     * scanner.updateRssiAndThreshold(12345, -70, 30); // Updates the RSSI and threshold for device ID 12345.\n     */\n    protected updateRssiAndThreshold(deviceId: number, rssi: number, threshold: number): void {\n        this.states[deviceId].Rssi = rssi;\n        this.states[deviceId].Threshold = threshold;\n    }\n\n    /**\n     * Updates the state of a sensor based on incoming data.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {Buffer} data - The raw data buffer received from the sensor.\n     * @returns {void}\n     *\n     * @example\n     * const dataBuffer = getDataFromSensor(); // Assume this function gets data from a sensor\n     * scanner.updateState(12345, dataBuffer); // Updates the state for device ID 12345.\n     */\n    protected updateState(deviceId: number, data: Buffer): void {\n        updateState(this, this.states[deviceId], data);\n    }\n}\n","import { BicyclePowerScanner } from \"./bicyclePowerScanner.js\";\nimport { BicyclePowerScanState } from \"./bicyclePowerScanState.js\";\nimport { BicyclePowerSensor } from \"./bicyclePowerSensor.js\";\nimport { BicyclePowerSensorState } from \"./bicyclePowerSensorState.js\";\nimport { Messages } from \"../../utils/messages.js\";\n\n/**\n * Updates the state of a Bicycle Power sensor or scanner based on incoming data.\n * Processes various types of data pages to update the sensor state, including calibration data,\n * pedal power, cadence, and torque calculations.\n *\n * @param {BicyclePowerSensor | BicyclePowerScanner} sensor - The sensor or scanner to update.\n * @param {BicyclePowerSensorState | BicyclePowerScanState} state - The state object representing the current state of the sensor.\n * @param {Buffer} data - The raw data buffer received from the sensor.\n * @returns {void}\n *\n * @example\n * const sensor = new BicyclePowerSensor();\n * const state = new BicyclePowerSensorState(12345);\n * const dataBuffer = getDataFromSensor(); // Assume this function gets data from a sensor\n * updateState(sensor, state, dataBuffer);\n */\nexport function updateState(sensor: BicyclePowerSensor | BicyclePowerScanner, state: BicyclePowerSensorState | BicyclePowerScanState, data: Buffer): void {\n    const page = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA);\n    switch (page) {\n        case 0x01: {\n            const calId = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 1);\n            if (calId === 0x10) {\n                const calParam = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 2);\n                if (calParam === 0x01) {\n                    state.offset = data.readUInt16LE(Messages.BUFFER_INDEX_MSG_DATA + 6);\n                }\n            }\n            break;\n        }\n        case 0x10: {\n            const pedalPower = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 2);\n            if (pedalPower !== 0xff) {\n                if (pedalPower & 0x80) {\n                    state.PedalPower = pedalPower & 0x7f;\n                    state.RightPedalPower = state.PedalPower;\n                    state.LeftPedalPower = 100 - state.RightPedalPower;\n                } else {\n                    state.PedalPower = pedalPower & 0x7f;\n                    state.RightPedalPower = undefined;\n                    state.LeftPedalPower = undefined;\n                }\n            } else {\n                state.PedalPower = undefined;\n                state.RightPedalPower = undefined;\n                state.LeftPedalPower = undefined;\n            }\n            const cadence = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n            if (cadence !== 0xff) {\n                state.Cadence = cadence;\n            } else {\n                state.Cadence = undefined;\n            }\n            state.AccumulatedPower = data.readUInt16LE(Messages.BUFFER_INDEX_MSG_DATA + 4);\n            state.Power = data.readUInt16LE(Messages.BUFFER_INDEX_MSG_DATA + 6);\n            break;\n        }\n        case 0x20: {\n            const oldEventCount = state.EventCount ?? 0;\n            const oldTimeStamp = state.TimeStamp ?? 0;\n            const oldTorqueTicksStamp = state.TorqueTicksStamp ?? 0;\n\n            let eventCount = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 1);\n            const slope = data.readUInt16LE(Messages.BUFFER_INDEX_MSG_DATA + 3);\n            let timeStamp = data.readUInt16LE(Messages.BUFFER_INDEX_MSG_DATA + 5);\n            let torqueTicksStamp = data.readUInt16LE(Messages.BUFFER_INDEX_MSG_DATA + 7);\n\n            if (timeStamp !== oldTimeStamp && eventCount !== oldEventCount) {\n                state.EventCount = eventCount;\n                if (oldEventCount > eventCount) {\n                    // Hit rollover value\n                    eventCount += 255;\n                }\n\n                state.TimeStamp = timeStamp;\n                if (oldTimeStamp > timeStamp) {\n                    // Hit rollover value\n                    timeStamp += 65400;\n                }\n\n                state.Slope = slope;\n                state.TorqueTicksStamp = torqueTicksStamp;\n                if (oldTorqueTicksStamp > torqueTicksStamp) {\n                    // Hit rollover value\n                    torqueTicksStamp += 65535;\n                }\n\n                const elapsedTime = (timeStamp - oldTimeStamp) * 0.0005;\n                const torqueTicks = torqueTicksStamp - oldTorqueTicksStamp;\n\n                const cadencePeriod = elapsedTime / (eventCount - oldEventCount); // seconds\n                const cadence = Math.round(60 / cadencePeriod); // RPM\n                state.CalculatedCadence = cadence;\n\n                const torqueFrequency = 1 / (elapsedTime / torqueTicks) - state.offset; // Hz\n                const torque = torqueFrequency / (slope / 10); // Nm\n                state.CalculatedTorque = torque;\n\n                state.CalculatedPower = (torque * cadence * Math.PI) / 30; // Watts\n            }\n            break;\n        }\n        default:\n            return;\n    }\n    sensor.emit(\"powerData\", state);\n}\n","/**\n * Represents the state of a Bicycle Power sensor.\n * Stores various metrics and calculated values related to bicycle power, such as pedal power, cadence, torque, and power.\n */\nexport class BicyclePowerSensorState {\n    /**\n     * Creates an instance of BicyclePowerSensorState.\n     *\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     */\n    constructor(deviceId: number) {\n        this.DeviceId = deviceId;\n    }\n\n    /**\n     * The unique identifier of the sensor device.\n     * @type {number}\n     */\n    DeviceId: number;\n\n    /**\n     * The total pedal power percentage.\n     * Represents the percentage of power produced by the pedal strokes.\n     * @type {number | undefined}\n     */\n    PedalPower?: number;\n\n    /**\n     * The power percentage from the right pedal.\n     * If available, represents the contribution of the right pedal to the total power.\n     * @type {number | undefined}\n     */\n    RightPedalPower?: number;\n\n    /**\n     * The power percentage from the left pedal.\n     * If available, represents the contribution of the left pedal to the total power.\n     * @type {number | undefined}\n     */\n    LeftPedalPower?: number;\n\n    /**\n     * The cadence value in revolutions per minute (RPM).\n     * Represents the number of pedal revolutions per minute.\n     * @type {number | undefined}\n     */\n    Cadence?: number;\n\n    /**\n     * The accumulated power in watts.\n     * Represents the total power output accumulated over time.\n     * @type {number | undefined}\n     */\n    AccumulatedPower?: number;\n\n    /**\n     * The current power output in watts.\n     * Represents the instantaneous power output of the cyclist.\n     * @type {number | undefined}\n     */\n    Power?: number;\n\n    /**\n     * The offset value used for torque calculations.\n     * @type {number}\n     * @default 0\n     */\n    offset: number = 0;\n\n    /**\n     * The event count value.\n     * Represents the number of events recorded by the sensor.\n     * @type {number | undefined}\n     */\n    EventCount?: number;\n\n    /**\n     * The timestamp of the last recorded event.\n     * Represents the time at which the last event was recorded.\n     * @type {number | undefined}\n     */\n    TimeStamp?: number;\n\n    /**\n     * The slope value used for torque calculations.\n     * Represents the slope or gradient used in the torque computation.\n     * @type {number | undefined}\n     */\n    Slope?: number;\n\n    /**\n     * The timestamp for the last torque tick.\n     * Represents the time at which the last torque measurement was recorded.\n     * @type {number | undefined}\n     */\n    TorqueTicksStamp?: number;\n\n    /**\n     * The calculated cadence in RPM.\n     * Represents the calculated cadence based on sensor data.\n     * @type {number | undefined}\n     */\n    CalculatedCadence?: number;\n\n    /**\n     * The calculated torque in Newton meters (Nm).\n     * Represents the torque calculated from sensor data.\n     * @type {number | undefined}\n     */\n    CalculatedTorque?: number;\n\n    /**\n     * The calculated power in watts.\n     * Represents the power calculated from torque and cadence data.\n     * @type {number | undefined}\n     */\n    CalculatedPower?: number;\n}\n","import { BicyclePowerSensorState } from \"./bicyclePowerSensorState.js\";\n\n/**\n * Represents the scan state of a Bicycle Power sensor.\n * Extends the BicyclePowerSensorState to include additional data related to signal quality during a scan.\n */\nexport class BicyclePowerScanState extends BicyclePowerSensorState {\n    /**\n     * Received Signal Strength Indicator (RSSI).\n     * Represents the strength of the received signal from the sensor.\n     * @type {number | undefined}\n     */\n    Rssi: number | undefined;\n\n    /**\n     * The threshold value for the RSSI.\n     * Represents the minimum acceptable signal strength for communication.\n     * @type {number | undefined}\n     */\n    Threshold: number | undefined;\n}\n","/*\n * ANT+ profile: https://www.thisisant.com/developer/ant-plus/device-profiles/#521_tab\n * Spec sheet: https://www.thisisant.com/resources/bicycle-power/\n */\n\nimport { updateState } from \"./bicyclePowerUtils.js\";\nimport { BicyclePowerSensorState } from \"./bicyclePowerSensorState.js\";\nimport { AntPlusSensor } from \"../antPlusSensor.js\";\n\n/**\n * Represents a Bicycle Power sensor.\n * This class extends the AntPlusSensor class to handle specific data related to bicycle power measurement.\n */\nexport class BicyclePowerSensor extends AntPlusSensor {\n    /**\n     * The device type code for Bicycle Power sensors.\n     * @type {number}\n     * @readonly\n     */\n    static deviceType: number = 0x0b;\n\n    /**\n     * The current state of the Bicycle Power sensor.\n     * @private\n     * @type {BicyclePowerSensorState}\n     */\n    private state!: BicyclePowerSensorState;\n\n    /**\n     * Attaches the sensor to a specified ANT+ channel and initializes its state.\n     *\n     * @public\n     * @param {number} channel - The ANT+ channel number used for communication with the sensor.\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @returns {void}\n     *\n     * @example\n     * const sensor = new BicyclePowerSensor();\n     * sensor.attach(1, 12345); // Attaches to channel 1 with device ID 12345\n     */\n    public attach(channel: number, deviceId: number): void {\n        super.attachSensor(channel, \"receive\", deviceId, BicyclePowerSensor.deviceType, 0, 255, 8182);\n        this.state = new BicyclePowerSensorState(deviceId);\n    }\n\n    /**\n     * Updates the state of the sensor based on incoming data.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {Buffer} data - The raw data buffer received from the sensor.\n     * @returns {void}\n     *\n     * @example\n     * const dataBuffer = getDataFromSensor(); // Assume this function gets data from a sensor\n     * sensor.updateState(12345, dataBuffer);\n     */\n    protected updateState(deviceId: number, data: Buffer): void {\n        this.state.DeviceId = deviceId;\n        updateState(this, this.state, data);\n    }\n}\n","import { updateState } from \"./bicyclePowerUtils.js\";\nimport { BicyclePowerScanState } from \"./bicyclePowerScanState.js\";\nimport { BicyclePowerSensor } from \"./bicyclePowerSensor.js\";\nimport { AntPlusScanner } from \"../antPlusScanner.js\";\n\n/**\n * Represents a scanner for Bicycle Power sensors.\n * Extends the AntPlusScanner class to handle scanning for multiple Bicycle Power sensors.\n */\nexport class BicyclePowerScanner extends AntPlusScanner {\n    /**\n     * Returns the device type for Bicycle Power sensors.\n     *\n     * @protected\n     * @returns {number} The device type identifier for Bicycle Power sensors.\n     */\n    protected deviceType() {\n        return BicyclePowerSensor.deviceType;\n    }\n\n    /**\n     * A collection of states for each detected Bicycle Power sensor, keyed by device ID.\n     * @private\n     * @type {{ [id: number]: BicyclePowerScanState }}\n     */\n    private states: { [id: number]: BicyclePowerScanState } = {};\n\n    /**\n     * Creates a new state entry for a Bicycle Power sensor if it does not already exist.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @returns {void}\n     */\n    protected createStateIfNew(deviceId: number) {\n        if (!this.states[deviceId]) {\n            this.states[deviceId] = new BicyclePowerScanState(deviceId);\n        }\n    }\n\n    /**\n     * Updates the RSSI (Received Signal Strength Indicator) and threshold for a specific Bicycle Power sensor.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {number} rssi - The received signal strength indicator value.\n     * @param {number} threshold - The threshold value for the RSSI.\n     * @returns {void}\n     */\n    protected updateRssiAndThreshold(deviceId: number, rssi: number, threshold: number) {\n        this.states[deviceId].Rssi = rssi;\n        this.states[deviceId].Threshold = threshold;\n    }\n\n    /**\n     * Updates the state of a specific Bicycle Power sensor based on incoming data.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {Buffer} data - The raw data buffer received from the sensor.\n     * @returns {void}\n     *\n     * @example\n     * const dataBuffer = getDataFromSensor(); // assume this function gets data from a sensor\n     * scanner.updateState(12345, dataBuffer);\n     */\n    protected updateState(deviceId: number, data: Buffer) {\n        updateState(this, this.states[deviceId], data);\n    }\n}\n","import { Messages } from \"../../utils/messages.js\";\nimport { FitnessEquipmentSensorState } from \"./fitnessEquipmentSensorState.js\";\nimport { FitnessEquipmentScanState } from \"./fitnessEquipmentScanState.js\";\nimport { FitnessEquipmentSensor } from \"./fitnessEquipmentSensor.js\";\nimport { FitnessEquipmentScanner } from \"./fitnessEquipmentScanner.js\";\n\n/**\n * Resets the state of the fitness equipment sensor by deleting all relevant properties.\n *\n * @param {FitnessEquipmentSensorState | FitnessEquipmentScanState} state - The state object of the fitness equipment sensor to reset.\n * @returns {void}\n */\nfunction resetState(state: FitnessEquipmentSensorState | FitnessEquipmentScanState): void {\n    delete state.ElapsedTime;\n    delete state.Distance;\n    delete state.RealSpeed;\n    delete state.VirtualSpeed;\n    delete state.HeartRate;\n    delete state.HeartRateSource;\n    delete state.CycleLength;\n    delete state.Incline;\n    delete state.Resistance;\n    delete state.METs;\n    delete state.CaloricBurnRate;\n    delete state.Calories;\n    delete state._EventCount0x19;\n    delete state._EventCount0x1A;\n    delete state.Cadence;\n    delete state.AccumulatedPower;\n    delete state.InstantaneousPower;\n    delete state.AveragePower;\n    delete state.TrainerStatus;\n    delete state.TargetStatus;\n    delete state.AscendedDistance;\n    delete state.DescendedDistance;\n    delete state.Strides;\n    delete state.Strokes;\n    delete state.WheelTicks;\n    delete state.WheelPeriod;\n    delete state.Torque;\n}\n\n/**\n * Updates the state of the fitness equipment sensor or scanner based on the received data.\n *\n * @param {FitnessEquipmentSensor | FitnessEquipmentScanner} sensor - The sensor or scanner instance to update.\n * @param {FitnessEquipmentSensorState | FitnessEquipmentScanState} state - The current state of the sensor or scanner.\n * @param {Buffer} data - The raw data buffer received from the fitness equipment.\n * @returns {void}\n *\n * @example\n * updateState(sensor, state, data);\n */\nexport function updateState(sensor: FitnessEquipmentSensor | FitnessEquipmentScanner, state: FitnessEquipmentSensorState | FitnessEquipmentScanState, data: Buffer): void {\n    const page = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA);\n    switch (page) {\n        case 0x01: {\n            const temperature = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n            if (temperature !== 0xff) {\n                state.Temperature = -25 + temperature * 0.5;\n            }\n            const calBF = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 1);\n            if (calBF & 0x40) {\n                state.ZeroOffset = data.readUInt16LE(Messages.BUFFER_INDEX_MSG_DATA + 4);\n            }\n            if (calBF & 0x80) {\n                state.SpinDownTime = data.readUInt16LE(Messages.BUFFER_INDEX_MSG_DATA + 6);\n            }\n            break;\n        }\n        case 0x10: {\n            const equipmentTypeBF = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 1);\n            switch (equipmentTypeBF & 0x1f) {\n                case 19:\n                    state.EquipmentType = \"Treadmill\";\n                    break;\n                case 20:\n                    state.EquipmentType = \"Elliptical\";\n                    break;\n                case 21:\n                    state.EquipmentType = \"Reserved\";\n                    break;\n                case 22:\n                    state.EquipmentType = \"Rower\";\n                    break;\n                case 23:\n                    state.EquipmentType = \"Climber\";\n                    break;\n                case 24:\n                    state.EquipmentType = \"NordicSkier\";\n                    break;\n                case 25:\n                    state.EquipmentType = \"Trainer/StationaryBike\";\n                    break;\n                default:\n                    state.EquipmentType = \"General\";\n                    break;\n            }\n            let elapsedTime = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 2);\n            let distance = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n            const speed = data.readUInt16LE(Messages.BUFFER_INDEX_MSG_DATA + 4);\n            const heartRate = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 6);\n            const capStateBF = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 7);\n            if (heartRate !== 0xff) {\n                switch (capStateBF & 0x03) {\n                    case 3: {\n                        state.HeartRate = heartRate;\n                        state.HeartRateSource = \"HandContact\";\n                        break;\n                    }\n                    case 2: {\n                        state.HeartRate = heartRate;\n                        state.HeartRateSource = \"EM\";\n                        break;\n                    }\n                    case 1: {\n                        state.HeartRate = heartRate;\n                        state.HeartRateSource = \"ANT+\";\n                        break;\n                    }\n                    default: {\n                        delete state.HeartRate;\n                        delete state.HeartRateSource;\n                        break;\n                    }\n                }\n            }\n\n            elapsedTime /= 4;\n            const oldElapsedTime = (state.ElapsedTime || 0) % 64;\n            if (elapsedTime !== oldElapsedTime) {\n                if (oldElapsedTime > elapsedTime) {\n                    // Hit rollover value\n                    elapsedTime += 64;\n                }\n            }\n            state.ElapsedTime = (state.ElapsedTime || 0) + elapsedTime - oldElapsedTime;\n\n            if (capStateBF & 0x04) {\n                const oldDistance = (state.Distance || 0) % 256;\n                if (distance !== oldDistance) {\n                    if (oldDistance > distance) {\n                        // Hit rollover value\n                        distance += 256;\n                    }\n                }\n                state.Distance = (state.Distance || 0) + distance - oldDistance;\n            } else {\n                delete state.Distance;\n            }\n            if (capStateBF & 0x08) {\n                state.VirtualSpeed = speed / 1000;\n                delete state.RealSpeed;\n            } else {\n                delete state.VirtualSpeed;\n                state.RealSpeed = speed / 1000;\n            }\n            switch ((capStateBF & 0x70) >> 4) {\n                case 1:\n                    state.State = \"OFF\";\n                    break;\n                case 2:\n                    state.State = \"READY\";\n                    resetState(state);\n                    break;\n                case 3:\n                    state.State = \"IN_USE\";\n                    break;\n                case 4:\n                    state.State = \"FINISHED\";\n                    break;\n                default:\n                    delete state.State;\n                    break;\n            }\n            if (capStateBF & 0x80) {\n                // lap\n            }\n            break;\n        }\n        case 0x11: {\n            const cycleLen = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n            const incline = data.readInt16LE(Messages.BUFFER_INDEX_MSG_DATA + 4);\n            const resistance = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 6);\n            const capStateBF = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 7);\n            if (cycleLen !== 0xff) {\n                state.CycleLength = cycleLen / 100;\n            }\n            if (incline >= -10000 && incline <= 10000) {\n                state.Incline = incline / 100;\n            }\n            if (resistance !== 0xff) {\n                state.Resistance = resistance;\n            }\n            switch ((capStateBF & 0x70) >> 4) {\n                case 1:\n                    state.State = \"OFF\";\n                    break;\n                case 2:\n                    state.State = \"READY\";\n                    resetState(state);\n                    break;\n                case 3:\n                    state.State = \"IN_USE\";\n                    break;\n                case 4:\n                    state.State = \"FINISHED\";\n                    break;\n                default:\n                    delete state.State;\n                    break;\n            }\n            if (capStateBF & 0x80) {\n                // lap\n            }\n            break;\n        }\n        case 0x12: {\n            const mets = data.readUInt16LE(Messages.BUFFER_INDEX_MSG_DATA + 2);\n            const caloricbr = data.readUInt16LE(Messages.BUFFER_INDEX_MSG_DATA + 4);\n            const calories = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 6);\n            const capStateBF = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 7);\n            if (mets !== 0xffff) {\n                state.METs = mets / 100;\n            }\n            if (caloricbr !== 0xffff) {\n                state.CaloricBurnRate = caloricbr / 10;\n            }\n            if (capStateBF & 0x01) {\n                state.Calories = calories;\n            }\n            switch ((capStateBF & 0x70) >> 4) {\n                case 1:\n                    state.State = \"OFF\";\n                    break;\n                case 2:\n                    state.State = \"READY\";\n                    resetState(state);\n                    break;\n                case 3:\n                    state.State = \"IN_USE\";\n                    break;\n                case 4:\n                    state.State = \"FINISHED\";\n                    break;\n                default:\n                    delete state.State;\n                    break;\n            }\n            if (capStateBF & 0x80) {\n                // lap\n            }\n            break;\n        }\n        case 0x13: {\n            const cadence = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 4);\n            let negDistance = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 5);\n            let posDistance = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 6);\n            const flagStateBF = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 7);\n\n            if (cadence !== 0xff) {\n                state.Cadence = cadence;\n            }\n\n            if (flagStateBF & 0x02) {\n                const oldNegDistance = (state.DescendedDistance || 0) % 256;\n                if (negDistance !== oldNegDistance) {\n                    if (oldNegDistance > negDistance) {\n                        negDistance += 256;\n                    }\n                }\n                state.DescendedDistance = (state.DescendedDistance || 0) + negDistance - oldNegDistance;\n            }\n\n            if (flagStateBF & 0x01) {\n                const oldPosDistance = (state.AscendedDistance || 0) % 256;\n                if (posDistance !== oldPosDistance) {\n                    if (oldPosDistance > posDistance) {\n                        posDistance += 256;\n                    }\n                }\n                state.AscendedDistance = (state.AscendedDistance || 0) + posDistance - oldPosDistance;\n            }\n\n            switch ((flagStateBF & 0x70) >> 4) {\n                case 1:\n                    state.State = \"OFF\";\n                    break;\n                case 2:\n                    state.State = \"READY\";\n                    resetState(state);\n                    break;\n                case 3:\n                    state.State = \"IN_USE\";\n                    break;\n                case 4:\n                    state.State = \"FINISHED\";\n                    break;\n                default:\n                    delete state.State;\n                    break;\n            }\n            if (flagStateBF & 0x80) {\n                // lap\n            }\n\n            break;\n        }\n        case 0x14: {\n            let posDistance = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 2);\n            let strides = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n            const cadence = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 4);\n            const power = data.readUInt16LE(Messages.BUFFER_INDEX_MSG_DATA + 5);\n            const flagStateBF = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 7);\n\n            if (cadence !== 0xff) {\n                state.Cadence = cadence;\n            }\n\n            if (power !== 0xffff) {\n                state.InstantaneousPower = power;\n            }\n\n            if (flagStateBF & 0x02) {\n                const oldPosDistance = (state.AscendedDistance || 0) % 256;\n                if (posDistance !== oldPosDistance) {\n                    if (oldPosDistance > posDistance) {\n                        posDistance += 256;\n                    }\n                }\n                state.AscendedDistance = (state.AscendedDistance || 0) + posDistance - oldPosDistance;\n            }\n\n            if (flagStateBF & 0x01) {\n                const oldStrides = (state.Strides || 0) % 256;\n                if (strides !== oldStrides) {\n                    if (oldStrides > strides) {\n                        strides += 256;\n                    }\n                }\n                state.Strides = (state.Strides || 0) + strides - oldStrides;\n            }\n\n            switch ((flagStateBF & 0x70) >> 4) {\n                case 1:\n                    state.State = \"OFF\";\n                    break;\n                case 2:\n                    state.State = \"READY\";\n                    resetState(state);\n                    break;\n                case 3:\n                    state.State = \"IN_USE\";\n                    break;\n                case 4:\n                    state.State = \"FINISHED\";\n                    break;\n                default:\n                    delete state.State;\n                    break;\n            }\n            if (flagStateBF & 0x80) {\n                // lap\n            }\n\n            break;\n        }\n        case 0x16: {\n            let strokes = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n            const cadence = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 4);\n            const power = data.readUInt16LE(Messages.BUFFER_INDEX_MSG_DATA + 5);\n            const flagStateBF = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 7);\n\n            if (cadence !== 0xff) {\n                state.Cadence = cadence;\n            }\n\n            if (power !== 0xffff) {\n                state.InstantaneousPower = power;\n            }\n\n            if (flagStateBF & 0x01) {\n                const oldStrokes = (state.Strokes || 0) % 256;\n                if (strokes !== oldStrokes) {\n                    if (oldStrokes > strokes) {\n                        strokes += 256;\n                    }\n                }\n                state.Strokes = (state.Strokes || 0) + strokes - oldStrokes;\n            }\n\n            switch ((flagStateBF & 0x70) >> 4) {\n                case 1:\n                    state.State = \"OFF\";\n                    break;\n                case 2:\n                    state.State = \"READY\";\n                    resetState(state);\n                    break;\n                case 3:\n                    state.State = \"IN_USE\";\n                    break;\n                case 4:\n                    state.State = \"FINISHED\";\n                    break;\n                default:\n                    delete state.State;\n                    break;\n            }\n            if (flagStateBF & 0x80) {\n                // lap\n            }\n\n            break;\n        }\n        case 0x17: {\n            let strides = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n            const cadence = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 4);\n            const power = data.readUInt16LE(Messages.BUFFER_INDEX_MSG_DATA + 5);\n            const flagStateBF = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 7);\n\n            if (cadence !== 0xff) {\n                state.Cadence = cadence;\n            }\n\n            if (power !== 0xffff) {\n                state.InstantaneousPower = power;\n            }\n\n            if (flagStateBF & 0x01) {\n                const oldStrides = (state.Strides || 0) % 256;\n                if (strides !== oldStrides) {\n                    if (oldStrides > strides) {\n                        strides += 256;\n                    }\n                }\n                state.Strides = (state.Strides || 0) + strides - oldStrides;\n            }\n\n            switch ((flagStateBF & 0x70) >> 4) {\n                case 1:\n                    state.State = \"OFF\";\n                    break;\n                case 2:\n                    state.State = \"READY\";\n                    resetState(state);\n                    break;\n                case 3:\n                    state.State = \"IN_USE\";\n                    break;\n                case 4:\n                    state.State = \"FINISHED\";\n                    break;\n                default:\n                    delete state.State;\n                    break;\n            }\n            if (flagStateBF & 0x80) {\n                // lap\n            }\n\n            break;\n        }\n        case 0x18: {\n            let strides = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n            const cadence = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 4);\n            const power = data.readUInt16LE(Messages.BUFFER_INDEX_MSG_DATA + 5);\n            const flagStateBF = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 7);\n\n            if (cadence !== 0xff) {\n                state.Cadence = cadence;\n            }\n\n            if (power !== 0xffff) {\n                state.InstantaneousPower = power;\n            }\n\n            if (flagStateBF & 0x01) {\n                const oldStrides = (state.Strides || 0) % 256;\n                if (strides !== oldStrides) {\n                    if (oldStrides > strides) {\n                        strides += 256;\n                    }\n                }\n                state.Strides = (state.Strides || 0) + strides - oldStrides;\n            }\n\n            switch ((flagStateBF & 0x70) >> 4) {\n                case 1:\n                    state.State = \"OFF\";\n                    break;\n                case 2:\n                    state.State = \"READY\";\n                    resetState(state);\n                    break;\n                case 3:\n                    state.State = \"IN_USE\";\n                    break;\n                case 4:\n                    state.State = \"FINISHED\";\n                    break;\n                default:\n                    delete state.State;\n                    break;\n            }\n            if (flagStateBF & 0x80) {\n                // lap\n            }\n\n            break;\n        }\n        case 0x19: {\n            const oldEventCount = state._EventCount0x19 || 0;\n\n            let eventCount = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 1);\n            const cadence = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 2);\n            let accPower = data.readUInt16LE(Messages.BUFFER_INDEX_MSG_DATA + 3);\n            const power = data.readUInt16LE(Messages.BUFFER_INDEX_MSG_DATA + 5) & 0xfff;\n            const trainerStatus = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 6) >> 4;\n            const flagStateBF = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 7);\n\n            if (eventCount !== oldEventCount) {\n                state._EventCount0x19 = eventCount;\n                if (oldEventCount > eventCount) {\n                    //Hit rollover value\n                    eventCount += 255;\n                }\n            }\n\n            if (cadence !== 0xff) {\n                state.Cadence = cadence;\n            }\n\n            if (power !== 0xfff) {\n                state.InstantaneousPower = power;\n\n                const oldAccPower = (state.AccumulatedPower || 0) % 65536;\n                if (accPower !== oldAccPower) {\n                    if (oldAccPower > accPower) {\n                        accPower += 65536;\n                    }\n                }\n                state.AccumulatedPower = (state.AccumulatedPower || 0) + accPower - oldAccPower;\n\n                state.AveragePower = (accPower - oldAccPower) / (eventCount - oldEventCount);\n            }\n\n            state.TrainerStatus = trainerStatus;\n\n            switch (flagStateBF & 0x03) {\n                case 0:\n                    state.TargetStatus = \"OnTarget\";\n                    break;\n                case 1:\n                    state.TargetStatus = \"LowSpeed\";\n                    break;\n                case 2:\n                    state.TargetStatus = \"HighSpeed\";\n                    break;\n                default:\n                    delete state.TargetStatus;\n                    break;\n            }\n\n            switch ((flagStateBF & 0x70) >> 4) {\n                case 1:\n                    state.State = \"OFF\";\n                    break;\n                case 2:\n                    state.State = \"READY\";\n                    resetState(state);\n                    break;\n                case 3:\n                    state.State = \"IN_USE\";\n                    break;\n                case 4:\n                    state.State = \"FINISHED\";\n                    break;\n                default:\n                    delete state.State;\n                    break;\n            }\n            if (flagStateBF & 0x80) {\n                // lap\n            }\n\n            break;\n        }\n        case 0x1a: {\n            const oldEventCount = state._EventCount0x1A || 0;\n\n            let eventCount = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 1);\n            let wheelTicks = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 2);\n            let accWheelPeriod = data.readUInt16LE(Messages.BUFFER_INDEX_MSG_DATA + 3);\n            let accTorque = data.readUInt16LE(Messages.BUFFER_INDEX_MSG_DATA + 5);\n            const flagStateBF = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 7);\n\n            if (eventCount !== oldEventCount) {\n                state._EventCount0x1A = eventCount;\n                if (oldEventCount > eventCount) {\n                    //Hit rollover value\n                    eventCount += 255;\n                }\n            }\n\n            const oldWheelTicks = (state.WheelTicks || 0) % 256;\n            if (wheelTicks !== oldWheelTicks) {\n                if (oldWheelTicks > wheelTicks) {\n                    wheelTicks += 65536;\n                }\n            }\n            state.WheelTicks = (state.WheelTicks || 0) + wheelTicks - oldWheelTicks;\n\n            const oldWheelPeriod = (state.WheelPeriod || 0) % 256;\n            if (accWheelPeriod !== oldWheelPeriod) {\n                if (oldWheelPeriod > accWheelPeriod) {\n                    accWheelPeriod += 65536;\n                }\n            }\n            state.WheelPeriod = (state.WheelPeriod || 0) + accWheelPeriod - oldWheelPeriod;\n\n            const oldTorque = (state.Torque || 0) % 256;\n            if (accTorque !== oldTorque) {\n                if (oldTorque > accTorque) {\n                    accTorque += 65536;\n                }\n            }\n            state.Torque = (state.Torque || 0) + accTorque - oldTorque;\n\n            switch ((flagStateBF & 0x70) >> 4) {\n                case 1:\n                    state.State = \"OFF\";\n                    break;\n                case 2:\n                    state.State = \"READY\";\n                    resetState(state);\n                    break;\n                case 3:\n                    state.State = \"IN_USE\";\n                    break;\n                case 4:\n                    state.State = \"FINISHED\";\n                    break;\n                default:\n                    delete state.State;\n                    break;\n            }\n            if (flagStateBF & 0x80) {\n                // lap\n            }\n\n            break;\n        }\n        case 0x50: {\n            state.HwVersion = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n            state.ManId = data.readUInt16LE(Messages.BUFFER_INDEX_MSG_DATA + 4);\n            state.ModelNum = data.readUInt16LE(Messages.BUFFER_INDEX_MSG_DATA + 6);\n            break;\n        }\n        case 0x51: {\n            const swRevSup = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 2);\n            const swRevMain = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n            const serial = data.readInt32LE(Messages.BUFFER_INDEX_MSG_DATA + 4);\n\n            state.SwVersion = swRevMain;\n\n            if (swRevSup !== 0xff) {\n                state.SwVersion += swRevSup / 1000;\n            }\n\n            if (serial !== 0xffffffff) {\n                state.SerialNumber = serial;\n            }\n\n            break;\n        }\n        case 0x56: {\n            const idx = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 1);\n            const tot = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 2);\n            const chState = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n            const devId = data.readUInt16LE(Messages.BUFFER_INDEX_MSG_DATA + 4);\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            const trType = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 6);\n            const devType = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 7);\n\n            if (idx === 0) {\n                state.PairedDevices = [];\n            }\n\n            if (tot > 0) {\n                state.PairedDevices.push({\n                    id: devId,\n                    type: devType,\n                    paired: chState & 0x80 ? true : false,\n                });\n            }\n\n            break;\n        }\n        default:\n            return;\n    }\n    sensor.emit(\"fitnessData\", state);\n}\n","import { PairedDevice } from \"../../types/pairedDevice.js\";\n\n/**\n * Represents the state of a Fitness Equipment sensor.\n * This class holds the data fields associated with the state of a fitness equipment sensor,\n * including metrics such as heart rate, speed, distance, power, and more.\n */\nexport class FitnessEquipmentSensorState {\n    /**\n     * Creates an instance of the FitnessEquipmentSensorState.\n     *\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @example\n     * const sensorState = new FitnessEquipmentSensorState(12345);\n     */\n    constructor(deviceId: number) {\n        this.DeviceId = deviceId;\n    }\n\n    /**\n     * The event count for page 0x19.\n     * @type {number | undefined}\n     */\n    _EventCount0x19?: number;\n\n    /**\n     * The event count for page 0x1A.\n     * @type {number | undefined}\n     */\n    _EventCount0x1A?: number;\n\n    /**\n     * The unique identifier of the sensor device.\n     * @type {number}\n     */\n    DeviceId: number;\n\n    /**\n     * The temperature measured by the sensor, in degrees Celsius.\n     * @type {number | undefined}\n     */\n    Temperature?: number;\n\n    /**\n     * The zero offset calibration value for the sensor.\n     * @type {number | undefined}\n     */\n    ZeroOffset?: number;\n\n    /**\n     * The spin-down time for the sensor, in seconds.\n     * @type {number | undefined}\n     */\n    SpinDownTime?: number;\n\n    /**\n     * The type of fitness equipment.\n     * Can be \"Treadmill\", \"Elliptical\", \"Reserved\", \"Rower\", \"Climber\", \"NordicSkier\", \"Trainer/StationaryBike\", or \"General\".\n     * @type {\"Treadmill\" | \"Elliptical\" | \"Reserved\" | \"Rower\" | \"Climber\" | \"NordicSkier\" | \"Trainer/StationaryBike\" | \"General\" | undefined}\n     */\n    EquipmentType?: \"Treadmill\" | \"Elliptical\" | \"Reserved\" | \"Rower\" | \"Climber\" | \"NordicSkier\" | \"Trainer/StationaryBike\" | \"General\";\n\n    /**\n     * The total elapsed time, in seconds.\n     * @type {number | undefined}\n     */\n    ElapsedTime?: number;\n\n    /**\n     * The total distance traveled, in meters.\n     * @type {number | undefined}\n     */\n    Distance?: number;\n\n    /**\n     * The real speed of the equipment, in meters per second.\n     * @type {number | undefined}\n     */\n    RealSpeed?: number;\n\n    /**\n     * The virtual speed of the equipment, in meters per second.\n     * @type {number | undefined}\n     */\n    VirtualSpeed?: number;\n\n    /**\n     * The current heart rate, in beats per minute (BPM).\n     * @type {number | undefined}\n     */\n    HeartRate?: number;\n\n    /**\n     * The source of the heart rate data.\n     * Can be \"HandContact\", \"EM\", or \"ANT+\".\n     * @type {\"HandContact\" | \"EM\" | \"ANT+\" | undefined}\n     */\n    HeartRateSource?: \"HandContact\" | \"EM\" | \"ANT+\";\n\n    /**\n     * The state of the equipment.\n     * Can be \"OFF\", \"READY\", \"IN_USE\", or \"FINISHED\".\n     * @type {\"OFF\" | \"READY\" | \"IN_USE\" | \"FINISHED\" | undefined}\n     */\n    State?: \"OFF\" | \"READY\" | \"IN_USE\" | \"FINISHED\";\n\n    /**\n     * The cycle length of the equipment, in meters.\n     * @type {number | undefined}\n     */\n    CycleLength?: number;\n\n    /**\n     * The incline of the equipment, in percentage.\n     * @type {number | undefined}\n     */\n    Incline?: number;\n\n    /**\n     * The resistance level of the equipment.\n     * @type {number | undefined}\n     */\n    Resistance?: number;\n\n    /**\n     * The metabolic equivalent (MET) value.\n     * @type {number | undefined}\n     */\n    METs?: number;\n\n    /**\n     * The caloric burn rate, in kilocalories per hour.\n     * @type {number | undefined}\n     */\n    CaloricBurnRate?: number;\n\n    /**\n     * The total calories burned.\n     * @type {number | undefined}\n     */\n    Calories?: number;\n\n    /**\n     * The distance ascended, in meters.\n     * @type {number | undefined}\n     */\n    AscendedDistance?: number;\n\n    /**\n     * The distance descended, in meters.\n     * @type {number | undefined}\n     */\n    DescendedDistance?: number;\n\n    /**\n     * The total number of strides taken.\n     * @type {number | undefined}\n     */\n    Strides?: number;\n\n    /**\n     * The total number of strokes taken.\n     * @type {number | undefined}\n     */\n    Strokes?: number;\n\n    /**\n     * The current cadence, in revolutions per minute (RPM).\n     * @type {number | undefined}\n     */\n    Cadence?: number;\n\n    /**\n     * The total accumulated power output, in watts.\n     * @type {number | undefined}\n     */\n    AccumulatedPower?: number;\n\n    /**\n     * The instantaneous power output, in watts.\n     * @type {number | undefined}\n     */\n    InstantaneousPower?: number;\n\n    /**\n     * The average power output, in watts.\n     * @type {number | undefined}\n     */\n    AveragePower?: number;\n\n    /**\n     * The trainer status, typically indicating the current mode or condition of the trainer.\n     * @type {number | undefined}\n     */\n    TrainerStatus?: number;\n\n    /**\n     * The target status of the equipment.\n     * Can be \"OnTarget\", \"LowSpeed\", or \"HighSpeed\".\n     * @type {\"OnTarget\" | \"LowSpeed\" | \"HighSpeed\" | undefined}\n     */\n    TargetStatus?: \"OnTarget\" | \"LowSpeed\" | \"HighSpeed\";\n\n    /**\n     * The total number of wheel ticks.\n     * @type {number | undefined}\n     */\n    WheelTicks?: number;\n\n    /**\n     * The wheel period, in seconds.\n     * @type {number | undefined}\n     */\n    WheelPeriod?: number;\n\n    /**\n     * The torque value, in newton-meters.\n     * @type {number | undefined}\n     */\n    Torque?: number;\n\n    /**\n     * The hardware version of the sensor.\n     * @type {number | undefined}\n     */\n    HwVersion?: number;\n\n    /**\n     * The manufacturer ID of the sensor.\n     * @type {number | undefined}\n     */\n    ManId?: number;\n\n    /**\n     * The model number of the sensor.\n     * @type {number | undefined}\n     */\n    ModelNum?: number;\n\n    /**\n     * The software version of the sensor.\n     * @type {number | undefined}\n     */\n    SwVersion?: number;\n\n    /**\n     * The serial number of the sensor.\n     * @type {number | undefined}\n     */\n    SerialNumber?: number;\n\n    /**\n     * The list of paired devices associated with the sensor.\n     * @type {PairedDevice[]}\n     */\n    PairedDevices: PairedDevice[] = [];\n}\n","import { FitnessEquipmentSensorState } from \"./fitnessEquipmentSensorState.js\";\n\n/**\n * Represents the state of a Fitness Equipment sensor during scanning.\n * Extends the FitnessEquipmentSensorState to include additional fields specific to scanning,\n * such as RSSI (Received Signal Strength Indicator) and signal threshold.\n */\nexport class FitnessEquipmentScanState extends FitnessEquipmentSensorState {\n    /**\n     * The received signal strength indicator (RSSI) of the sensor signal.\n     * Indicates the strength of the received signal from the fitness equipment sensor.\n     * @type {number | undefined}\n     */\n    Rssi: number | undefined;\n\n    /**\n     * The signal threshold value for the sensor.\n     * Represents the minimum signal strength required for a reliable connection.\n     * @type {number | undefined}\n     */\n    Threshold: number | undefined;\n}\n","/*\n * ANT+ profile: https://www.thisisant.com/developer/ant-plus/device-profiles/#521_tab\n * Spec sheet: https://www.thisisant.com/resources/bicycle-power/\n */\n\nimport { updateState } from \"./fitnessEquipmentUtils.js\";\nimport { FitnessEquipmentSensorState } from \"./fitnessEquipmentSensorState.js\";\nimport { AntPlusSensor } from \"../antPlusSensor.js\";\nimport { SendCallback } from \"../../types/sendCallback.js\";\nimport { Messages } from \"../../utils/messages.js\";\n\n/**\n * Represents a Fitness Equipment sensor.\n * This class extends the AntPlusSensor class to handle specific data related to fitness equipment.\n */\nexport class FitnessEquipmentSensor extends AntPlusSensor {\n    /**\n     * The device type code for Fitness Equipment sensors.\n     * @type {number}\n     * @readonly\n     */\n    static deviceType: number = 0x11;\n\n    /**\n     * The current state of the Fitness Equipment sensor.\n     * @private\n     * @type {FitnessEquipmentSensorState}\n     */\n    private state!: FitnessEquipmentSensorState;\n\n    /**\n     * Attaches the sensor to a specified ANT+ channel and initializes its state.\n     *\n     * @public\n     * @param {number} channel - The ANT+ channel number used for communication with the sensor.\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @returns {void}\n     *\n     * @example\n     * const sensor = new FitnessEquipmentSensor();\n     * sensor.attach(1, 12345); // Attaches to channel 1 with device ID 12345\n     */\n    public attach(channel: number, deviceId: number): void {\n        super.attachSensor(channel, \"receive\", deviceId, FitnessEquipmentSensor.deviceType, 0, 255, 8192);\n        this.state = new FitnessEquipmentSensorState(deviceId);\n    }\n\n    /**\n     * Updates the state of the sensor based on incoming data.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {Buffer} data - The raw data buffer received from the sensor.\n     * @returns {void}\n     */\n    protected updateState(deviceId: number, data: Buffer): void {\n        this.state.DeviceId = deviceId;\n        updateState(this, this.state, data);\n    }\n\n    /**\n     * Sends user configuration data to the sensor internally.\n     *\n     * @private\n     * @param {number} [userWeight] - The user's weight in kilograms.\n     * @param {number} [bikeWeight] - The weight of the bike in kilograms.\n     * @param {number} [wheelDiameter] - The diameter of the wheel in meters.\n     * @param {number} [gearRatio] - The gear ratio.\n     * @param {SendCallback} [cbk] - Optional callback function to handle the send response.\n     * @returns {void}\n     */\n    private setUserConfigurationInternal(userWeight?: number, bikeWeight?: number, wheelDiameter?: number, gearRatio?: number, cbk?: SendCallback): void {\n        const m = userWeight == null ? 0xffff : Math.max(0, Math.min(65534, Math.round(userWeight * 100)));\n        const df = wheelDiameter == null ? 0xff : Math.round(wheelDiameter * 10) % 10;\n        const mb = bikeWeight == null ? 0xfff : Math.max(0, Math.min(1000, Math.round(bikeWeight * 20)));\n        const d = wheelDiameter == null ? 0xff : Math.max(0, Math.min(254, Math.round(wheelDiameter)));\n        const gr = gearRatio == null ? 0x00 : Math.max(1, Math.min(255, Math.round(gearRatio / 0.03)));\n        const payload = [0x37, m & 0xff, (m >> 8) & 0xff, 0xff, (df & 0xf) | ((mb & 0xf) << 4), (mb >> 4) & 0xf, d & 0xff, gr & 0xff];\n        const msg = Messages.acknowledgedData(this.channel!, payload);\n        this.send(msg, cbk);\n    }\n\n    /**\n     * Sets the user configuration for the sensor.\n     *\n     * @public\n     * @param {number|SendCallback} [userWeightOrCallback] - The user's weight in kilograms or a callback function.\n     * @param {number} [bikeWeight] - The weight of the bike in kilograms.\n     * @param {number} [wheelDiameter] - The diameter of the wheel in meters.\n     * @param {number} [gearRatio] - The gear ratio.\n     * @param {SendCallback} [cbk] - Optional callback function to handle the send response.\n     * @returns {void}\n     *\n     * @example\n     * sensor.setUserConfiguration(70, 10, 0.7, 3.5, callbackFunction);\n     */\n    public setUserConfiguration(userWeightOrCallback?: number | SendCallback, bikeWeight?: number, wheelDiameter?: number, gearRatio?: number, cbk?: SendCallback): void {\n        if (typeof userWeightOrCallback === \"function\") {\n            this.setUserConfigurationInternal(undefined, undefined, undefined, undefined, userWeightOrCallback);\n        } else if (typeof bikeWeight === \"function\") {\n            this.setUserConfigurationInternal(userWeightOrCallback, undefined, undefined, undefined, bikeWeight);\n        } else if (typeof wheelDiameter === \"function\") {\n            this.setUserConfigurationInternal(userWeightOrCallback, bikeWeight, undefined, undefined, wheelDiameter);\n        } else if (typeof gearRatio === \"function\") {\n            this.setUserConfigurationInternal(userWeightOrCallback, bikeWeight, wheelDiameter, undefined, gearRatio);\n        } else {\n            this.setUserConfigurationInternal(userWeightOrCallback, bikeWeight, wheelDiameter, gearRatio, cbk);\n        }\n    }\n\n    /**\n     * Sets the basic resistance level on the fitness equipment.\n     *\n     * @public\n     * @param {number} resistance - The resistance level to set (0 to 100).\n     * @param {SendCallback} [cbk] - Optional callback function to handle the send response.\n     * @returns {void}\n     *\n     * @example\n     * sensor.setBasicResistance(50, callbackFunction);\n     */\n    public setBasicResistance(resistance: number, cbk?: SendCallback): void {\n        const res = Math.max(0, Math.min(200, Math.round(resistance * 2)));\n        const payload = [0x30, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, res & 0xff];\n        const msg = Messages.acknowledgedData(this.channel!, payload);\n        this.send(msg, cbk);\n    }\n\n    /**\n     * Sets the target power level on the fitness equipment.\n     *\n     * @public\n     * @param {number} power - The target power level in watts.\n     * @param {SendCallback} [cbk] - Optional callback function to handle the send response.\n     * @returns {void}\n     *\n     * @example\n     * sensor.setTargetPower(250, callbackFunction);\n     */\n    public setTargetPower(power: number, cbk?: SendCallback): void {\n        const p = Math.max(0, Math.min(4000, Math.round(power * 4)));\n        const payload = [0x31, 0xff, 0xff, 0xff, 0xff, 0xff, p & 0xff, (p >> 8) & 0xff];\n        const msg = Messages.acknowledgedData(this.channel!, payload);\n        this.send(msg, cbk);\n    }\n\n    /**\n     * Sends wind resistance data to the sensor internally.\n     *\n     * @private\n     * @param {number} [windCoeff] - The wind resistance coefficient.\n     * @param {number} [windSpeed] - The wind speed in km/h.\n     * @param {number} [draftFactor] - The drafting factor (0 to 1).\n     * @param {SendCallback} [cbk] - Optional callback function to handle the send response.\n     * @returns {void}\n     */\n    private setWindResistanceInternal(windCoeff?: number, windSpeed?: number, draftFactor?: number, cbk?: SendCallback): void {\n        const wc = windCoeff == null ? 0xff : Math.max(0, Math.min(186, Math.round(windCoeff * 100)));\n        const ws = windSpeed == null ? 0xff : Math.max(0, Math.min(254, Math.round(windSpeed + 127)));\n        const df = draftFactor == null ? 0xff : Math.max(0, Math.min(100, Math.round(draftFactor * 100)));\n        const payload = [0x32, 0xff, 0xff, 0xff, 0xff, wc & 0xff, ws & 0xff, df & 0xff];\n        const msg = Messages.acknowledgedData(this.channel!, payload);\n        this.send(msg, cbk);\n    }\n\n    /**\n     * Sets the wind resistance on the fitness equipment.\n     *\n     * @public\n     * @param {number|SendCallback} [windCoeffOrCallback] - The wind resistance coefficient or a callback function.\n     * @param {number} [windSpeed] - The wind speed in km/h.\n     * @param {number} [draftFactor] - The drafting factor (0 to 1).\n     * @param {SendCallback} [cbk] - Optional callback function to handle the send response.\n     * @returns {void}\n     *\n     * @example\n     * sensor.setWindResistance(0.5, 20, 0.1, callbackFunction);\n     */\n    public setWindResistance(windCoeffOrCallback?: number | SendCallback, windSpeed?: number, draftFactor?: number, cbk?: SendCallback): void {\n        if (typeof windCoeffOrCallback === \"function\") {\n            this.setWindResistanceInternal(undefined, undefined, undefined, windCoeffOrCallback);\n        } else if (typeof windSpeed === \"function\") {\n            this.setWindResistanceInternal(windCoeffOrCallback, undefined, undefined, windSpeed);\n        } else if (typeof draftFactor === \"function\") {\n            this.setWindResistanceInternal(windCoeffOrCallback, windSpeed, undefined, draftFactor);\n        } else {\n            this.setWindResistanceInternal(windCoeffOrCallback, windSpeed, draftFactor, cbk);\n        }\n    }\n\n    /**\n     * Sends track resistance data to the sensor internally.\n     *\n     * @private\n     * @param {number} [slope] - The track slope percentage.\n     * @param {number} [rollingResistanceCoeff] - The rolling resistance coefficient.\n     * @param {SendCallback} [cbk] - Optional callback function to handle the send response.\n     * @returns {void}\n     */\n    private setTrackResistanceInternal(slope?: number, rollingResistanceCoeff?: number, cbk?: SendCallback): void {\n        const s = slope == null ? 0xffff : Math.max(0, Math.min(40000, Math.round((slope + 200) * 100)));\n        const rr = rollingResistanceCoeff == null ? 0xff : Math.max(0, Math.min(254, Math.round(rollingResistanceCoeff * 20000)));\n        const payload = [0x33, 0xff, 0xff, 0xff, 0xff, s & 0xff, (s >> 8) & 0xff, rr & 0xff];\n        const msg = Messages.acknowledgedData(this.channel!, payload);\n        this.send(msg, cbk);\n    }\n\n    /**\n     * Sets the track resistance on the fitness equipment.\n     *\n     * @public\n     * @param {number|SendCallback} [slopeOrCallback] - The track slope percentage or a callback function.\n     * @param {number} [rollingResistanceCoeff] - The rolling resistance coefficient.\n     * @param {SendCallback} [cbk] - Optional callback function to handle the send response.\n     * @returns {void}\n     *\n     * @example\n     * sensor.setTrackResistance(5, 0.005, callbackFunction);\n     */\n    public setTrackResistance(slopeOrCallback?: number | SendCallback, rollingResistanceCoeff?: number, cbk?: SendCallback): void {\n        if (typeof slopeOrCallback === \"function\") {\n            this.setTrackResistanceInternal(undefined, undefined, slopeOrCallback);\n        } else if (typeof rollingResistanceCoeff === \"function\") {\n            this.setTrackResistanceInternal(slopeOrCallback, undefined, rollingResistanceCoeff);\n        } else {\n            this.setTrackResistanceInternal(slopeOrCallback, rollingResistanceCoeff, cbk);\n        }\n    }\n}\n","import { updateState } from \"./fitnessEquipmentUtils.js\";\nimport { FitnessEquipmentScanState } from \"./fitnessEquipmentScanState.js\";\nimport { FitnessEquipmentSensor } from \"./fitnessEquipmentSensor.js\";\nimport { AntPlusScanner } from \"../antPlusScanner.js\";\n\n/**\n * Represents a scanner for Fitness Equipment sensors.\n * Extends the AntPlusScanner class to handle scanning and state updates for multiple fitness equipment sensors.\n */\nexport class FitnessEquipmentScanner extends AntPlusScanner {\n    /**\n     * Returns the device type code for Fitness Equipment sensors.\n     *\n     * @protected\n     * @returns {number} The device type code for Fitness Equipment sensors.\n     */\n    protected deviceType(): number {\n        return FitnessEquipmentSensor.deviceType;\n    }\n\n    /**\n     * A dictionary to store the states of detected Fitness Equipment sensors by their device ID.\n     * @private\n     * @type {{ [id: number]: FitnessEquipmentScanState }}\n     */\n    private states: { [id: number]: FitnessEquipmentScanState } = {};\n\n    /**\n     * Creates a new state entry for a sensor if it does not already exist.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @returns {void}\n     * @example\n     * scanner.createStateIfNew(12345); // Creates a new state for device ID 12345 if it does not exist.\n     */\n    protected createStateIfNew(deviceId: number): void {\n        if (!this.states[deviceId]) {\n            this.states[deviceId] = new FitnessEquipmentScanState(deviceId);\n        }\n    }\n\n    /**\n     * Updates the RSSI (Received Signal Strength Indicator) and signal threshold for a specific sensor.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {number} rssi - The received signal strength indicator of the device.\n     * @param {number} threshold - The signal threshold value for the device.\n     * @returns {void}\n     * @example\n     * scanner.updateRssiAndThreshold(12345, -70, 30); // Updates the RSSI and threshold for device ID 12345.\n     */\n    protected updateRssiAndThreshold(deviceId: number, rssi: number, threshold: number): void {\n        this.states[deviceId].Rssi = rssi;\n        this.states[deviceId].Threshold = threshold;\n    }\n\n    /**\n     * Updates the state of a sensor based on incoming data.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {Buffer} data - The raw data buffer received from the sensor.\n     * @returns {void}\n     * @example\n     * const dataBuffer = getDataFromSensor(); // Assume this function gets data from a sensor\n     * scanner.updateState(12345, dataBuffer); // Updates the state for device ID 12345.\n     */\n    protected updateState(deviceId: number, data: Buffer): void {\n        updateState(this, this.states[deviceId], data);\n    }\n}\n","import { Messages } from \"../../utils/messages.js\";\nimport { MuscleOxygenSensorState } from \"./muscleOxygenSensorState.js\";\nimport { MuscleOxygenScanState } from \"./muscleOxygenScanState.js\";\nimport { MuscleOxygenSensor } from \"./muscleOxygenSensor.js\";\nimport { MuscleOxygenScanner } from \"./muscleOxygenScanner.js\";\n\n/**\n * Updates the state of a Muscle Oxygen sensor or scanner based on the incoming data.\n * Decodes various pages of data to update the state, including event counts, sensor capabilities,\n * measurement intervals, total hemoglobin concentration, and battery status.\n *\n * @param {MuscleOxygenSensor | MuscleOxygenScanner} sensor - The sensor or scanner instance emitting the data.\n * @param {MuscleOxygenSensorState | MuscleOxygenScanState} state - The current state of the sensor or scanner.\n * @param {Buffer} data - The raw data buffer received from the sensor.\n * @returns {void}\n *\n * @example\n * const sensor = new MuscleOxygenSensor();\n * const state = new MuscleOxygenSensorState(12345);\n * const dataBuffer = getDataFromSensor(); // Assume this function gets data from a sensor\n * updateState(sensor, state, dataBuffer);\n */\nexport function updateState(sensor: MuscleOxygenSensor | MuscleOxygenScanner, state: MuscleOxygenSensorState | MuscleOxygenScanState, data: Buffer) {\n    const oldEventCount = state._EventCount || 0;\n    const page = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA);\n\n    switch (page) {\n        case 0x01: {\n            let eventCount = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 1);\n            const notifications = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 2);\n            const capabilities = data.readUInt16LE(Messages.BUFFER_INDEX_MSG_DATA + 3);\n            const total = data.readUInt16LE(Messages.BUFFER_INDEX_MSG_DATA + 4) & 0xfff;\n            const previous = (data.readUInt16LE(Messages.BUFFER_INDEX_MSG_DATA + 5) >> 4) & 0x3ff;\n            const current = (data.readUInt16LE(Messages.BUFFER_INDEX_MSG_DATA + 6) >> 6) & 0x3ff;\n\n            if (eventCount !== oldEventCount) {\n                state._EventCount = eventCount;\n                if (oldEventCount > eventCount) {\n                    // Hit rollover value\n                    eventCount += 255;\n                }\n            }\n\n            state.UTCTimeRequired = (notifications & 0x01) === 0x01;\n            state.SupportANTFS = (capabilities & 0x01) === 0x01;\n\n            switch ((capabilities >> 1) & 0x7) {\n                case 1:\n                    state.MeasurementInterval = 0.25;\n                    break;\n                case 2:\n                    state.MeasurementInterval = 0.5;\n                    break;\n                case 3:\n                    state.MeasurementInterval = 1;\n                    break;\n                case 4:\n                    state.MeasurementInterval = 2;\n                    break;\n                default:\n                    delete state.MeasurementInterval;\n            }\n\n            switch (total) {\n                case 0xffe:\n                    state.TotalHemoglobinConcentration = \"AmbientLightTooHigh\";\n                    break;\n                case 0xfff:\n                    state.TotalHemoglobinConcentration = \"Invalid\";\n                    break;\n                default:\n                    state.TotalHemoglobinConcentration = total;\n            }\n\n            switch (previous) {\n                case 0x3fe:\n                    state.PreviousSaturatedHemoglobinPercentage = \"AmbientLightTooHigh\";\n                    break;\n                case 0x3ff:\n                    state.PreviousSaturatedHemoglobinPercentage = \"Invalid\";\n                    break;\n                default:\n                    state.PreviousSaturatedHemoglobinPercentage = previous;\n            }\n\n            switch (current) {\n                case 0x3fe:\n                    state.CurrentSaturatedHemoglobinPercentage = \"AmbientLightTooHigh\";\n                    break;\n                case 0x3ff:\n                    state.CurrentSaturatedHemoglobinPercentage = \"Invalid\";\n                    break;\n                default:\n                    state.CurrentSaturatedHemoglobinPercentage = current;\n            }\n\n            break;\n        }\n        case 0x50: {\n            state.HwVersion = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n            state.ManId = data.readUInt16LE(Messages.BUFFER_INDEX_MSG_DATA + 4);\n            state.ModelNum = data.readUInt16LE(Messages.BUFFER_INDEX_MSG_DATA + 6);\n            break;\n        }\n        case 0x51: {\n            const swRevSup = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 2);\n            const swRevMain = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 3);\n            const serial = data.readInt32LE(Messages.BUFFER_INDEX_MSG_DATA + 4);\n\n            state.SwVersion = swRevMain;\n\n            if (swRevSup !== 0xff) {\n                state.SwVersion += swRevSup / 1000;\n            }\n\n            if (serial !== 0xffffffff) {\n                state.SerialNumber = serial;\n            }\n\n            break;\n        }\n        case 0x52: {\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            const batteryId = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 2);\n            const operatingTime = data.readUInt32LE(Messages.BUFFER_INDEX_MSG_DATA + 3) & 0xffffff;\n            const batteryFrac = data.readInt32LE(Messages.BUFFER_INDEX_MSG_DATA + 6);\n            const batteryStatus = data.readInt32LE(Messages.BUFFER_INDEX_MSG_DATA + 7);\n\n            state.OperatingTime = operatingTime * ((batteryStatus & 0x80) === 0x80 ? 2 : 16);\n            state.BatteryVoltage = (batteryStatus & 0x0f) + batteryFrac / 256;\n            const batteryFlags = (batteryStatus & 0x70) >>> 4;\n            switch (batteryFlags) {\n                case 1:\n                    state.BatteryStatus = \"New\";\n                    break;\n                case 2:\n                    state.BatteryStatus = \"Good\";\n                    break;\n                case 3:\n                    state.BatteryStatus = \"Ok\";\n                    break;\n                case 4:\n                    state.BatteryStatus = \"Low\";\n                    break;\n                case 5:\n                    state.BatteryStatus = \"Critical\";\n                    break;\n                default:\n                    state.BatteryVoltage = undefined;\n                    state.BatteryStatus = \"Invalid\";\n                    break;\n            }\n            break;\n        }\n        default:\n            return;\n    }\n    if (page !== 0x01 || state._EventCount !== oldEventCount) {\n        sensor.emit(\"oxygenData\", state);\n    }\n}\n","/**\n * Represents the state of a Muscle Oxygen sensor.\n * This class holds the data fields associated with the state of a Muscle Oxygen sensor, including\n * event count, device details, measurement data, and battery status.\n */\nexport class MuscleOxygenSensorState {\n    /**\n     * Creates an instance of the MuscleOxygenSensorState.\n     *\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @example\n     * const sensorState = new MuscleOxygenSensorState(12345);\n     */\n    constructor(deviceId: number) {\n        this.DeviceId = deviceId;\n    }\n\n    /**\n     * The count of events detected by the sensor.\n     * @type {number | undefined}\n     */\n    _EventCount?: number;\n\n    /**\n     * The unique identifier of the sensor device.\n     * @type {number}\n     */\n    DeviceId: number;\n\n    /**\n     * Indicates whether UTC time is required by the sensor.\n     * @type {boolean | undefined}\n     */\n    UTCTimeRequired?: boolean;\n\n    /**\n     * Indicates whether ANT-FS is supported by the sensor.\n     * @type {boolean | undefined}\n     */\n    SupportANTFS?: boolean;\n\n    /**\n     * The measurement interval in seconds.\n     * Possible values: 0.25, 0.5, 1, or 2 seconds.\n     * @type {0.25 | 0.5 | 1 | 2 | undefined}\n     */\n    MeasurementInterval?: 0.25 | 0.5 | 1 | 2;\n\n    /**\n     * The total hemoglobin concentration.\n     * Can be a numeric value, \"AmbientLightTooHigh\", or \"Invalid\".\n     * @type {number | \"AmbientLightTooHigh\" | \"Invalid\" | undefined}\n     */\n    TotalHemoglobinConcentration?: number | \"AmbientLightTooHigh\" | \"Invalid\";\n\n    /**\n     * The percentage of saturated hemoglobin from the previous measurement.\n     * Can be a numeric value, \"AmbientLightTooHigh\", or \"Invalid\".\n     * @type {number | \"AmbientLightTooHigh\" | \"Invalid\" | undefined}\n     */\n    PreviousSaturatedHemoglobinPercentage?: number | \"AmbientLightTooHigh\" | \"Invalid\";\n\n    /**\n     * The percentage of saturated hemoglobin from the current measurement.\n     * Can be a numeric value, \"AmbientLightTooHigh\", or \"Invalid\".\n     * @type {number | \"AmbientLightTooHigh\" | \"Invalid\" | undefined}\n     */\n    CurrentSaturatedHemoglobinPercentage?: number | \"AmbientLightTooHigh\" | \"Invalid\";\n\n    /**\n     * The hardware version of the sensor.\n     * @type {number | undefined}\n     */\n    HwVersion?: number;\n\n    /**\n     * The manufacturer ID of the sensor.\n     * @type {number | undefined}\n     */\n    ManId?: number;\n\n    /**\n     * The model number of the sensor.\n     * @type {number | undefined}\n     */\n    ModelNum?: number;\n\n    /**\n     * The software version of the sensor.\n     * @type {number | undefined}\n     */\n    SwVersion?: number;\n\n    /**\n     * The serial number of the sensor.\n     * @type {number | undefined}\n     */\n    SerialNumber?: number;\n\n    /**\n     * The cumulative operating time of the sensor in seconds.\n     * @type {number | undefined}\n     */\n    OperatingTime?: number;\n\n    /**\n     * The battery voltage of the sensor.\n     * @type {number | undefined}\n     */\n    BatteryVoltage?: number;\n\n    /**\n     * The battery status of the sensor.\n     * Can be \"New\", \"Good\", \"Ok\", \"Low\", \"Critical\", or \"Invalid\".\n     * @type {\"New\" | \"Good\" | \"Ok\" | \"Low\" | \"Critical\" | \"Invalid\" | undefined}\n     */\n    BatteryStatus?: \"New\" | \"Good\" | \"Ok\" | \"Low\" | \"Critical\" | \"Invalid\";\n}\n","import { MuscleOxygenSensorState } from \"./muscleOxygenSensorState.js\";\n\n/**\n * Represents the state of a Muscle Oxygen sensor during scanning.\n * Extends the MuscleOxygenSensorState to include additional fields specific to scanning,\n * such as RSSI (Received Signal Strength Indicator) and signal threshold.\n */\nexport class MuscleOxygenScanState extends MuscleOxygenSensorState {\n    /**\n     * The received signal strength indicator (RSSI) of the sensor signal.\n     * @type {number | undefined}\n     */\n    Rssi: number | undefined;\n\n    /**\n     * The signal threshold value for the sensor.\n     * @type {number | undefined}\n     */\n    Threshold: number | undefined;\n}\n","/*\n * ANT+ profile: https://www.thisisant.com/developer/ant-plus/device-profiles/#521_tab\n * Spec sheet: https://www.thisisant.com/resources/bicycle-power/\n */\n\nimport { updateState } from \"./muscleOxygenUtils.js\";\nimport { MuscleOxygenSensorState } from \"./muscleOxygenSensorState.js\";\nimport { AntPlusSensor } from \"../antPlusSensor.js\";\nimport { SendCallback } from \"../../types/sendCallback.js\";\nimport { Messages } from \"../../utils/messages.js\";\n\n/**\n * Represents a Muscle Oxygen sensor.\n * This class extends the AntPlusSensor class to handle specific data related to muscle oxygen measurements.\n */\nexport class MuscleOxygenSensor extends AntPlusSensor {\n    /**\n     * The device type code for Muscle Oxygen sensors.\n     * @type {number}\n     * @readonly\n     */\n    static deviceType: number = 0x1f;\n\n    /**\n     * The current state of the Muscle Oxygen sensor.\n     * @private\n     * @type {MuscleOxygenSensorState}\n     */\n    private state!: MuscleOxygenSensorState;\n\n    /**\n     * Attaches the sensor to a specified ANT+ channel and initializes its state.\n     *\n     * @public\n     * @param {number} channel - The ANT+ channel number used for communication with the sensor.\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @returns {void}\n     *\n     * @example\n     * const sensor = new MuscleOxygenSensor();\n     * sensor.attach(1, 12345); // Attaches to channel 1 with device ID 12345\n     */\n    public attach(channel: number, deviceId: number) {\n        super.attachSensor(channel, \"receive\", deviceId, MuscleOxygenSensor.deviceType, 0, 255, 8192);\n        this.state = new MuscleOxygenSensorState(deviceId);\n    }\n\n    /**\n     * Updates the state of the sensor based on incoming data.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {Buffer} data - The raw data buffer received from the sensor.\n     * @returns {void}\n     *\n     * @example\n     * const dataBuffer = getDataFromSensor(); // assume this function gets data from a sensor\n     * sensor.updateState(12345, dataBuffer);\n     */\n    protected updateState(deviceId: number, data: Buffer) {\n        this.state.DeviceId = deviceId;\n        updateState(this, this.state, data);\n    }\n\n    /**\n     * Sends a time-based command to the sensor.\n     *\n     * @private\n     * @param {number} cmd - The command code to be sent.\n     * @param {SendCallback} [cbk] - Optional callback function to handle the send response.\n     * @returns {void}\n     *\n     * @example\n     * sensor._sendTimeCmd(0x00, callbackFunction);\n     */\n    private _sendTimeCmd(cmd: number, cbk?: SendCallback) {\n        const now = new Date();\n        const utc = Math.round((now.getTime() - Date.UTC(1989, 11, 31, 0, 0, 0, 0)) / 1000);\n        const offset = -Math.round(now.getTimezoneOffset() / 15);\n        const payload = [0x10, cmd & 0xff, 0xff, offset & 0xff, (utc >> 0) & 0xff, (utc >> 8) & 0xff, (utc >> 16) & 0xff, (utc >> 24) & 0xff];\n        const msg = Messages.acknowledgedData(this.channel!, payload);\n        this.send(msg, cbk);\n    }\n\n    /**\n     * Sets the UTC time on the sensor.\n     *\n     * @public\n     * @param {SendCallback} [cbk] - Optional callback function to handle the send response.\n     * @returns {void}\n     *\n     * @example\n     * sensor.setUTCTime(callbackFunction);\n     */\n    public setUTCTime(cbk?: SendCallback) {\n        this._sendTimeCmd(0x00, cbk);\n    }\n\n    /**\n     * Starts a new session on the sensor.\n     *\n     * @public\n     * @param {SendCallback} [cbk] - Optional callback function to handle the send response.\n     * @returns {void}\n     *\n     * @example\n     * sensor.startSession(callbackFunction);\n     */\n    public startSession(cbk?: SendCallback) {\n        this._sendTimeCmd(0x01, cbk);\n    }\n\n    /**\n     * Stops the current session on the sensor.\n     *\n     * @public\n     * @param {SendCallback} [cbk] - Optional callback function to handle the send response.\n     * @returns {void}\n     *\n     * @example\n     * sensor.stopSession(callbackFunction);\n     */\n    public stopSession(cbk?: SendCallback) {\n        this._sendTimeCmd(0x02, cbk);\n    }\n\n    /**\n     * Sets a lap marker on the sensor.\n     *\n     * @public\n     * @param {SendCallback} [cbk] - Optional callback function to handle the send response.\n     * @returns {void}\n     *\n     * @example\n     * sensor.setLap(callbackFunction);\n     */\n    public setLap(cbk?: SendCallback) {\n        this._sendTimeCmd(0x03, cbk);\n    }\n}\n","import { updateState } from \"./muscleOxygenUtils.js\";\nimport { MuscleOxygenScanState } from \"./muscleOxygenScanState.js\";\nimport { MuscleOxygenSensor } from \"./muscleOxygenSensor.js\";\nimport { AntPlusScanner } from \"../antPlusScanner.js\";\n\n/**\n * Represents a scanner for Muscle Oxygen sensors.\n * Extends the AntPlusScanner class to handle scanning and state updates for multiple Muscle Oxygen sensors.\n */\nexport class MuscleOxygenScanner extends AntPlusScanner {\n    /**\n     * Returns the device type code for Muscle Oxygen sensors.\n     *\n     * @protected\n     * @returns {number} The device type code for Muscle Oxygen sensors.\n     */\n    protected deviceType(): number {\n        return MuscleOxygenSensor.deviceType;\n    }\n\n    /**\n     * A dictionary to store the states of detected Muscle Oxygen sensors by their device ID.\n     * @private\n     * @type {{ [id: number]: MuscleOxygenScanState }}\n     */\n    private states: { [id: number]: MuscleOxygenScanState } = {};\n\n    /**\n     * Creates a new state entry for a sensor if it does not already exist.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @returns {void}\n     *\n     * @example\n     * scanner.createStateIfNew(12345); // Creates a new state for device ID 12345 if it does not exist.\n     */\n    protected createStateIfNew(deviceId: number): void {\n        if (!this.states[deviceId]) {\n            this.states[deviceId] = new MuscleOxygenScanState(deviceId);\n        }\n    }\n\n    /**\n     * Updates the RSSI (Received Signal Strength Indicator) and signal threshold for a specific sensor.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {number} rssi - The received signal strength indicator of the device.\n     * @param {number} threshold - The signal threshold value for the device.\n     * @returns {void}\n     *\n     * @example\n     * scanner.updateRssiAndThreshold(12345, -70, 30); // Updates the RSSI and threshold for device ID 12345.\n     */\n    protected updateRssiAndThreshold(deviceId: number, rssi: number, threshold: number): void {\n        this.states[deviceId].Rssi = rssi;\n        this.states[deviceId].Threshold = threshold;\n    }\n\n    /**\n     * Updates the state of a sensor based on incoming data.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {Buffer} data - The raw data buffer received from the sensor.\n     * @returns {void}\n     *\n     * @example\n     * const dataBuffer = getDataFromSensor(); // Assume this function gets data from a sensor\n     * scanner.updateState(12345, dataBuffer); // Updates the state for device ID 12345.\n     */\n    protected updateState(deviceId: number, data: Buffer): void {\n        updateState(this, this.states[deviceId], data);\n    }\n}\n","import { EnvironmentScanner } from \"./environmentScanner.js\";\nimport { EnvironmentScanState } from \"./environmentScanState.js\";\nimport { EnvironmentSensor } from \"./environmentSensor.js\";\nimport { EnvironmentSensorState } from \"./environmentSensorState.js\";\nimport { Messages } from \"../../utils/messages.js\";\n\n/**\n * Updates the state of an Environment sensor or scanner based on incoming data.\n * Decodes the data buffer and updates the sensor state accordingly.\n *\n * @param {EnvironmentSensor | EnvironmentScanner} sensor - The sensor or scanner instance emitting the data.\n * @param {EnvironmentSensorState | EnvironmentScanState} state - The current state of the sensor or scanner.\n * @param {Buffer} data - The raw data buffer received from the sensor.\n * @returns {void}\n *\n * @example\n * const sensor = new EnvironmentSensor();\n * const state = new EnvironmentSensorState(12345);\n * const dataBuffer = getDataFromSensor(); // Assume this function gets data from a sensor\n * updateState(sensor, state, dataBuffer); // Updates the state based on the received data.\n */\nexport function updateState(sensor: EnvironmentSensor | EnvironmentScanner, state: EnvironmentSensorState | EnvironmentScanState, data: Buffer): void {\n    const page = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA);\n    if (page === 1) {\n        state.EventCount = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 2);\n        state.Temperature = data.readInt16LE(Messages.BUFFER_INDEX_MSG_DATA + 6) / 100;\n    }\n    sensor.emit(\"envdata\", state);\n    sensor.emit(\"envData\", state);\n}\n","/**\n * Represents the state of an Environment Sensor.\n * This class holds the data fields associated with the state of an environment sensor,\n * such as the event count and temperature.\n */\nexport class EnvironmentSensorState {\n    /**\n     * Creates an instance of the EnvironmentSensorState.\n     *\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     *\n     * @example\n     * const sensorState = new EnvironmentSensorState(12345);\n     */\n    constructor(deviceId: number) {\n        this.DeviceId = deviceId;\n    }\n\n    /**\n     * The unique identifier of the sensor device.\n     * @type {number}\n     */\n    DeviceId: number;\n\n    /**\n     * The event count recorded by the sensor.\n     * @type {number | undefined}\n     */\n    EventCount: number | undefined;\n\n    /**\n     * The temperature measured by the sensor, in degrees Celsius.\n     * @type {number | undefined}\n     */\n    Temperature: number | undefined;\n}\n","import { EnvironmentSensorState } from \"./environmentSensorState.js\";\n\n/**\n * Represents the state of an Environment Sensor during scanning.\n * Extends the EnvironmentSensorState to include additional fields specific to scanning,\n * such as RSSI (Received Signal Strength Indicator) and signal threshold.\n */\nexport class EnvironmentScanState extends EnvironmentSensorState {\n    /**\n     * The received signal strength indicator (RSSI) of the sensor signal.\n     * Indicates the strength of the received signal from the environment sensor.\n     * @type {number | undefined}\n     */\n    Rssi: number | undefined;\n\n    /**\n     * The signal threshold value for the sensor.\n     * Represents the minimum signal strength required for a reliable connection.\n     * @type {number | undefined}\n     */\n    Threshold: number | undefined;\n}\n","/*\n * ANT+ profile: https://www.thisisant.com/developer/ant-plus/device-profiles/#524_tab\n * Spec sheet: https://www.thisisant.com/resources/environment/\n */\n\nimport { updateState } from \"./environmentUtils.js\";\nimport { EnvironmentSensorState } from \"./environmentSensorState.js\";\nimport { AntPlusSensor } from \"../antPlusSensor.js\";\n\n/**\n * Represents an Environment sensor.\n * This class extends the AntPlusSensor class to handle specific data related to environmental monitoring.\n */\nexport class EnvironmentSensor extends AntPlusSensor {\n    /**\n     * The device type code for Environment sensors.\n     * @type {number}\n     * @readonly\n     */\n    static deviceType: number = 25;\n\n    /**\n     * Attaches the sensor to a specified ANT+ channel and initializes its state.\n     *\n     * @public\n     * @param {number} channel - The ANT+ channel number used for communication with the sensor.\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @returns {void}\n     *\n     * @example\n     * const sensor = new EnvironmentSensor();\n     * sensor.attach(1, 12345); // Attaches to channel 1 with device ID 12345\n     */\n    public attach(channel: number, deviceId: number): void {\n        super.attachSensor(channel, \"receive\", deviceId, EnvironmentSensor.deviceType, 0, 255, 8192);\n        this.state = new EnvironmentSensorState(deviceId);\n    }\n\n    /**\n     * The current state of the Environment sensor.\n     * @private\n     * @type {EnvironmentSensorState}\n     */\n    private state!: EnvironmentSensorState;\n\n    /**\n     * Updates the state of the sensor based on incoming data.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {Buffer} data - The raw data buffer received from the sensor.\n     * @returns {void}\n     *\n     * @example\n     * const dataBuffer = getDataFromSensor(); // assume this function gets data from a sensor\n     * sensor.updateState(12345, dataBuffer);\n     */\n    protected updateState(deviceId: number, data: Buffer): void {\n        this.state.DeviceId = deviceId;\n        updateState(this, this.state, data);\n    }\n}\n","import { updateState } from \"./environmentUtils.js\";\nimport { EnvironmentScanState } from \"./environmentScanState.js\";\nimport { EnvironmentSensor } from \"./environmentSensor.js\";\nimport { AntPlusScanner } from \"../antPlusScanner.js\";\n\n/**\n * Represents a scanner for Environment sensors.\n * Extends the AntPlusScanner class to handle scanning and state updates for multiple environment sensors.\n */\nexport class EnvironmentScanner extends AntPlusScanner {\n    /**\n     * Returns the device type code for Environment sensors.\n     *\n     * @protected\n     * @returns {number} The device type code for Environment sensors.\n     */\n    protected deviceType(): number {\n        return EnvironmentSensor.deviceType;\n    }\n\n    /**\n     * A dictionary to store the states of detected Environment sensors by their device ID.\n     * @private\n     * @type {{ [id: number]: EnvironmentScanState }}\n     */\n    private states: { [id: number]: EnvironmentScanState } = {};\n\n    /**\n     * Creates a new state entry for a sensor if it does not already exist.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @returns {void}\n     *\n     * @example\n     * scanner.createStateIfNew(12345); // Creates a new state for device ID 12345 if it does not exist.\n     */\n    protected createStateIfNew(deviceId: number): void {\n        if (!this.states[deviceId]) {\n            this.states[deviceId] = new EnvironmentScanState(deviceId);\n        }\n    }\n\n    /**\n     * Updates the RSSI (Received Signal Strength Indicator) and signal threshold for a specific sensor.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {number} rssi - The received signal strength indicator of the device.\n     * @param {number} threshold - The signal threshold value for the device.\n     * @returns {void}\n     *\n     * @example\n     * scanner.updateRssiAndThreshold(12345, -70, 30); // Updates the RSSI and threshold for device ID 12345.\n     */\n    protected updateRssiAndThreshold(deviceId: number, rssi: number, threshold: number): void {\n        this.states[deviceId].Rssi = rssi;\n        this.states[deviceId].Threshold = threshold;\n    }\n\n    /**\n     * Updates the state of a sensor based on incoming data.\n     *\n     * @protected\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @param {Buffer} data - The raw data buffer received from the sensor.\n     * @returns {void}\n     *\n     * @example\n     * const dataBuffer = getDataFromSensor(); // Assume this function gets data from a sensor\n     * scanner.updateState(12345, dataBuffer); // Updates the state for device ID 12345.\n     */\n    protected updateState(deviceId: number, data: Buffer): void {\n        updateState(this, this.states[deviceId], data);\n    }\n}\n"],"names":["Constants","static","Messages","resetSystem","payload","push","this","buildMessage","MESSAGE_SYSTEM_RESET","requestMessage","channel","messageId","concat","intToLEHexArray","MESSAGE_CHANNEL_REQUEST","setNetworkKey","DEFAULT_NETWORK_NUMBER","MESSAGE_NETWORK_KEY","assignChannel","type","CHANNEL_TYPE_TWOWAY_RECEIVE","CHANNEL_TYPE_ONEWAY_RECEIVE","CHANNEL_TYPE_SHARED_RECEIVE","CHANNEL_TYPE_TWOWAY_TRANSMIT","CHANNEL_TYPE_ONEWAY_TRANSMIT","Error","CHANNEL_TYPE_SHARED_TRANSMIT","MESSAGE_CHANNEL_ASSIGN","setDevice","deviceId","deviceType","transmissionType","MESSAGE_CHANNEL_ID","searchChannel","timeout","MESSAGE_CHANNEL_SEARCH_TIMEOUT","setPeriod","period","MESSAGE_CHANNEL_PERIOD","setFrequency","frequency","MESSAGE_CHANNEL_FREQUENCY","setRxExt","MESSAGE_ENABLE_RX_EXT","libConfig","how","MESSAGE_LIB_CONFIG","openRxScan","MESSAGE_CHANNEL_OPEN_RX_SCAN","openChannel","MESSAGE_CHANNEL_OPEN","closeChannel","MESSAGE_CHANNEL_CLOSE","unassignChannel","MESSAGE_CHANNEL_UNASSIGN","acknowledgedData","MESSAGE_CHANNEL_ACKNOWLEDGED_DATA","broadcastData","MESSAGE_CHANNEL_BROADCAST_DATA","message","MESSAGE_TX_SYNC","length","forEach","byte","getChecksum","Buffer","from","int","numBytes","a","b","decimalToHex","i","d","numDigits","hex","Number","toString","checksum","NodeUSBDriver","EventEmitter","idVendor","idProduct","webUsb","device","iface","detachedKernelDriver","inEndpoint","outEndpoint","leftover","usedChannels","attachedSensors","maxChannels","_canScan","constructor","debugOptions","super","setMaxListeners","usb","setDebugLevel","usbDebugLevel","canScan","Promise","resolve","open","devices","getDevices","shift","interfaces","isKernelDriverActive","detachKernelDriver","claim","close","undefined","deviceInUse","endpoints","on","data","onData","catch","error","console","err","startPoll","reset","detachAll","stopPoll","release","attachKernelDriver","emit","devIdx","indexOf","splice","listenerCount","read","readUInt8","MESSAGE_STARTUP","write","MESSAGE_CAPABILITIES","MESSAGE_CHANNEL_EVENT","reject","transfer","attach","sensor","forScan","detach","idx","isPresent","isScanning","getDeviceList","filter","deviceDescriptor","copy","len","beginBlock","slice","endBlock","readData","GarminStick2","GarminStick3","PageState","updateState","state","page","pageNum","BUFFER_INDEX_MSG_DATA","pageState","INIT_PAGE","STD_PAGE","oldPage","EXT_PAGE","OperatingTime","ManId","SerialNumber","DeviceId","readUInt16LE","HwVersion","SwVersion","ModelNum","PreviousBeat","IntervalAverage","IntervalMax","SessionAverage","SupportedFeatures","EnabledFeatures","batteryLevel","batteryFrac","batteryStatus","BatteryLevel","BatteryVoltage","BatteryStatus","pucPayload","BeatTime","BeatCount","ComputedHeartRate","DecodeDefaultHRM","HeartRateSensorState","HeartRateScannerState","Rssi","Threshold","BaseSensor","stick","messageQueue","decodeDataCbk","statusCbk","handleEventMessages","scan","onStatus","async","status","msg","MESSAGE_RF","code","EVENT_CHANNEL_CLOSED","EVENT_RX_FAIL_GO_TO_SEARCH","EVENT_TRANSFER_TX_COMPLETED","EVENT_TRANSFER_TX_FAILED","EVENT_RX_FAIL","INVALID_SCAN_TX_CHANNEL","mc","cbk","process","nextTick","TRANSFER_IN_PROGRESS","attachSensor","EVENT_CHANNEL_COLLISION","BUFFER_INDEX_MSG_TYPE","BUFFER_INDEX_CHANNEL_NUM","log","send","AntPlusBaseSensor","AntPlusSensor","decodeData","bind","MESSAGE_CHANNEL_BURST_DATA","HeartRateSensor","AntPlusScanner","BUFFER_INDEX_EXT_MSG_BEGIN","createStateIfNew","updateRssiAndThreshold","readInt8","HeartRateScanner","states","pages","rssi","threshold","TimeFractional","TimeInteger","DistanceInteger","DistanceFractional","SpeedInteger","SpeedFractional","StrideCount","UpdateLatency","CadenceInteger","CadenceFractional","Status","Calories","StrideSpeedDistanceSensorState","StrideSpeedDistanceScanState","StrideSpeedDistanceSensor","StrideSpeedDistanceScanner","oldCadenceTime","CadenceEventTime","oldCadenceCount","CumulativeCadenceRevolutionCount","oldSpeedTime","SpeedEventTime","oldSpeedCount","CumulativeSpeedRevolutionCount","cadenceTime","cadenceCount","speedEventTime","speedRevolutionCount","cadence","isNaN","CalculatedCadence","distance","wheelCircumference","CalculatedDistance","speed","CalculatedSpeed","SpeedCadenceSensorState","SpeedCadenceScanState","SpeedCadenceSensor","setWheelCircumference","SpeedCadenceScanner","Motion","SpeedSensorState","SpeedScanState","SpeedSensor","SpeedScanner","CadenceSensorState","CadenceScanState","CadenceSensor","CadenceScanner","offset","pedalPower","PedalPower","RightPedalPower","LeftPedalPower","Cadence","AccumulatedPower","Power","oldEventCount","EventCount","oldTimeStamp","TimeStamp","oldTorqueTicksStamp","TorqueTicksStamp","eventCount","slope","timeStamp","torqueTicksStamp","Slope","elapsedTime","torqueTicks","cadencePeriod","Math","round","torque","CalculatedTorque","CalculatedPower","PI","BicyclePowerSensorState","BicyclePowerScanState","BicyclePowerSensor","BicyclePowerScanner","resetState","ElapsedTime","Distance","RealSpeed","VirtualSpeed","HeartRate","HeartRateSource","CycleLength","Incline","Resistance","METs","CaloricBurnRate","_EventCount0x19","_EventCount0x1A","InstantaneousPower","AveragePower","TrainerStatus","TargetStatus","AscendedDistance","DescendedDistance","Strides","Strokes","WheelTicks","WheelPeriod","Torque","temperature","Temperature","calBF","ZeroOffset","SpinDownTime","EquipmentType","heartRate","capStateBF","oldElapsedTime","oldDistance","State","cycleLen","incline","readInt16LE","resistance","mets","caloricbr","calories","negDistance","posDistance","flagStateBF","oldNegDistance","oldPosDistance","strides","power","oldStrides","strokes","oldStrokes","accPower","trainerStatus","oldAccPower","wheelTicks","accWheelPeriod","accTorque","oldWheelTicks","oldWheelPeriod","oldTorque","swRevSup","swRevMain","serial","readInt32LE","tot","chState","devId","devType","PairedDevices","id","paired","FitnessEquipmentSensorState","FitnessEquipmentScanState","FitnessEquipmentSensor","setUserConfigurationInternal","userWeight","bikeWeight","wheelDiameter","gearRatio","m","max","min","df","mb","setUserConfiguration","userWeightOrCallback","setBasicResistance","setTargetPower","p","setWindResistanceInternal","windCoeff","windSpeed","draftFactor","setWindResistance","windCoeffOrCallback","setTrackResistanceInternal","rollingResistanceCoeff","s","setTrackResistance","slopeOrCallback","FitnessEquipmentScanner","_EventCount","notifications","capabilities","total","previous","current","UTCTimeRequired","SupportANTFS","MeasurementInterval","TotalHemoglobinConcentration","PreviousSaturatedHemoglobinPercentage","CurrentSaturatedHemoglobinPercentage","operatingTime","readUInt32LE","MuscleOxygenSensorState","MuscleOxygenScanState","MuscleOxygenSensor","_sendTimeCmd","cmd","now","Date","utc","getTime","UTC","getTimezoneOffset","setUTCTime","startSession","stopSession","setLap","MuscleOxygenScanner","EnvironmentSensorState","EnvironmentScanState","EnvironmentSensor","EnvironmentScanner"],"mappings":"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"}