{"version":3,"file":"index.cjs","sources":["../src/types/constants.ts","../src/utils/messages.ts","../src/core/driver/nodeUSBDriver.ts","../src/core/driver/usbDriverUtils.ts","../src/core/driver/webUSBDriver.ts","../src/sensors/heartRate/heartRateUtils.ts","../src/sensors/heartRate/heartRateSensorState.ts","../src/sensors/heartRate/heartRateScannerState.ts","../src/utils/customPolyfills.ts","../src/sensors/baseSensor.ts","../src/sensors/antPlusBaseSensor.ts","../src/sensors/antPlusSensor.ts","../src/sensors/heartRate/heartRateSensor.ts","../src/sensors/antPlusScanner.ts","../src/sensors/strideSpeedDistance/strideSpeedDistanceUtils.ts","../src/sensors/strideSpeedDistance/strideSpeedDistanceSensorState.ts","../src/sensors/strideSpeedDistance/strideSpeedDistanceScanState.ts","../src/sensors/strideSpeedDistance/strideSpeedDistanceSensor.ts","../src/sensors/speedCadence/speedCadenceUtils.ts","../src/sensors/speedCadence/speedCadenceSensorState.ts","../src/sensors/speedCadence/speedCadenceScanState.ts","../src/sensors/speedCadence/speedCadenceSensor.ts","../src/sensors/speed/speedUtils.ts","../src/sensors/speed/speedSensorState.ts","../src/sensors/speed/speedScanState.ts","../src/sensors/speed/speedSensor.ts","../src/sensors/cadence/cadenceUtils.ts","../src/sensors/cadence/cadenceSensorState.ts","../src/sensors/cadence/cadenceScanState.ts","../src/sensors/cadence/cadenceSensor.ts","../src/sensors/bicyclePower/bicyclePowerUtils.ts","../src/sensors/bicyclePower/bicyclePowerSensorState.ts","../src/sensors/bicyclePower/bicyclePowerScanState.ts","../src/sensors/bicyclePower/bicyclePowerSensor.ts","../src/sensors/fitnessEquipment/fitnessEquipmentUtils.ts","../src/sensors/fitnessEquipment/fitnessEquipmentSensorState.ts","../src/sensors/fitnessEquipment/fitnessEquipmentScanState.ts","../src/sensors/fitnessEquipment/fitnessEquipmentSensor.ts","../src/sensors/muscleOxygen/muscleOxygenUtils.ts","../src/sensors/muscleOxygen/muscleOxygenSensorState.ts","../src/sensors/muscleOxygen/muscleOxygenScanState.ts","../src/sensors/muscleOxygen/muscleOxygenSensor.ts","../src/sensors/environment/environmentUtils.ts","../src/sensors/environment/environmentSensorState.ts","../src/sensors/environment/environmentScanState.ts","../src/sensors/environment/environmentSensor.ts","../src/sensors/bicyclePower/bicyclePowerScanner.ts","../src/sensors/cadence/cadenceScanner.ts","../src/sensors/environment/environmentScanner.ts","../src/sensors/fitnessEquipment/fitnessEquipmentScanner.ts","../src/core/nodeUsbSticks.ts","../src/sensors/heartRate/heartRateScanner.ts","../src/sensors/muscleOxygen/muscleOxygenScanner.ts","../src/sensors/speedCadence/speedCadenceScanner.ts","../src/sensors/speed/speedScanner.ts","../src/sensors/strideSpeedDistance/strideSpeedDistanceScanner.ts","../src/core/webUsbStick.ts"],"sourcesContent":["/**\n * A collection of constants used in the ANT+ protocol for wireless communication.\n * These constants define various message types, configuration parameters, events,\n * and capabilities used to control and manage channels, transmit data, and handle\n * protocol-specific operations.\n *\n * @class Constants\n * @see {@link https://www.thisisant.com/developer/resources/downloads#documents} for the ANT+ protocol documentation.\n */\nexport class Constants {\n    // Message Types\n    /**\n     * Represents a generic Radio Frequency (RF) message type used in the ANT+ protocol.\n     * @type {number}\n     */\n    static readonly MESSAGE_RF: number = 0x01;\n\n    /**\n     * Represents a synchronization message used to align data transmission.\n     * @type {number}\n     */\n    static readonly MESSAGE_TX_SYNC: number = 0xa4;\n\n    /**\n     * Default network number used by ANT+ devices.\n     * @type {number}\n     */\n    static readonly DEFAULT_NETWORK_NUMBER: number = 0x00;\n\n    // Configuration Messages\n    /**\n     * Unassigns a channel, making it available for reassignment or closing.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_UNASSIGN: number = 0x41;\n\n    /**\n     * Assigns a channel with a specific type and network number.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_ASSIGN: number = 0x42;\n\n    /**\n     * Sets the unique identifier for a channel.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_ID: number = 0x51;\n\n    /**\n     * Configures the message period for a channel, defining the frequency of data messages.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_PERIOD: number = 0x43;\n\n    /**\n     * Sets the timeout period for channel searching operations.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_SEARCH_TIMEOUT: number = 0x44;\n\n    /**\n     * Configures the frequency of the channel in the RF spectrum.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_FREQUENCY: number = 0x45;\n\n    /**\n     * Sets the transmission power level for a specific channel.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_TX_POWER: number = 0x60;\n\n    /**\n     * Sets the network key for secure communication between ANT+ devices.\n     * @type {number}\n     */\n    static readonly MESSAGE_NETWORK_KEY: number = 0x46;\n\n    /**\n     * Defines the transmit power for the device.\n     * @type {number}\n     */\n    static readonly MESSAGE_TX_POWER: number = 0x47;\n\n    /**\n     * Enables proximity search for devices within a specified range.\n     * @type {number}\n     */\n    static readonly MESSAGE_PROXIMITY_SEARCH: number = 0x71;\n\n    /**\n     * Enables extended receive mode for handling additional data.\n     * @type {number}\n     */\n    static readonly MESSAGE_ENABLE_RX_EXT: number = 0x66;\n\n    /**\n     * Configures the library settings for ANT+ communication.\n     * @type {number}\n     */\n    static readonly MESSAGE_LIB_CONFIG: number = 0x6e;\n\n    /**\n     * Opens a channel for RX scan mode, allowing the device to search for broadcasts.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_OPEN_RX_SCAN: number = 0x5b;\n\n    // Notifications\n    /**\n     * Indicates a startup event, typically sent after a device reset or initialization.\n     * @type {number}\n     */\n    static readonly MESSAGE_STARTUP: number = 0x6f;\n\n    // Control Messages\n    /**\n     * Resets the ANT+ device system.\n     * @type {number}\n     */\n    static readonly MESSAGE_SYSTEM_RESET: number = 0x4a;\n\n    /**\n     * Opens a communication channel for data transmission.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_OPEN: number = 0x4b;\n\n    /**\n     * Closes a previously opened communication channel.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_CLOSE: number = 0x4c;\n\n    /**\n     * Requests a specific operation or status update for a channel.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_REQUEST: number = 0x4d;\n\n    // Data Messages\n    /**\n     * Transmits broadcast data over an open channel.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_BROADCAST_DATA: number = 0x4e;\n\n    /**\n     * Sends acknowledged data that requires a response confirmation.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_ACKNOWLEDGED_DATA: number = 0x4f;\n\n    /**\n     * Sends burst data packets over a channel, useful for high-throughput scenarios.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_BURST_DATA: number = 0x50;\n\n    // Channel Event Messages\n    /**\n     * Represents various events occurring on a channel, such as RX or TX completion.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_EVENT: number = 0x40;\n\n    // Requested Response Messages\n    /**\n     * Queries the status of a channel, returning details like state or assigned ID.\n     * @type {number}\n     */\n    static readonly MESSAGE_CHANNEL_STATUS: number = 0x52;\n\n    /**\n     * Retrieves the version of the ANT+ device software or protocol.\n     * @type {number}\n     */\n    static readonly MESSAGE_VERSION: number = 0x3e;\n\n    /**\n     * Retrieves the capabilities of the ANT+ device, such as supported features.\n     * @type {number}\n     */\n    static readonly MESSAGE_CAPABILITIES: number = 0x54;\n\n    /**\n     * Retrieves the unique serial number of the ANT+ device.\n     * @type {number}\n     */\n    static readonly MESSAGE_SERIAL_NUMBER: number = 0x61;\n\n    // Message Parameters\n    /**\n     * Channel type for two-way data reception.\n     * @type {number}\n     */\n    static readonly CHANNEL_TYPE_TWOWAY_RECEIVE: number = 0x00;\n\n    /**\n     * Channel type for two-way data transmission.\n     * @type {number}\n     */\n    static readonly CHANNEL_TYPE_TWOWAY_TRANSMIT: number = 0x10;\n\n    /**\n     * Channel type for shared data reception.\n     * @type {number}\n     */\n    static readonly CHANNEL_TYPE_SHARED_RECEIVE: number = 0x20;\n\n    /**\n     * Channel type for shared data transmission.\n     * @type {number}\n     */\n    static readonly CHANNEL_TYPE_SHARED_TRANSMIT: number = 0x30;\n\n    /**\n     * Channel type for one-way data reception.\n     * @type {number}\n     */\n    static readonly CHANNEL_TYPE_ONEWAY_RECEIVE: number = 0x40;\n\n    /**\n     * Channel type for one-way data transmission.\n     * @type {number}\n     */\n    static readonly CHANNEL_TYPE_ONEWAY_TRANSMIT: number = 0x50;\n\n    /**\n     * Radio transmit power level: -20 dB.\n     * @type {number}\n     */\n    static readonly RADIO_TX_POWER_MINUS20DB: number = 0x00;\n\n    /**\n     * Radio transmit power level: -10 dB.\n     * @type {number}\n     */\n    static readonly RADIO_TX_POWER_MINUS10DB: number = 0x01;\n\n    /**\n     * Radio transmit power level: 0 dB.\n     * @type {number}\n     */\n    static readonly RADIO_TX_POWER_0DB: number = 0x02;\n\n    /**\n     * Radio transmit power level: +4 dB.\n     * @type {number}\n     */\n    static readonly RADIO_TX_POWER_PLUS4DB: number = 0x03;\n\n    // Event Codes\n    /**\n     * No error occurred in the response.\n     * @type {number}\n     */\n    static readonly RESPONSE_NO_ERROR: number = 0x00;\n\n    /**\n     * RX search timed out.\n     * @type {number}\n     */\n    static readonly EVENT_RX_SEARCH_TIMEOUT: number = 0x01;\n\n    /**\n     * RX failed.\n     * @type {number}\n     */\n    static readonly EVENT_RX_FAIL: number = 0x02;\n\n    /**\n     * TX completed successfully.\n     * @type {number}\n     */\n    static readonly EVENT_TX: number = 0x03;\n\n    /**\n     * Transfer RX failed.\n     * @type {number}\n     */\n    static readonly EVENT_TRANSFER_RX_FAILED: number = 0x04;\n\n    /**\n     * Transfer TX completed successfully.\n     * @type {number}\n     */\n    static readonly EVENT_TRANSFER_TX_COMPLETED: number = 0x05;\n\n    /**\n     * Transfer TX failed.\n     * @type {number}\n     */\n    static readonly EVENT_TRANSFER_TX_FAILED: number = 0x06;\n\n    /**\n     * Channel was closed.\n     * @type {number}\n     */\n    static readonly EVENT_CHANNEL_CLOSED: number = 0x07;\n\n    /**\n     * RX failed; channel will go to search.\n     * @type {number}\n     */\n    static readonly EVENT_RX_FAIL_GO_TO_SEARCH: number = 0x08;\n\n    /**\n     * Channel collision detected.\n     * @type {number}\n     */\n    static readonly EVENT_CHANNEL_COLLISION: number = 0x09;\n\n    /**\n     * Transfer TX started.\n     * @type {number}\n     */\n    static readonly EVENT_TRANSFER_TX_START: number = 0x0a;\n\n    // Error and State Codes\n    /**\n     * Channel is in the wrong state for the requested operation.\n     * @type {number}\n     */\n    static readonly CHANNEL_IN_WRONG_STATE: number = 0x15;\n\n    /**\n     * Channel is not opened.\n     * @type {number}\n     */\n    static readonly CHANNEL_NOT_OPENED: number = 0x16;\n\n    /**\n     * Channel ID is not set.\n     * @type {number}\n     */\n    static readonly CHANNEL_ID_NOT_SET: number = 0x18;\n\n    /**\n     * Command to close all channels.\n     * @type {number}\n     */\n    static readonly CLOSE_ALL_CHANNELS: number = 0x19;\n\n    /**\n     * Transfer is currently in progress.\n     * @type {number}\n     */\n    static readonly TRANSFER_IN_PROGRESS: number = 0x1f;\n\n    /**\n     * Transfer sequence number error.\n     * @type {number}\n     */\n    static readonly TRANSFER_SEQUENCE_NUMBER_ERROR: number = 0x20;\n\n    /**\n     * Transfer is in an error state.\n     * @type {number}\n     */\n    static readonly TRANSFER_IN_ERROR: number = 0x21;\n\n    /**\n     * Message size exceeds allowed limit.\n     * @type {number}\n     */\n    static readonly MESSAGE_SIZE_EXCEEDS_LIMIT: number = 0x27;\n\n    /**\n     * Invalid message received.\n     * @type {number}\n     */\n    static readonly INVALID_MESSAGE: number = 0x28;\n\n    /**\n     * Invalid network number provided.\n     * @type {number}\n     */\n    static readonly INVALID_NETWORK_NUMBER: number = 0x29;\n\n    /**\n     * Invalid list ID provided.\n     * @type {number}\n     */\n    static readonly INVALID_LIST_ID: number = 0x30;\n\n    /**\n     * Invalid scan TX channel specified.\n     * @type {number}\n     */\n    static readonly INVALID_SCAN_TX_CHANNEL: number = 0x31;\n\n    /**\n     * Invalid parameter provided for a message or operation.\n     * @type {number}\n     */\n    static readonly INVALID_PARAMETER_PROVIDED: number = 0x33;\n\n    /**\n     * Event queue overflow occurred.\n     * @type {number}\n     */\n    static readonly EVENT_QUEUE_OVERFLOW: number = 0x35;\n\n    /**\n     * USB string write operation failed.\n     * @type {number}\n     */\n    static readonly USB_STRING_WRITE_FAIL: number = 0x70;\n\n    // Channel States\n    /**\n     * Channel is unassigned.\n     * @type {number}\n     */\n    static readonly CHANNEL_STATE_UNASSIGNED: number = 0x00;\n\n    /**\n     * Channel is assigned.\n     * @type {number}\n     */\n    static readonly CHANNEL_STATE_ASSIGNED: number = 0x01;\n\n    /**\n     * Channel is searching for another device.\n     * @type {number}\n     */\n    static readonly CHANNEL_STATE_SEARCHING: number = 0x02;\n\n    /**\n     * Channel is tracking another device.\n     * @type {number}\n     */\n    static readonly CHANNEL_STATE_TRACKING: number = 0x03;\n\n    // Capability Flags\n    /**\n     * Device has no receive channels.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_NO_RECEIVE_CHANNELS: number = 0x01;\n\n    /**\n     * Device has no transmit channels.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_NO_TRANSMIT_CHANNELS: number = 0x02;\n\n    /**\n     * Device has no receive message capability.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_NO_RECEIVE_MESSAGES: number = 0x04;\n\n    /**\n     * Device has no transmit message capability.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_NO_TRANSMIT_MESSAGES: number = 0x08;\n\n    /**\n     * Device has no acknowledged message capability.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_NO_ACKNOWLEDGED_MESSAGES: number = 0x10;\n\n    /**\n     * Device has no burst message capability.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_NO_BURST_MESSAGES: number = 0x20;\n\n    /**\n     * Device supports network communication.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_NETWORK_ENABLED: number = 0x02;\n\n    /**\n     * Device serial number feature enabled.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_SERIAL_NUMBER_ENABLED: number = 0x08;\n\n    /**\n     * Per-channel transmit power adjustment enabled.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_PER_CHANNEL_TX_POWER_ENABLED: number = 0x10;\n\n    /**\n     * Low priority search capability enabled.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_LOW_PRIORITY_SEARCH_ENABLED: number = 0x20;\n\n    /**\n     * Script feature enabled.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_SCRIPT_ENABLED: number = 0x40;\n\n    /**\n     * Search list capability enabled.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_SEARCH_LIST_ENABLED: number = 0x80;\n\n    /**\n     * LED feature enabled.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_LED_ENABLED: number = 0x01;\n\n    /**\n     * Extended messaging enabled.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_EXT_MESSAGE_ENABLED: number = 0x02;\n\n    /**\n     * Scan mode enabled.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_SCAN_MODE_ENABLED: number = 0x04;\n\n    /**\n     * Proximity search capability enabled.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_PROX_SEARCH_ENABLED: number = 0x10;\n\n    /**\n     * Extended channel assignment enabled.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_EXT_ASSIGN_ENABLED: number = 0x20;\n\n    /**\n     * File share (ANT-FS) feature enabled.\n     * @type {number}\n     */\n    static readonly CAPABILITIES_FS_ANTFS_ENABLED: number = 0x40;\n\n    // Miscellaneous\n    /**\n     * Special value indicating that the timeout for an operation is set to never expire.\n     * @type {number}\n     */\n    static readonly TIMEOUT_NEVER: number = 0xff;\n}\n","import { Constants } from \"../types/constants.js\";\r\n\r\nexport class Messages {\r\n    static BUFFER_INDEX_MSG_LEN: number = 1;\r\n    static BUFFER_INDEX_MSG_TYPE: number = 2;\r\n    static BUFFER_INDEX_CHANNEL_NUM: number = 3;\r\n    static BUFFER_INDEX_MSG_DATA: number = 4;\r\n    static BUFFER_INDEX_EXT_MSG_BEGIN: number = 12;\r\n\r\n    static resetSystem(): Uint8Array {\r\n        const payload: number[] = [];\r\n        payload.push(0x00);\r\n        return this.buildMessage(payload, Constants.MESSAGE_SYSTEM_RESET);\r\n    }\r\n\r\n    static requestMessage(channel: number, messageId: number): Uint8Array {\r\n        let payload: number[] = [];\r\n        payload = payload.concat(this.intToLEHexArray(channel));\r\n        payload.push(messageId);\r\n        return this.buildMessage(payload, Constants.MESSAGE_CHANNEL_REQUEST);\r\n    }\r\n\r\n    static setNetworkKey(): Uint8Array {\r\n        const payload: number[] = [];\r\n        payload.push(Constants.DEFAULT_NETWORK_NUMBER);\r\n        payload.push(0xb9);\r\n        payload.push(0xa5);\r\n        payload.push(0x21);\r\n        payload.push(0xfb);\r\n        payload.push(0xbd);\r\n        payload.push(0x72);\r\n        payload.push(0xc3);\r\n        payload.push(0x45);\r\n        return this.buildMessage(payload, Constants.MESSAGE_NETWORK_KEY);\r\n    }\r\n\r\n    static assignChannel(channel: number, type = \"receive\"): Uint8Array {\r\n        let payload: number[] = [];\r\n        payload = payload.concat(this.intToLEHexArray(channel));\r\n        if (type === \"receive\") {\r\n            payload.push(Constants.CHANNEL_TYPE_TWOWAY_RECEIVE);\r\n        } else if (type === \"receive_only\") {\r\n            payload.push(Constants.CHANNEL_TYPE_ONEWAY_RECEIVE);\r\n        } else if (type === \"receive_shared\") {\r\n            payload.push(Constants.CHANNEL_TYPE_SHARED_RECEIVE);\r\n        } else if (type === \"transmit\") {\r\n            payload.push(Constants.CHANNEL_TYPE_TWOWAY_TRANSMIT);\r\n        } else if (type === \"transmit_only\") {\r\n            payload.push(Constants.CHANNEL_TYPE_ONEWAY_TRANSMIT);\r\n        } else if (type === \"transmit_shared\") {\r\n            payload.push(Constants.CHANNEL_TYPE_SHARED_TRANSMIT);\r\n        } else {\r\n            throw new Error(\"type not allowed\");\r\n        }\r\n        payload.push(Constants.DEFAULT_NETWORK_NUMBER);\r\n        return this.buildMessage(payload, Constants.MESSAGE_CHANNEL_ASSIGN);\r\n    }\r\n\r\n    static setDevice(channel: number, deviceId: number, deviceType: number, transmissionType: number): Uint8Array {\r\n        let payload: number[] = [];\r\n        payload = payload.concat(this.intToLEHexArray(channel));\r\n        payload = payload.concat(this.intToLEHexArray(deviceId, 2));\r\n        payload = payload.concat(this.intToLEHexArray(deviceType));\r\n        payload = payload.concat(this.intToLEHexArray(transmissionType));\r\n        return this.buildMessage(payload, Constants.MESSAGE_CHANNEL_ID);\r\n    }\r\n\r\n    static searchChannel(channel: number, timeout: number): Uint8Array {\r\n        let payload: number[] = [];\r\n        payload = payload.concat(this.intToLEHexArray(channel));\r\n        payload = payload.concat(this.intToLEHexArray(timeout));\r\n        return this.buildMessage(payload, Constants.MESSAGE_CHANNEL_SEARCH_TIMEOUT);\r\n    }\r\n\r\n    static setPeriod(channel: number, period: number): Uint8Array {\r\n        let payload: number[] = [];\r\n        payload = payload.concat(this.intToLEHexArray(channel));\r\n        payload = payload.concat(this.intToLEHexArray(period));\r\n        return this.buildMessage(payload, Constants.MESSAGE_CHANNEL_PERIOD);\r\n    }\r\n\r\n    static setFrequency(channel: number, frequency: number): Uint8Array {\r\n        let payload: number[] = [];\r\n        payload = payload.concat(this.intToLEHexArray(channel));\r\n        payload = payload.concat(this.intToLEHexArray(frequency));\r\n        return this.buildMessage(payload, Constants.MESSAGE_CHANNEL_FREQUENCY);\r\n    }\r\n\r\n    static setRxExt(): Uint8Array {\r\n        let payload: number[] = [];\r\n        payload = payload.concat(this.intToLEHexArray(0));\r\n        payload = payload.concat(this.intToLEHexArray(1));\r\n        return this.buildMessage(payload, Constants.MESSAGE_ENABLE_RX_EXT);\r\n    }\r\n\r\n    static libConfig(channel: number, how: number): Uint8Array {\r\n        let payload: number[] = [];\r\n        payload = payload.concat(this.intToLEHexArray(channel));\r\n        payload = payload.concat(this.intToLEHexArray(how));\r\n        return this.buildMessage(payload, Constants.MESSAGE_LIB_CONFIG);\r\n    }\r\n\r\n    static openRxScan(): Uint8Array {\r\n        let payload: number[] = [];\r\n        payload = payload.concat(this.intToLEHexArray(0));\r\n        payload = payload.concat(this.intToLEHexArray(1));\r\n        return this.buildMessage(payload, Constants.MESSAGE_CHANNEL_OPEN_RX_SCAN);\r\n    }\r\n\r\n    static openChannel(channel: number): Uint8Array {\r\n        let payload: number[] = [];\r\n        payload = payload.concat(this.intToLEHexArray(channel));\r\n        return this.buildMessage(payload, Constants.MESSAGE_CHANNEL_OPEN);\r\n    }\r\n\r\n    static closeChannel(channel: number): Uint8Array {\r\n        let payload: number[] = [];\r\n        payload = payload.concat(this.intToLEHexArray(channel));\r\n        return this.buildMessage(payload, Constants.MESSAGE_CHANNEL_CLOSE);\r\n    }\r\n\r\n    static unassignChannel(channel: number): Uint8Array {\r\n        let payload: number[] = [];\r\n        payload = payload.concat(this.intToLEHexArray(channel));\r\n        return this.buildMessage(payload, Constants.MESSAGE_CHANNEL_UNASSIGN);\r\n    }\r\n\r\n    static acknowledgedData(channel: number, payload: number[]): Uint8Array {\r\n        payload = this.intToLEHexArray(channel).concat(payload);\r\n        return this.buildMessage(payload, Constants.MESSAGE_CHANNEL_ACKNOWLEDGED_DATA);\r\n    }\r\n\r\n    static broadcastData(channel: number, payload: number[]): Uint8Array {\r\n        payload = this.intToLEHexArray(channel).concat(payload);\r\n        return this.buildMessage(payload, Constants.MESSAGE_CHANNEL_BROADCAST_DATA);\r\n    }\r\n\r\n    static buildMessage(payload: number[] = [], messageId = 0x00): Uint8Array {\r\n        const message: number[] = [];\r\n        message.push(Constants.MESSAGE_TX_SYNC);\r\n        message.push(payload.length);\r\n        message.push(messageId);\r\n        payload.forEach((byte) => {\r\n            message.push(byte);\r\n        });\r\n        message.push(this.getChecksum(message));\r\n\r\n        return new Uint8Array(message);\r\n    }\r\n\r\n    static intToLEHexArray(int: number, numBytes = 1): number[] {\r\n        numBytes = numBytes || 1;\r\n        const a: number[] = [];\r\n        const hexString = this.decimalToHex(int, numBytes * 2);\r\n        for (let i = hexString.length - 2; i >= 0; i -= 2) {\r\n            a.push(parseInt(hexString.substr(i, 2), 16));\r\n        }\r\n        return a;\r\n    }\r\n\r\n    static decimalToHex(d: number, numDigits: number): string {\r\n        let hex = Number(d).toString(16);\r\n        numDigits = numDigits || 2;\r\n        while (hex.length < numDigits) {\r\n            hex = \"0\" + hex;\r\n        }\r\n\r\n        return hex;\r\n    }\r\n\r\n    static getChecksum(message: number[]): number {\r\n        let checksum = 0;\r\n        message.forEach((byte) => {\r\n            checksum = (checksum ^ byte) % 0xff;\r\n        });\r\n\r\n        return checksum;\r\n    }\r\n}\r\n","import { BaseSensor } from \"../../sensors/baseSensor\";\r\nimport { Constants } from \"../../types/constants\";\r\nimport { DebugOptions } from \"../../types/debugOptions\";\r\nimport { USBDriverBase } from \"../../types/usbDriverBase\";\r\nimport { Messages } from \"../../utils/messages\";\r\nimport EventEmitter from \"events\";\r\nimport usb, { LibUSBException } from \"usb\";\r\n\r\n/**\r\n * NodeUSBDriver class handles the connection and communication with USB devices using the node-usb library.\r\n * It manages device setup, communication, sensor attachment, and data processing.\r\n *\r\n * This class extends EventEmitter to handle events and implements the USBDriverBase interface.\r\n *\r\n * @extends EventEmitter\r\n * @implements USBDriverBase\r\n */\r\nexport class NodeUSBDriver extends EventEmitter implements USBDriverBase {\r\n    /**\r\n     * List of USB devices currently in use.\r\n     * Tracks all connected devices used by this driver.\r\n     *\r\n     * @type {usb.Device[]}\r\n     * @private\r\n     */\r\n    private static deviceInUse: usb.Device[] = [];\r\n\r\n    /**\r\n     * The USB device instance.\r\n     * Holds a reference to the connected USB device, if any.\r\n     *\r\n     * @type {usb.Device|undefined}\r\n     * @private\r\n     */\r\n    private device: usb.Device | undefined;\r\n\r\n    /**\r\n     * The USB interface of the device.\r\n     * Used to interact with the endpoints of the connected USB device.\r\n     *\r\n     * @type {usb.Interface|undefined}\r\n     * @private\r\n     */\r\n    private iface: usb.Interface | undefined;\r\n\r\n    /**\r\n     * Indicates if the kernel driver was detached.\r\n     * Marks whether the kernel driver was detached during setup for re-attachment upon disconnection.\r\n     *\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    private detachedKernelDriver = false;\r\n\r\n    /**\r\n     * The input endpoint for reading data.\r\n     * Used for receiving data from the USB device.\r\n     *\r\n     * @type {(usb.InEndpoint & EventEmitter)|undefined}\r\n     * @private\r\n     */\r\n    private inEndpoint: (usb.InEndpoint & EventEmitter) | undefined;\r\n\r\n    /**\r\n     * The output endpoint for sending data.\r\n     * Used for sending data to the USB device.\r\n     *\r\n     * @type {(usb.OutEndpoint & EventEmitter)|undefined}\r\n     * @private\r\n     */\r\n    private outEndpoint: (usb.OutEndpoint & EventEmitter) | undefined;\r\n\r\n    /**\r\n     * Stores leftover data from previous reads.\r\n     * Used to buffer partial data when reading from the USB device.\r\n     *\r\n     * @type {Uint8Array|undefined}\r\n     * @private\r\n     */\r\n    private leftover: Uint8Array | undefined;\r\n\r\n    /**\r\n     * The number of channels currently used.\r\n     * Tracks how many channels are actively being used.\r\n     *\r\n     * @type {number}\r\n     */\r\n    usedChannels: number = 0;\r\n\r\n    /**\r\n     * List of attached sensors.\r\n     * Holds the list of sensors currently connected to the USB driver.\r\n     *\r\n     * @type {BaseSensor[]}\r\n     * @private\r\n     */\r\n    private attachedSensors: BaseSensor[] = [];\r\n\r\n    /**\r\n     * The maximum number of channels available for communication.\r\n     * Defines the total number of channels the device can handle.\r\n     *\r\n     * @type {number}\r\n     */\r\n    maxChannels: number = 0;\r\n\r\n    /**\r\n     * Indicates if the device can scan for channels.\r\n     * Represents whether the USB device has scanning capabilities.\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    _canScan: boolean = false;\r\n\r\n    /**\r\n     * Defines whether to throw LibUSB exceptions when errors occur during USB communication.\r\n     * Default value is set to `false`.\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    throwLibUSBException: boolean = false;\r\n\r\n    /**\r\n     * Creates an instance of NodeUSBDriver.\r\n     * Initializes the driver with vendor ID, product ID, and optional debug options.\r\n     *\r\n     * @param {number} idVendor - The vendor ID of the USB device.\r\n     * @param {number} idProduct - The product ID of the USB device.\r\n     * @param {DebugOptions} [debugOptions={}] - Optional debug options for USB operations.\r\n     *                                          Includes usbDebugLevel and throwLibUSBException.\r\n     *\r\n     * @example\r\n     * const driver = new NodeUSBDriver(0x1234, 0x5678, { usbDebugLevel: 2, throwLibUSBException: true });\r\n     */\r\n    constructor(\r\n        private idVendor: number,\r\n        private idProduct: number,\r\n        debugOptions: DebugOptions = {}\r\n    ) {\r\n        super();\r\n        this.setMaxListeners(50); // Set maximum number of listeners to 50\r\n        usb.usb.setDebugLevel(debugOptions.usbDebugLevel || 0); // Set USB debug level\r\n        this.throwLibUSBException = debugOptions.throwLibUSBException || false; // Set exception throwing option\r\n    }\r\n\r\n    /**\r\n     * Checks if a new sensor can be attached to the driver.\r\n     * It verifies whether the current number of used channels is less than the maximum available channels.\r\n     *\r\n     * @returns {Promise<boolean>} Resolves with true if a new sensor can be attached, otherwise false.\r\n     *\r\n     * @example\r\n     * const canAttach = await this.stick.canAttach();\r\n     * if (canAttach) {\r\n     *   console.log(\"A new sensor can be attached.\");\r\n     * } else {\r\n     *   console.log(\"Cannot attach sensor: Maximum number of channels reached.\");\r\n     * }\r\n     */\r\n    async canAttach(): Promise<boolean> {\r\n        return Promise.resolve(this.usedChannels < this.maxChannels);\r\n    }\r\n\r\n    /**\r\n     * Checks if the device can scan for channels.\r\n     *\r\n     * @returns {Promise<boolean>} Resolves with true if the device can scan, otherwise false.\r\n     */\r\n    async canScan(): Promise<boolean> {\r\n        return Promise.resolve(this._canScan);\r\n    }\r\n\r\n    /**\r\n     * Opens a connection to the USB device and sets up endpoints for communication.\r\n     *\r\n     * @returns {Promise<boolean>} Resolves with true if the device is successfully opened, otherwise false.\r\n     * @example\r\n     * const driver = new NodeUSBDriver(1234, 5678);\r\n     * driver.open().then((result) => {\r\n     *   if (result) {\r\n     *     console.log(\"Device successfully opened\");\r\n     *   } else {\r\n     *     console.error(\"Failed to open device\");\r\n     *   }\r\n     * });\r\n     */\r\n    async open(): Promise<boolean> {\r\n        const devices = this.getDevices();\r\n\r\n        while (devices.length) {\r\n            try {\r\n                const device = devices.shift();\r\n                if (!device) {\r\n                    continue;\r\n                }\r\n\r\n                this.device = device;\r\n                this.device.open();\r\n                this.iface = this.device.interfaces![0];\r\n\r\n                try {\r\n                    if (this.iface && this.iface.isKernelDriverActive()) {\r\n                        this.detachedKernelDriver = true;\r\n                        this.iface.detachKernelDriver();\r\n                    }\r\n                } catch {\r\n                    // Ignore kernel driver errors\r\n                }\r\n\r\n                this.iface.claim();\r\n                break;\r\n            } catch (error) {\r\n                if (error instanceof LibUSBException && this.throwLibUSBException) {\r\n                    switch (error.errno) {\r\n                        case usb.usb.LIBUSB_ERROR_ACCESS:\r\n                            throw new Error(\"LIBUSB_ERROR_ACCESS: Access denied (insufficient permissions)\");\r\n                        case usb.usb.LIBUSB_ERROR_NO_DEVICE:\r\n                            throw new Error(\"LIBUSB_ERROR_NO_DEVICE: Device has been disconnected\");\r\n                        case usb.usb.LIBUSB_ERROR_BUSY:\r\n                            throw new Error(\"LIBUSB_ERROR_BUSY: Resource busy\");\r\n                        default:\r\n                            console.error(\"Unknown LIBUSB error:\", error);\r\n                            break;\r\n                    }\r\n                } else {\r\n                    // Ignore errors and try with the next device\r\n                }\r\n\r\n                if (this.device) {\r\n                    this.device.close();\r\n                }\r\n                this.device = undefined;\r\n                this.iface = undefined;\r\n            }\r\n        }\r\n\r\n        if (!this.device) {\r\n            return Promise.resolve(false);\r\n        }\r\n\r\n        NodeUSBDriver.deviceInUse.push(this.device);\r\n\r\n        if (!this.iface) {\r\n            throw new Error(\"Interface not initialized.\");\r\n        }\r\n\r\n        this.inEndpoint = this.iface.endpoints[0] as usb.InEndpoint;\r\n        this.inEndpoint.on(\"data\", (data: Uint8Array) => {\r\n            this.onData(data).catch((error) => {\r\n                console.error(error);\r\n            });\r\n        });\r\n\r\n        this.inEndpoint.on(\"error\", (err: Error) => {\r\n            console.error(\"ERROR RECV: \", err);\r\n        });\r\n\r\n        this.inEndpoint.on(\"end\", () => {\r\n            //console.info(\"STOP RECV\");\r\n        });\r\n\r\n        this.inEndpoint.startPoll();\r\n\r\n        this.outEndpoint = this.iface.endpoints[1] as usb.OutEndpoint;\r\n\r\n        await this.reset();\r\n\r\n        return Promise.resolve(true);\r\n    }\r\n\r\n    /**\r\n     * Closes the connection to the USB device and releases the interface.\r\n     *\r\n     * @returns {Promise<void>} Resolves when the device is closed.\r\n     * @example\r\n     * const driver = new NodeUSBDriver(1234, 5678);\r\n     * driver.open().then(() => {\r\n     *   driver.close().then(() => console.log(\"Device closed\"));\r\n     * });\r\n     */\r\n    async close(): Promise<void> {\r\n        await this.detachAll();\r\n\r\n        if (this.inEndpoint) {\r\n            this.inEndpoint.stopPoll(() => {\r\n                if (this.iface) {\r\n                    this.iface.release(true, () => {\r\n                        if (this.detachedKernelDriver) {\r\n                            this.detachedKernelDriver = false;\r\n                            try {\r\n                                this.iface?.attachKernelDriver();\r\n                            } catch {\r\n                                // Ignore kernel driver errors\r\n                            }\r\n                        }\r\n                        this.iface = undefined;\r\n                        if (this.device) {\r\n                            this.device.reset(() => {\r\n                                this.device?.close();\r\n                                this.emit(\"shutdown\");\r\n                                const devIdx = NodeUSBDriver.deviceInUse.indexOf(this.device!);\r\n                                if (devIdx >= 0) {\r\n                                    NodeUSBDriver.deviceInUse.splice(devIdx, 1);\r\n                                }\r\n                                if (usb.usb.listenerCount(\"attach\")) {\r\n                                    usb.usb.emit(\"attach\", this.device!);\r\n                                }\r\n                                this.device = undefined;\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reads data from the USB device and processes it.\r\n     *\r\n     * @param {Uint8Array} data - The data received from the USB device.\r\n     * @returns {Promise<void>} Resolves when the data has been processed.\r\n     * @example\r\n     * const data = new Uint8Array([0x01, 0x02, 0x03]);\r\n     * driver.read(data).then(() => console.log(\"Data processed\"));\r\n     */\r\n    async read(data: Uint8Array): Promise<void> {\r\n        const dataView = new DataView(data.buffer);\r\n        const messageId = dataView.getUint8(2);\r\n\r\n        if (messageId === Constants.MESSAGE_STARTUP) {\r\n            await this.write(Messages.requestMessage(0, Constants.MESSAGE_CAPABILITIES));\r\n        } else if (messageId === Constants.MESSAGE_CAPABILITIES) {\r\n            this.maxChannels = dataView.getUint8(3);\r\n            this._canScan = (dataView.getUint8(7) & 0x06) === 0x06;\r\n            await this.write(Messages.setNetworkKey());\r\n        } else if (messageId === Constants.MESSAGE_CHANNEL_EVENT && dataView.getUint8(4) === Constants.MESSAGE_NETWORK_KEY) {\r\n            this.emit(\"startup\", data);\r\n        } else {\r\n            this.emit(\"read\", data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Writes data to the USB device.\r\n     *\r\n     * @param {Uint8Array} data - The data to be sent to the USB device.\r\n     * @returns {Promise<void>} Resolves when the data has been written.\r\n     * @example\r\n     * const data = new Uint8Array([0x01, 0x02, 0x03]);\r\n     * driver.write(data).then(() => console.log(\"Data sent\"));\r\n     */\r\n    async write(data: Uint8Array): Promise<void> {\r\n        await new Promise<void>((resolve, reject) => {\r\n            if (this.outEndpoint) {\r\n                this.outEndpoint.transfer(Buffer.from(data), (error) => {\r\n                    if (error) {\r\n                        console.error(\"ERROR SEND: \", error);\r\n                        reject(error);\r\n                    } else {\r\n                        resolve();\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Resets the device and its channels, and sends a reset message to the system.\r\n     *\r\n     * @returns {Promise<void>} Resolves when the reset is completed.\r\n     * @example\r\n     * driver.reset().then(() => console.log(\"Device reset\"));\r\n     */\r\n    async reset(): Promise<void> {\r\n        await this.detachAll();\r\n        this.maxChannels = 0;\r\n        this.usedChannels = 0;\r\n        await this.write(Messages.resetSystem());\r\n    }\r\n\r\n    /**\r\n     * Attaches a sensor to the driver and assigns it a channel.\r\n     *\r\n     * @param {BaseSensor} sensor - The sensor to attach.\r\n     * @param {boolean} forScan - Whether the sensor is being attached for scanning.\r\n     * @returns {Promise<boolean>} Resolves with true if the sensor was successfully attached, otherwise false.\r\n     * @example\r\n     * const sensor = new BaseSensor();\r\n     * driver.attach(sensor, true).then((attached) => {\r\n     *   if (attached) console.log(\"Sensor attached\");\r\n     * });\r\n     */\r\n    async attach(sensor: BaseSensor, forScan: boolean): Promise<boolean> {\r\n        if (this.usedChannels < 0) {\r\n            return Promise.resolve(false);\r\n        }\r\n\r\n        if (forScan && this.usedChannels !== 0) {\r\n            return Promise.resolve(false);\r\n        }\r\n\r\n        if (!forScan && this.maxChannels <= this.usedChannels) {\r\n            return Promise.resolve(false);\r\n        }\r\n\r\n        this.usedChannels = forScan ? -1 : this.usedChannels + 1;\r\n        this.attachedSensors.push(sensor);\r\n\r\n        return Promise.resolve(true);\r\n    }\r\n\r\n    /**\r\n     * Detaches a sensor from the driver.\r\n     *\r\n     * @param {BaseSensor} sensor - The sensor to detach.\r\n     * @returns {Promise<boolean>} Resolves with true if the sensor was successfully detached, otherwise false.\r\n     * @example\r\n     * const sensor = new BaseSensor();\r\n     * driver.detach(sensor).then((detached) => {\r\n     *   if (detached) console.log(\"Sensor detached\");\r\n     * });\r\n     */\r\n    async detach(sensor: BaseSensor): Promise<boolean> {\r\n        const idx = this.attachedSensors.indexOf(sensor);\r\n        if (idx < 0) {\r\n            return Promise.resolve(false);\r\n        }\r\n\r\n        this.usedChannels = this.usedChannels < 0 ? 0 : this.usedChannels - 1;\r\n        this.attachedSensors.splice(idx, 1);\r\n\r\n        return Promise.resolve(true);\r\n    }\r\n\r\n    /**\r\n     * Checks if a USB device is present.\r\n     *\r\n     * @returns {Promise<boolean>} Resolves with true if a device is present, otherwise false.\r\n     */\r\n    async isPresent(): Promise<boolean> {\r\n        return Promise.resolve(this.getDevices().length > 0);\r\n    }\r\n\r\n    /**\r\n     * Checks if the driver is currently scanning.\r\n     *\r\n     * @returns {Promise<boolean>} Resolves with true if the driver is scanning, otherwise false.\r\n     */\r\n    async isScanning(): Promise<boolean> {\r\n        return Promise.resolve(this.usedChannels === -1);\r\n    }\r\n\r\n    /**\r\n     * Retrieves a list of USB devices matching the specified vendor and product IDs.\r\n     *\r\n     * @private\r\n     * @returns {usb.usb.Device[]} An array of USB devices that match the specified criteria.\r\n     */\r\n    private getDevices(): usb.usb.Device[] {\r\n        const allDevices = usb.getDeviceList();\r\n        return allDevices.filter((d) => d.deviceDescriptor.idVendor === this.idVendor && d.deviceDescriptor.idProduct === this.idProduct).filter((d) => NodeUSBDriver.deviceInUse.indexOf(d) === -1);\r\n    }\r\n\r\n    /**\r\n     * Detaches all sensors from the USB driver.\r\n     *\r\n     * @private\r\n     * @returns {Promise<void>} Resolves when all sensors are detached.\r\n     */\r\n    private async detachAll(): Promise<void> {\r\n        const copy = this.attachedSensors;\r\n        for (const sensor of copy) {\r\n            await sensor.detach();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles data received from the USB device and processes the messages.\r\n     *\r\n     * @private\r\n     * @param {Uint8Array} data - The data received from the USB device.\r\n     * @returns {Promise<void>} Resolves when the data has been processed.\r\n     */\r\n    private async onData(data: Uint8Array) {\r\n        if (!data.length) {\r\n            return;\r\n        }\r\n\r\n        if (this.leftover) {\r\n            data = this.concatUint8Arrays(this.leftover, data);\r\n            this.leftover = undefined;\r\n        }\r\n\r\n        const dataView = new DataView(data.buffer);\r\n\r\n        if (dataView.getUint8(0) !== 0xa4) {\r\n            throw new Error(\"SYNC missing\");\r\n        }\r\n\r\n        const len = data.length;\r\n        let beginBlock = 0;\r\n        while (beginBlock < len) {\r\n            if (beginBlock + 1 === len) {\r\n                this.leftover = data.slice(beginBlock);\r\n                break;\r\n            }\r\n            const blockLen = dataView.getUint8(beginBlock + 1);\r\n            const endBlock = beginBlock + blockLen + 4;\r\n            if (endBlock > len) {\r\n                this.leftover = data.slice(beginBlock);\r\n                break;\r\n            }\r\n            const readData = data.slice(beginBlock, endBlock);\r\n            await this.read(readData);\r\n            beginBlock = endBlock;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Concatenates two Uint8Array objects into one.\r\n     *\r\n     * @private\r\n     * @param {Uint8Array} arr1 - The first array.\r\n     * @param {Uint8Array} arr2 - The second array.\r\n     * @returns {Uint8Array} The concatenated result.\r\n     */\r\n    private concatUint8Arrays(arr1: Uint8Array, arr2: Uint8Array): Uint8Array {\r\n        const result = new Uint8Array(arr1.length + arr2.length);\r\n        result.set(arr1, 0);\r\n        result.set(arr2, arr1.length);\r\n        return result;\r\n    }\r\n}\r\n","/**\r\n * An array of objects representing supported hardware devices, each identified by a vendor ID and product ID.\r\n * This array is used to filter and identify specific USB devices that are supported by the system.\r\n *\r\n * @type {Array<{ vendorId: number, productId: number }>}\r\n *\r\n * @example\r\n * // Example of accessing the supported hardware list\r\n * console.log(supportHardware);\r\n * // Output: [{ vendorId: 0x0fcf, productId: 0x1008 }, { vendorId: 0x0fcf, productId: 0x1009 }]\r\n */\r\nexport const supportHardware: Array<{ vendorId: number; productId: number }> = [\r\n    { vendorId: 0x0fcf, productId: 0x1008 }, // Device GarminStick2\r\n    { vendorId: 0x0fcf, productId: 0x1009 }, // Device GarminStick3\r\n];\r\n","import { BaseSensor } from \"../../sensors/baseSensor\";\r\nimport { USBDriverBase } from \"../../types/usbDriverBase\";\r\nimport EventEmitter from \"events\";\r\nimport { supportHardware } from \"./usbDriverUtils\";\r\nimport { Messages } from \"../../utils/messages\";\r\nimport { Constants } from \"../../types/constants\";\r\n\r\n/**\r\n * WebUSBDriver is a class that manages the connection and communication with USB devices using the WebUSB API.\r\n * It handles device setup, communication, and sensor attachment.\r\n *\r\n * @extends EventEmitter\r\n * @implements USBDriverBase\r\n */\r\nexport class WebUSBDriver extends EventEmitter implements USBDriverBase {\r\n    /**\r\n     * Stores the USB devices currently in use.\r\n     * @type {USBDevice[]}\r\n     * @private\r\n     */\r\n    private static deviceInUse: USBDevice[] = [];\r\n\r\n    /**\r\n     * The current USB device.\r\n     * @type {USBDevice|undefined}\r\n     * @private\r\n     */\r\n    private device: USBDevice | undefined;\r\n\r\n    /**\r\n     * The USB interface of the connected device.\r\n     * @type {USBInterface|undefined}\r\n     * @private\r\n     */\r\n    private iface: USBInterface | undefined;\r\n\r\n    /**\r\n     * The input endpoint for communication.\r\n     * @type {USBEndpoint|undefined}\r\n     * @private\r\n     */\r\n    private inEndpoint: USBEndpoint | undefined;\r\n\r\n    /**\r\n     * The output endpoint for communication.\r\n     * @type {USBEndpoint|undefined}\r\n     * @private\r\n     */\r\n    private outEndpoint: USBEndpoint | undefined;\r\n\r\n    /**\r\n     * Stores any leftover data from previous USB reads.\r\n     * @type {Uint8Array|undefined}\r\n     * @private\r\n     */\r\n    private leftover: Uint8Array | undefined;\r\n\r\n    /**\r\n     * The number of channels currently used.\r\n     * @type {number}\r\n     */\r\n    usedChannels: number = 0;\r\n\r\n    /**\r\n     * The sensors attached to the driver.\r\n     * @type {BaseSensor[]}\r\n     * @private\r\n     */\r\n    private attachedSensors: BaseSensor[] = [];\r\n\r\n    /**\r\n     * Controller for aborting asynchronous operations.\r\n     * @type {AbortController}\r\n     * @private\r\n     */\r\n    private abortController: AbortController;\r\n\r\n    /**\r\n     * Signal for aborting asynchronous operations.\r\n     * @type {AbortSignal}\r\n     * @private\r\n     */\r\n    private signal: AbortSignal;\r\n\r\n    /**\r\n     * The maximum number of channels available for communication.\r\n     * @type {number}\r\n     */\r\n    maxChannels: number = 0;\r\n\r\n    /**\r\n     * Indicates whether the device can scan.\r\n     * @type {boolean}\r\n     */\r\n    _canScan: boolean = false;\r\n\r\n    /**\r\n     * Initializes the WebUSBDriver instance, setting up the abort controller and signal.\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.setMaxListeners(50);\r\n        this.abortController = new AbortController();\r\n        this.signal = this.abortController.signal;\r\n    }\r\n\r\n    /**\r\n     * Checks if a new sensor can be attached to the driver.\r\n     * It verifies whether the current number of used channels is less than the maximum available channels.\r\n     *\r\n     * @returns {Promise<boolean>} Resolves with true if a new sensor can be attached, otherwise false.\r\n     *\r\n     * @example\r\n     * const canAttach = await this.stick.canAttach();\r\n     * if (canAttach) {\r\n     *   console.log(\"A new sensor can be attached.\");\r\n     * } else {\r\n     *   console.log(\"Cannot attach sensor: Maximum number of channels reached.\");\r\n     * }\r\n     */\r\n    async canAttach(): Promise<boolean> {\r\n        return Promise.resolve(this.usedChannels < this.maxChannels);\r\n    }\r\n\r\n    /**\r\n     * Checks if the device can scan for channels.\r\n     *\r\n     * @returns {Promise<boolean>} Resolves with true if the device can scan, otherwise false.\r\n     */\r\n    async canScan(): Promise<boolean> {\r\n        return Promise.resolve(this._canScan);\r\n    }\r\n\r\n    /**\r\n     * Opens a connection to the USB device and initializes the endpoints.\r\n     *\r\n     * @returns {Promise<boolean>} Resolves with true if the device was successfully opened, otherwise false.\r\n     */\r\n    public async open(): Promise<boolean> {\r\n        try {\r\n            if (!this.device) {\r\n                this.device = await navigator.usb.requestDevice({ filters: supportHardware });\r\n            }\r\n\r\n            await this.device.open();\r\n            this.iface = this.device.configuration?.interfaces[0];\r\n\r\n            if (!this.iface) {\r\n                throw new Error(\"No interface configuration found.\");\r\n            }\r\n\r\n            await this.device.claimInterface(this.iface.interfaceNumber);\r\n\r\n            WebUSBDriver.deviceInUse.push(this.device);\r\n\r\n            this.inEndpoint = this.iface.alternate.endpoints.find((e) => e.direction === \"in\");\r\n            this.outEndpoint = this.iface.alternate.endpoints.find((e) => e.direction === \"out\");\r\n\r\n            if (!this.inEndpoint || !this.outEndpoint) {\r\n                throw new Error(\"In or Out endpoint not found.\");\r\n            }\r\n\r\n            await this.reset();\r\n            await this.readLoop();\r\n\r\n            return true;\r\n        } catch (error) {\r\n            console.log(error);\r\n            await this.close();\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Continuously reads data from the USB device.\r\n     * Recursively calls itself after each read until aborted.\r\n     *\r\n     * @private\r\n     * @returns {Promise<void>} Resolves when the read loop is completed or aborted.\r\n     */\r\n    private async readLoop(): Promise<void> {\r\n        if (this.signal.aborted || !this.inEndpoint) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const result = await this.device?.transferIn(this.inEndpoint.endpointNumber, this.inEndpoint.packetSize);\r\n            if (!result || !result.data) {\r\n                return this.readLoop();\r\n            }\r\n\r\n            let buffer = new Uint8Array(result.data.buffer);\r\n\r\n            if (this.leftover) {\r\n                buffer = this.concatUint8Arrays(this.leftover, buffer);\r\n                this.leftover = undefined;\r\n            }\r\n\r\n            const dataView = new DataView(buffer.buffer);\r\n\r\n            if (dataView.getUint8(0) !== 0xa4) {\r\n                console.error(\"SYNC missing\");\r\n                return this.readLoop();\r\n            }\r\n\r\n            let beginBlock = 0;\r\n            const len = buffer.length;\r\n\r\n            while (beginBlock < len) {\r\n                if (beginBlock + 1 === len) {\r\n                    this.leftover = buffer.slice(beginBlock);\r\n                    break;\r\n                }\r\n\r\n                const blockLen = dataView.getUint8(beginBlock + 1);\r\n                const endBlock = beginBlock + blockLen + 4;\r\n\r\n                if (endBlock > len) {\r\n                    this.leftover = buffer.slice(beginBlock);\r\n                    break;\r\n                }\r\n\r\n                const readData = buffer.slice(beginBlock, endBlock);\r\n                await this.read(readData);\r\n                beginBlock = endBlock;\r\n            }\r\n        } catch (error) {\r\n            if (!this.signal.aborted) {\r\n                throw error;\r\n            }\r\n        }\r\n\r\n        return this.readLoop();\r\n    }\r\n\r\n    /**\r\n     * Closes the connection to the USB device and cleans up.\r\n     *\r\n     * @returns {Promise<void>} Resolves when the device is closed.\r\n     */\r\n    public async close(): Promise<void> {\r\n        this.cancelReadLoop();\r\n        await this.detachAll();\r\n\r\n        if (this.device) {\r\n            try {\r\n                await this.device.close();\r\n            } catch (error) {\r\n                console.error(\"Error closing device:\", error);\r\n            }\r\n\r\n            const devIdx = WebUSBDriver.deviceInUse.indexOf(this.device);\r\n            if (devIdx >= 0) {\r\n                WebUSBDriver.deviceInUse.splice(devIdx, 1);\r\n            }\r\n\r\n            this.emit(\"shutdown\");\r\n            this.device = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Cancels the current read loop by aborting the signal.\r\n     */\r\n    public cancelReadLoop() {\r\n        if (!this.signal.aborted) {\r\n            this.abortController.abort();\r\n            console.log(\"Read loop abort requested.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Processes the data received from the USB device.\r\n     *\r\n     * @param {Uint8Array} data The data received from the USB device.\r\n     * @returns {Promise<void>} Resolves when the data has been processed.\r\n     */\r\n    public async read(data: Uint8Array): Promise<void> {\r\n        const dataView = new DataView(data.buffer);\r\n        const messageId = dataView.getUint8(2);\r\n\r\n        if (messageId === Constants.MESSAGE_STARTUP) {\r\n            await this.write(Messages.requestMessage(0, Constants.MESSAGE_CAPABILITIES));\r\n        } else if (messageId === Constants.MESSAGE_CAPABILITIES) {\r\n            this.maxChannels = dataView.getUint8(3);\r\n            this._canScan = (dataView.getUint8(7) & 0x06) === 0x06;\r\n            await this.write(Messages.setNetworkKey());\r\n        } else if (messageId === Constants.MESSAGE_CHANNEL_EVENT && dataView.getUint8(4) === Constants.MESSAGE_NETWORK_KEY) {\r\n            this.emit(\"startup\", data);\r\n        } else {\r\n            this.emit(\"read\", data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Writes data to the USB device.\r\n     *\r\n     * @param {Uint8Array} data The data to be sent to the USB device.\r\n     * @returns {Promise<void>} Resolves when the data has been written.\r\n     */\r\n    public async write(data: Uint8Array): Promise<void> {\r\n        if (this.device && this.outEndpoint) {\r\n            await this.device.transferOut(this.outEndpoint.endpointNumber, data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets the device and channels, and sends a reset message to the system.\r\n     *\r\n     * @returns {Promise<void>} Resolves when the reset is completed.\r\n     */\r\n    public async reset(): Promise<void> {\r\n        await this.detachAll();\r\n        this.maxChannels = 0;\r\n        this.usedChannels = 0;\r\n        await this.write(Messages.resetSystem());\r\n    }\r\n\r\n    /**\r\n     * Attaches a sensor to the driver and assigns it a channel.\r\n     *\r\n     * @param {BaseSensor} sensor The sensor to attach.\r\n     * @param {boolean} forScan Whether the sensor is being attached for scanning.\r\n     * @returns {Promise<boolean>} Resolves with true if the sensor was successfully attached, otherwise false.\r\n     */\r\n    public async attach(sensor: BaseSensor, forScan: boolean): Promise<boolean> {\r\n        if (this.usedChannels < 0) {\r\n            return Promise.resolve(false);\r\n        }\r\n\r\n        if (forScan && this.usedChannels !== 0) {\r\n            return Promise.resolve(false);\r\n        }\r\n        if (!forScan && this.maxChannels <= this.usedChannels) {\r\n            return Promise.resolve(false);\r\n        }\r\n\r\n        this.usedChannels = forScan ? -1 : this.usedChannels + 1;\r\n        this.attachedSensors.push(sensor);\r\n\r\n        return Promise.resolve(true);\r\n    }\r\n\r\n    /**\r\n     * Detaches a sensor from the driver.\r\n     *\r\n     * @param {BaseSensor} sensor The sensor to detach.\r\n     * @returns {Promise<boolean>} Resolves with true if the sensor was successfully detached, otherwise false.\r\n     */\r\n    public async detach(sensor: BaseSensor): Promise<boolean> {\r\n        const idx = this.attachedSensors.indexOf(sensor);\r\n        if (idx < 0) {\r\n            return Promise.resolve(false);\r\n        }\r\n\r\n        this.usedChannels = this.usedChannels < 0 ? 0 : this.usedChannels - 1;\r\n        this.attachedSensors.splice(idx, 1);\r\n\r\n        return Promise.resolve(true);\r\n    }\r\n\r\n    /**\r\n     * Checks if a device is currently connected.\r\n     *\r\n     * @returns {Promise<boolean>} Resolves with true if a device is present, otherwise false.\r\n     */\r\n    public async isPresent(): Promise<boolean> {\r\n        return Promise.resolve(!!this.device);\r\n    }\r\n\r\n    /**\r\n     * Checks if the device is currently scanning.\r\n     *\r\n     * @returns {Promise<boolean>} Resolves with true if the device is scanning, otherwise false.\r\n     */\r\n    public async isScanning(): Promise<boolean> {\r\n        return Promise.resolve(this.usedChannels === -1);\r\n    }\r\n\r\n    /**\r\n     * Detaches all sensors from the driver.\r\n     *\r\n     * @private\r\n     * @returns {Promise<void>} Resolves when all sensors have been detached.\r\n     */\r\n    private async detachAll(): Promise<void> {\r\n        for (const sensor of this.attachedSensors.slice()) {\r\n            await sensor.detach();\r\n        }\r\n\r\n        this.attachedSensors = [];\r\n    }\r\n\r\n    /**\r\n     * Concatenates two Uint8Array objects into one.\r\n     *\r\n     * @private\r\n     * @param {Uint8Array} arr1 The first array.\r\n     * @param {Uint8Array} arr2 The second array.\r\n     * @returns {Uint8Array} The concatenated result.\r\n     */\r\n    private concatUint8Arrays(arr1: Uint8Array, arr2: Uint8Array): Uint8Array {\r\n        const result = new Uint8Array(arr1.length + arr2.length);\r\n        result.set(arr1, 0);\r\n        result.set(arr2, arr1.length);\r\n        return result;\r\n    }\r\n}\r\n","import { HeartRateScanner } from \"./heartRateScanner.js\";\r\nimport { HeartRateScannerState } from \"./heartRateScannerState.js\";\r\nimport { HeartRateSensor } from \"./heartRateSensor.js\";\r\nimport { HeartRateSensorState } from \"./heartRateSensorState.js\";\r\nimport { Messages } from \"../../utils/messages.js\";\r\n\r\nexport enum PageState {\r\n    INIT_PAGE,\r\n    STD_PAGE,\r\n    EXT_PAGE,\r\n}\r\n\r\nexport type Page = {\r\n    oldPage: number;\r\n    pageState: PageState; // sets the state of the receiver - INIT, STD_PAGE, EXT_PAGE\r\n};\r\n\r\nconst TOGGLE_MASK = 0x80;\r\n\r\n/**\r\n * Updates the state of a Heart Rate sensor or scanner based on incoming data.\r\n * Decodes various pages of data to update the state, including operating time, manufacturer details,\r\n * battery status, heart rate data, and more.\r\n *\r\n * @param {HeartRateSensor | HeartRateScanner} sensor - The sensor or scanner instance emitting the data.\r\n * @param {HeartRateSensorState | HeartRateScannerState} state - The current state of the sensor or scanner.\r\n * @param {Page} page - The page information containing the current and old page number.\r\n * @param {DataView} data - The raw data buffer received from the sensor.\r\n * @returns {void}\r\n *\r\n * @example\r\n * const sensor = new HeartRateSensor();\r\n * const state = new HeartRateSensorState(12345);\r\n * const page = { oldPage: 0, pageState: PageState.INIT_PAGE };\r\n * const dataBuffer = getDataFromSensor(); // Assume this function gets data from a sensor\r\n * updateState(sensor, state, page, dataBuffer);\r\n */\r\nexport function updateState(sensor: HeartRateSensor | HeartRateScanner, state: HeartRateSensorState | HeartRateScannerState, page: Page, data: DataView): void {\r\n    const pageNum = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA);\r\n    if (page.pageState === PageState.INIT_PAGE) {\r\n        page.pageState = PageState.STD_PAGE; // change the state to STD_PAGE and allow the checking of old and new pages\r\n    } else if (pageNum !== page.oldPage || page.pageState === PageState.EXT_PAGE) {\r\n        page.pageState = PageState.EXT_PAGE; // set the state to use the extended page format\r\n        switch (\r\n            pageNum & ~TOGGLE_MASK // Check the new pages and remove the toggle bit\r\n        ) {\r\n            case 1:\r\n                // Decode the cumulative operating time\r\n                state.OperatingTime = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1);\r\n                state.OperatingTime |= data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2) << 8;\r\n                state.OperatingTime |= data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3) << 16;\r\n                state.OperatingTime *= 2;\r\n                break;\r\n            case 2:\r\n                // Decode the Manufacturer ID\r\n                state.ManId = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1);\r\n                // Decode the 4-byte serial number\r\n                state.SerialNumber = state.DeviceId;\r\n                state.SerialNumber |= data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 2, true) << 16;\r\n                state.SerialNumber >>>= 0;\r\n                break;\r\n            case 3:\r\n                // Decode hardware version, software version, and model number\r\n                state.HwVersion = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1);\r\n                state.SwVersion = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2);\r\n                state.ModelNum = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\r\n                break;\r\n            case 4:\r\n                // Decode the previous heart beat measurement time\r\n                state.PreviousBeat = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 2, true);\r\n                break;\r\n            case 5:\r\n                state.IntervalAverage = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1);\r\n                state.IntervalMax = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2);\r\n                state.SessionAverage = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\r\n                break;\r\n            case 6:\r\n                state.SupportedFeatures = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2);\r\n                state.EnabledFeatures = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\r\n                break;\r\n            case 7: {\r\n                const batteryLevel = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1);\r\n                const batteryFrac = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2);\r\n                const batteryStatus = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\r\n                if (batteryLevel !== 0xff) {\r\n                    state.BatteryLevel = batteryLevel;\r\n                }\r\n                state.BatteryVoltage = (batteryStatus & 0x0f) + batteryFrac / 256;\r\n                const batteryFlags = (batteryStatus & 0x70) >>> 4;\r\n                state.BatteryStatusBit = batteryFlags;\r\n                switch (batteryFlags) {\r\n                    case 1:\r\n                        state.BatteryStatus = \"New\";\r\n                        break;\r\n                    case 2:\r\n                        state.BatteryStatus = \"Good\";\r\n                        break;\r\n                    case 3:\r\n                        state.BatteryStatus = \"Ok\";\r\n                        break;\r\n                    case 4:\r\n                        state.BatteryStatus = \"Low\";\r\n                        break;\r\n                    case 5:\r\n                        state.BatteryStatus = \"Critical\";\r\n                        break;\r\n                    default:\r\n                        state.BatteryVoltage = undefined;\r\n                        state.BatteryStatus = \"Invalid\";\r\n                        break;\r\n                }\r\n                break;\r\n            }\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    // Decode the last four bytes of the HRM format, the first byte of this message is the channel number\r\n    DecodeDefaultHRM(state, new DataView(data.buffer.slice(Messages.BUFFER_INDEX_MSG_DATA + 4)));\r\n    page.oldPage = pageNum;\r\n\r\n    sensor.emit(\"heartRateData\", state);\r\n}\r\n\r\n/**\r\n * Decodes the default Heart Rate Monitor (HRM) data from the buffer and updates the sensor state.\r\n *\r\n * @param {HeartRateSensorState | HeartRateScannerState} state - The current state of the sensor or scanner.\r\n * @param {DataView} pucPayload - The buffer containing the HRM data.\r\n * @returns {void}\r\n *\r\n * @example\r\n * const state = new HeartRateSensorState(12345);\r\n * const hrmData = new Uint8Array([0x00, 0x01, 0x02, 0x03]); // Sample HRM data buffer\r\n * DecodeDefaultHRM(state, hrmData);\r\n */\r\nfunction DecodeDefaultHRM(state: HeartRateSensorState | HeartRateScannerState, pucPayload: DataView): void {\r\n    // Decode the measurement time data (two bytes)\r\n    state.BeatTime = pucPayload.getUint16(0, true); // little-endian\r\n    // Decode the measurement count data\r\n    state.BeatCount = pucPayload.getUint8(2);\r\n    // Decode the computed heart rate data\r\n    state.ComputedHeartRate = pucPayload.getUint8(3);\r\n}\r\n","/**\n * Represents the state of a Heart Rate sensor.\n * This class holds the data fields associated with the state of a Heart Rate sensor,\n * including heart rate measurements, device details, and battery status.\n */\nexport class HeartRateSensorState {\n    /**\n     * Creates an instance of the HeartRateSensorState.\n     *\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @example\n     * const sensorState = new HeartRateSensorState(12345);\n     */\n    constructor(deviceId: number) {\n        this.DeviceId = deviceId;\n    }\n\n    /**\n     * The unique identifier of the sensor device.\n     * @type {number}\n     */\n    DeviceId: number;\n\n    /**\n     * The time of the last beat event in milliseconds.\n     * @type {number | undefined}\n     */\n    BeatTime: number | undefined;\n\n    /**\n     * The cumulative count of beat events since the sensor started.\n     * @type {number | undefined}\n     */\n    BeatCount: number | undefined;\n\n    /**\n     * The computed heart rate in beats per minute (BPM).\n     * @type {number | undefined}\n     */\n    ComputedHeartRate: number | undefined;\n\n    /**\n     * The cumulative operating time of the sensor in seconds.\n     * @type {number | undefined}\n     */\n    OperatingTime?: number;\n\n    /**\n     * The manufacturer ID of the sensor.\n     * @type {number | undefined}\n     */\n    ManId?: number;\n\n    /**\n     * The serial number of the sensor.\n     * @type {number | undefined}\n     */\n    SerialNumber?: number;\n\n    /**\n     * The hardware version of the sensor.\n     * @type {number | undefined}\n     */\n    HwVersion?: number;\n\n    /**\n     * The software version of the sensor.\n     * @type {number | undefined}\n     */\n    SwVersion?: number;\n\n    /**\n     * The model number of the sensor.\n     * @type {number | undefined}\n     */\n    ModelNum?: number;\n\n    /**\n     * The time of the previous beat measurement.\n     * @type {number | undefined}\n     */\n    PreviousBeat?: number;\n\n    /**\n     * The average heart rate over a certain interval.\n     * @type {number | undefined}\n     */\n    IntervalAverage?: number;\n\n    /**\n     * The maximum heart rate over a certain interval.\n     * @type {number | undefined}\n     */\n    IntervalMax?: number;\n\n    /**\n     * The average heart rate over the current session.\n     * @type {number | undefined}\n     */\n    SessionAverage?: number;\n\n    /**\n     * The supported features of the sensor.\n     * @type {number | undefined}\n     */\n    SupportedFeatures?: number;\n\n    /**\n     * The enabled features of the sensor.\n     * @type {number | undefined}\n     */\n    EnabledFeatures?: number;\n\n    /**\n     * The battery level of the sensor.\n     * @type {number | undefined}\n     */\n    BatteryLevel?: number;\n\n    /**\n     * The battery voltage of the sensor.\n     * @type {number | undefined}\n     */\n    BatteryVoltage?: number;\n\n    /**\n     * The battery status of the sensor.\n     * Can be \"New\", \"Good\", \"Ok\", \"Low\", \"Critical\", or \"Invalid\".\n     * @type {\"New\" | \"Good\" | \"Ok\" | \"Low\" | \"Critical\" | \"Invalid\" | undefined}\n     */\n    BatteryStatus?: \"New\" | \"Good\" | \"Ok\" | \"Low\" | \"Critical\" | \"Invalid\";\n\n    /**\n     * The battery status bit of the sensor.\n     */\n    BatteryStatusBit?: number;\n}\n","import { HeartRateSensorState } from \"./heartRateSensorState.js\";\n\n/**\n * Represents the state of a Heart Rate sensor during scanning.\n * Extends the HeartRateSensorState to include additional fields specific to scanning,\n * such as RSSI (Received Signal Strength Indicator) and signal threshold.\n */\nexport class HeartRateScannerState extends HeartRateSensorState {\n    /**\n     * The received signal strength indicator (RSSI) of the sensor signal.\n     * @type {number | undefined}\n     */\n    Rssi: number | undefined;\n\n    /**\n     * The signal threshold value for the sensor.\n     * @type {number | undefined}\n     */\n    Threshold: number | undefined;\n}\n","/**\r\n * A polyfill for `process.nextTick`, providing cross-platform compatibility.\r\n * In Node.js, it uses `process.nextTick`. In browsers, it falls back to\r\n * `setImmediate` if available, or `setTimeout` as a last resort.\r\n *\r\n * This function ensures that the provided callback function is executed asynchronously\r\n * after the current execution stack, similar to how `process.nextTick` works in Node.js.\r\n *\r\n * @param {() => void} fn - The callback function to execute asynchronously.\r\n *\r\n * @returns {void} No return value; the function is executed asynchronously.\r\n *\r\n * @example\r\n * nextTick(() => {\r\n *   console.log(\"This runs asynchronously after the current stack.\");\r\n * });\r\n */\r\nexport function nextTick(fn: () => void): void {\r\n    if (typeof process !== \"undefined\" && typeof process.nextTick === \"function\") {\r\n        // In Node.js, use process.nextTick\r\n        process.nextTick(fn);\r\n    } else if (typeof setImmediate === \"function\") {\r\n        // If setImmediate is available (some browsers, IE/Edge), use it\r\n        setImmediate(fn);\r\n    } else {\r\n        // Fallback for browsers and other environments: use setTimeout with 0 delay\r\n        setTimeout(fn, 0);\r\n    }\r\n}\r\n","import { EventEmitter } from \"events\";\r\nimport { SendCallback } from \"../types/sendCallback.js\";\r\nimport { Constants } from \"../types/constants.js\";\r\nimport { Messages } from \"../utils/messages.js\";\r\nimport { Status } from \"../types/status.js\";\r\nimport { USBDriverBase } from \"../types/usbDriverBase.js\";\r\nimport { nextTick } from \"../utils/customPolyfills.js\";\r\n\r\n/**\r\n * Abstract base class for sensors that communicates over a USB connection.\r\n * Extends EventEmitter to handle various events related to sensor data and status.\r\n */\r\nexport abstract class BaseSensor extends EventEmitter {\r\n    channel: number | undefined;\r\n    deviceId!: number;\r\n    transmissionType!: number;\r\n\r\n    private messageQueue: { msg: Uint8Array; cbk?: SendCallback }[] = [];\r\n\r\n    protected decodeDataCbk: ((data: DataView) => Promise<void>) | undefined;\r\n    protected statusCbk: ((status: Status) => Promise<boolean>) | undefined;\r\n\r\n    /**\r\n     * Abstract method to update the state of the sensor.\r\n     * Must be implemented by subclasses.\r\n     *\r\n     * @param {number} deviceId - The device ID to update.\r\n     * @param {Uint8Array} data - The data buffer containing the state information.\r\n     */\r\n    protected abstract updateState(deviceId: number, data: DataView): void;\r\n\r\n    /**\r\n     * Creates an instance of BaseSensor.\r\n     *\r\n     * @param {USBDriverBase} stick - The USB driver used for communication with the sensor.\r\n     */\r\n    constructor(private stick: USBDriverBase) {\r\n        super();\r\n        stick.on(\"read\", (data: Uint8Array) => {\r\n            this.handleEventMessages(data).catch((error) => {\r\n                console.error(error);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Starts scanning for devices of the specified type at a given frequency.\r\n     *\r\n     * @param {string} type - The type of device to scan for.\r\n     * @param {number} frequency - The frequency at which to scan.\r\n     *\r\n     * @throws Will throw an error if already attached or if the stick cannot scan.\r\n     */\r\n    protected async scan(type: string, frequency: number): Promise<void> {\r\n        if (this.channel !== undefined) {\r\n            throw new Error(\"Already attached\");\r\n        }\r\n\r\n        if (!this.stick.canScan) {\r\n            throw new Error(\"Stick cannot scan\");\r\n        }\r\n\r\n        const channel = 0;\r\n\r\n        const onStatus = async (status: Status) => {\r\n            switch (status.msg) {\r\n                case Constants.MESSAGE_RF:\r\n                    // Handle various message statuses\r\n                    switch (status.code) {\r\n                        case Constants.EVENT_CHANNEL_CLOSED:\r\n                        case Constants.EVENT_RX_FAIL_GO_TO_SEARCH:\r\n                            await this.write(Messages.unassignChannel(channel));\r\n                            return true;\r\n                        case Constants.EVENT_TRANSFER_TX_COMPLETED:\r\n                        case Constants.EVENT_TRANSFER_TX_FAILED:\r\n                        case Constants.EVENT_RX_FAIL:\r\n                        case Constants.INVALID_SCAN_TX_CHANNEL: {\r\n                            const mc = this.messageQueue.shift();\r\n                            if (mc && mc.cbk) {\r\n                                mc.cbk(status.code === Constants.EVENT_TRANSFER_TX_COMPLETED);\r\n                            }\r\n                            if (this.messageQueue.length) {\r\n                                await this.write(this.messageQueue[0].msg);\r\n                            }\r\n                            return true;\r\n                        }\r\n                        default:\r\n                            break;\r\n                    }\r\n                    break;\r\n                case Constants.MESSAGE_CHANNEL_ASSIGN:\r\n                    await this.write(Messages.setDevice(channel, 0, 0, 0));\r\n                    return true;\r\n                case Constants.MESSAGE_CHANNEL_ID:\r\n                    await this.write(Messages.setFrequency(channel, frequency));\r\n                    return true;\r\n                case Constants.MESSAGE_CHANNEL_FREQUENCY:\r\n                    await this.write(Messages.setRxExt());\r\n                    return true;\r\n                case Constants.MESSAGE_ENABLE_RX_EXT:\r\n                    await this.write(Messages.libConfig(channel, 0xe0));\r\n                    return true;\r\n                case Constants.MESSAGE_LIB_CONFIG:\r\n                    await this.write(Messages.openRxScan());\r\n                    return true;\r\n                case Constants.MESSAGE_CHANNEL_OPEN_RX_SCAN:\r\n                    nextTick(() => this.emit(\"attached\"));\r\n                    return true;\r\n                case Constants.MESSAGE_CHANNEL_CLOSE:\r\n                    return true;\r\n                case Constants.MESSAGE_CHANNEL_UNASSIGN:\r\n                    this.statusCbk = undefined;\r\n                    this.channel = undefined;\r\n                    nextTick(() => this.emit(\"detached\"));\r\n                    return true;\r\n                case Constants.MESSAGE_CHANNEL_ACKNOWLEDGED_DATA:\r\n                    return status.code === Constants.TRANSFER_IN_PROGRESS;\r\n                default:\r\n                    break;\r\n            }\r\n            return false;\r\n        };\r\n\r\n        if (await this.stick.isScanning()) {\r\n            this.channel = channel;\r\n            this.deviceId = 0;\r\n            this.transmissionType = 0;\r\n\r\n            this.statusCbk = onStatus;\r\n\r\n            nextTick(() => this.emit(\"attached\"));\r\n        } else if (await this.stick.attach(this, true)) {\r\n            this.channel = channel;\r\n            this.deviceId = 0;\r\n            this.transmissionType = 0;\r\n\r\n            this.statusCbk = onStatus;\r\n\r\n            await this.write(Messages.assignChannel(channel, type));\r\n        } else {\r\n            const errorMessage = (await this.stick.canAttach()) ? \"Cannot attach: Device is not scanning, and an unknown error occurred during attachment.\" : \"Cannot attach: Maximum number of channels reached, unable to attach more sensors.\";\r\n            throw new Error(errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Attaches the sensor to a specific channel with the given parameters.\r\n     *\r\n     * @param {number} channel - The channel number to attach to.\r\n     * @param {string} type - The type of device.\r\n     * @param {number} deviceId - The device ID.\r\n     * @param {number} deviceType - The type of the device.\r\n     * @param {number} transmissionType - The transmission type.\r\n     * @param {number} timeout - The timeout value for the channel.\r\n     * @param {number} period - The period for communication.\r\n     * @param {number} frequency - The frequency for communication.\r\n     *\r\n     * @throws Will throw an error if already attached or if unable to attach.\r\n     */\r\n    protected async attachSensor(channel: number, type: string, deviceId: number, deviceType: number, transmissionType: number, timeout: number, period: number, frequency: number) {\r\n        if (this.channel !== undefined) {\r\n            throw new Error(\"Already attached\");\r\n        }\r\n\r\n        const attached = await this.stick.attach(this, false);\r\n        if (!attached) {\r\n            const errorMessage = (await this.stick.canAttach()) ? \"Cannot attach: Device is not in scanning mode or an unknown error occurred.\" : \"Cannot attach: Maximum number of channels reached, unable to attach more sensors.\";\r\n            throw new Error(errorMessage);\r\n        }\r\n\r\n        this.channel = channel;\r\n        this.deviceId = deviceId;\r\n        this.transmissionType = transmissionType;\r\n\r\n        const onStatus = async (status: Status) => {\r\n            switch (status.msg) {\r\n                case Constants.MESSAGE_RF:\r\n                    // Handle various message statuses\r\n                    switch (status.code) {\r\n                        case Constants.EVENT_CHANNEL_CLOSED:\r\n                        case Constants.EVENT_RX_FAIL_GO_TO_SEARCH:\r\n                            await this.write(Messages.unassignChannel(channel));\r\n                            return true;\r\n                        case Constants.EVENT_TRANSFER_TX_COMPLETED:\r\n                        case Constants.EVENT_TRANSFER_TX_FAILED:\r\n                        case Constants.EVENT_RX_FAIL:\r\n                        case Constants.INVALID_SCAN_TX_CHANNEL: {\r\n                            const mc = this.messageQueue.shift();\r\n                            if (mc && mc.cbk) {\r\n                                mc.cbk(status.code === Constants.EVENT_TRANSFER_TX_COMPLETED);\r\n                            }\r\n                            if (this.messageQueue.length) {\r\n                                await this.write(this.messageQueue[0].msg);\r\n                            }\r\n                            return true;\r\n                        }\r\n                        case Constants.EVENT_CHANNEL_COLLISION:\r\n                            return true;\r\n                        default:\r\n                            break;\r\n                    }\r\n                    break;\r\n                case Constants.MESSAGE_CHANNEL_ASSIGN:\r\n                    await this.write(Messages.setDevice(channel, deviceId, deviceType, transmissionType));\r\n                    return true;\r\n                case Constants.MESSAGE_CHANNEL_ID:\r\n                    await this.write(Messages.searchChannel(channel, timeout));\r\n                    return true;\r\n                case Constants.MESSAGE_CHANNEL_SEARCH_TIMEOUT:\r\n                    await this.write(Messages.setFrequency(channel, frequency));\r\n                    return true;\r\n                case Constants.MESSAGE_CHANNEL_FREQUENCY:\r\n                    await this.write(Messages.setPeriod(channel, period));\r\n                    return true;\r\n                case Constants.MESSAGE_CHANNEL_PERIOD:\r\n                    await this.write(Messages.libConfig(channel, 0xe0));\r\n                    return true;\r\n                case Constants.MESSAGE_LIB_CONFIG:\r\n                    await this.write(Messages.openChannel(channel));\r\n                    return true;\r\n                case Constants.MESSAGE_CHANNEL_OPEN:\r\n                    nextTick(() => this.emit(\"attached\"));\r\n                    return true;\r\n                case Constants.MESSAGE_CHANNEL_CLOSE:\r\n                    return true;\r\n                case Constants.MESSAGE_CHANNEL_UNASSIGN:\r\n                    this.statusCbk = undefined;\r\n                    this.channel = undefined;\r\n                    nextTick(() => this.emit(\"detached\"));\r\n                    return true;\r\n                case Constants.MESSAGE_CHANNEL_ACKNOWLEDGED_DATA:\r\n                    return status.code === Constants.TRANSFER_IN_PROGRESS;\r\n                default:\r\n                    break;\r\n            }\r\n            return false;\r\n        };\r\n\r\n        this.statusCbk = onStatus;\r\n\r\n        await this.write(Messages.assignChannel(channel, type));\r\n    }\r\n\r\n    /**\r\n     * Detaches the sensor from its assigned channel and stops communication.\r\n     *\r\n     * @throws Will throw an error if there is an issue detaching.\r\n     */\r\n    public async detach() {\r\n        if (this.channel === undefined) {\r\n            return;\r\n        }\r\n        await this.write(Messages.closeChannel(this.channel));\r\n        const detached = await this.stick.detach(this);\r\n        if (!detached) {\r\n            throw new Error(\"Error on detaching\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends data to the USB device.\r\n     *\r\n     * @param {Uint8Array} data - The data buffer to send.\r\n     */\r\n    protected async write(data: Uint8Array): Promise<void> {\r\n        await this.stick.write(data);\r\n    }\r\n\r\n    /**\r\n     * Handles incoming event messages from the USB device.\r\n     *\r\n     * @private\r\n     * @param {Uint8Array} data - The data buffer containing the event message.\r\n     */\r\n    private async handleEventMessages(data: Uint8Array): Promise<void> {\r\n        const dataView = new DataView(data.buffer);\r\n        const messageId = dataView.getUint8(Messages.BUFFER_INDEX_MSG_TYPE);\r\n        const channel = dataView.getUint8(Messages.BUFFER_INDEX_CHANNEL_NUM);\r\n\r\n        if (channel === this.channel) {\r\n            if (messageId === Constants.MESSAGE_CHANNEL_EVENT) {\r\n                const status: Status = {\r\n                    msg: dataView.getUint8(Messages.BUFFER_INDEX_MSG_DATA),\r\n                    code: dataView.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1),\r\n                };\r\n\r\n                const handled = this.statusCbk && this.statusCbk(status);\r\n                if (!handled) {\r\n                    console.log(\r\n                        \"Unhandled event: \" +\r\n                            Array.from(data)\r\n                                .map((byte) => byte.toString(16))\r\n                                .join(\" \")\r\n                    );\r\n                    this.emit(\"eventData\", {\r\n                        message: dataView.getUint8(Messages.BUFFER_INDEX_MSG_DATA),\r\n                        code: dataView.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1),\r\n                    });\r\n                }\r\n            } else if (this.decodeDataCbk) {\r\n                await this.decodeDataCbk(dataView);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends data and optionally a callback to handle the result of the send operation.\r\n     *\r\n     * @param {Uint8Array} data - The data buffer to send.\r\n     * @param {SendCallback} [cbk] - Optional callback to handle the send result.\r\n     */\r\n    protected async send(data: Uint8Array, cbk?: SendCallback): Promise<void> {\r\n        this.messageQueue.push({ msg: data, cbk });\r\n        if (this.messageQueue.length === 1) {\r\n            await this.write(data);\r\n        }\r\n    }\r\n}\r\n","import { BaseSensor } from \"./baseSensor.js\";\r\n\r\n/**\r\n * Abstract base class for ANT+ sensors, extending the functionality of the BaseSensor class.\r\n * This class provides methods to scan and attach ANT+ sensors with specific configurations.\r\n */\r\nexport abstract class AntPlusBaseSensor extends BaseSensor {\r\n    /**\r\n     * Initiates a scan for ANT+ sensors of a specific type.\r\n     *\r\n     * @protected\r\n     * @param {string} type - The type of sensor to scan for.\r\n     * @returns {Promise<void>} A promise that resolves when the scan is complete.\r\n     *\r\n     * @example\r\n     * // Example usage:\r\n     * const sensor = new AntPlusSensor();\r\n     * sensor.scan('heartRate');\r\n     */\r\n    protected async scan(type: string): Promise<void> {\r\n        return await super.scan(type, 57);\r\n    }\r\n\r\n    /**\r\n     * Attaches to a specific ANT+ sensor by configuring the channel, type, device ID, device type, transmission type, timeout, and period.\r\n     *\r\n     * @protected\r\n     * @param {number} channel - The channel number to use for communication with the sensor.\r\n     * @param {string} type - The type of sensor to attach to.\r\n     * @param {number} deviceId - The unique ID of the device to attach to.\r\n     * @param {number} deviceType - The type of the device (e.g., heart rate monitor, speed sensor).\r\n     * @param {number} transmissionType - The transmission type used by the sensor.\r\n     * @param {number} timeout - The timeout period for communication in seconds.\r\n     * @param {number} period - The communication period with the sensor in milliseconds.\r\n     * @returns {Promise<void>} A promise that resolves when the sensor is successfully attached.\r\n     *\r\n     * @example\r\n     * // Example usage:\r\n     * const sensor = new AntPlusSensor();\r\n     * sensor.attachSensor(1, 'heartRate', 12345, 120, 5, 60, 8070);\r\n     */\r\n    protected async attachSensor(channel: number, type: string, deviceId: number, deviceType: number, transmissionType: number, timeout: number, period: number): Promise<void> {\r\n        return await super.attachSensor(channel, type, deviceId, deviceType, transmissionType, timeout, period, 57);\r\n    }\r\n}\r\n","import { AntPlusBaseSensor } from \"./antPlusBaseSensor.js\";\r\nimport { Constants } from \"../types/constants.js\";\r\nimport { Messages } from \"../utils/messages.js\";\r\nimport { USBDriverBase } from \"../types/usbDriverBase.js\";\r\n\r\n/**\r\n * Abstract base class for managing a specific ANT+ sensor, extending the functionality\r\n * of the AntPlusBaseSensor class. Provides methods for attaching sensors and decoding data.\r\n */\r\nexport abstract class AntPlusSensor extends AntPlusBaseSensor {\r\n    /**\r\n     * Constructs an instance of the AntPlusSensor class.\r\n     *\r\n     * @param {USBDriverBase} stick - The USB driver instance used for communication with the ANT+ stick.\r\n     */\r\n    constructor(stick: USBDriverBase) {\r\n        super(stick);\r\n        this.decodeDataCbk = this.decodeData.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Unsupported method for scanning sensors. Throws an error when called.\r\n     *\r\n     * @protected\r\n     * @throws {Error} Always throws an error indicating that scanning is unsupported.\r\n     */\r\n    protected scan(): Promise<void> {\r\n        throw new Error(\"scanning unsupported\");\r\n    }\r\n\r\n    /**\r\n     * Attaches to a specific ANT+ sensor by configuring the channel, type, device ID, device type,\r\n     * transmission type, timeout, and period.\r\n     *\r\n     * @protected\r\n     * @param {number} channel - The channel number to use for communication with the sensor.\r\n     * @param {string} type - The type of sensor to attach to.\r\n     * @param {number} deviceId - The unique ID of the device to attach to.\r\n     * @param {number} deviceType - The type of the device (e.g., heart rate monitor, speed sensor).\r\n     * @param {number} transmissionType - The transmission type used by the sensor.\r\n     * @param {number} timeout - The timeout period for communication in seconds.\r\n     * @param {number} period - The communication period with the sensor in milliseconds.\r\n     * @returns {Promise<void>} A promise that resolves when the sensor is successfully attached.\r\n     *\r\n     * @example\r\n     * // Example usage:\r\n     * const sensor = new AntPlusSensor();\r\n     * sensor.attachSensor(1, 'heartRate', 12345, 120, 5, 60, 8070);\r\n     */\r\n    protected async attachSensor(channel: number, type: string, deviceId: number, deviceType: number, transmissionType: number, timeout: number, period: number): Promise<void> {\r\n        return await super.attachSensor(channel, type, deviceId, deviceType, transmissionType, timeout, period);\r\n    }\r\n\r\n    /**\r\n     * Decodes the incoming data from the ANT+ sensor and updates the sensor state.\r\n     *\r\n     * @private\r\n     * @param {DataView} data - The raw data buffer received from the ANT+ sensor.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * // Example usage:\r\n     * const dataBuffer = getDataFromSensor(); // assume this function gets data from a sensor\r\n     * decodeData(dataBuffer);\r\n     */\r\n    private async decodeData(data: DataView): Promise<void> {\r\n        switch (data.getUint8(Messages.BUFFER_INDEX_MSG_TYPE)) {\r\n            case Constants.MESSAGE_CHANNEL_BROADCAST_DATA:\r\n            case Constants.MESSAGE_CHANNEL_ACKNOWLEDGED_DATA:\r\n            case Constants.MESSAGE_CHANNEL_BURST_DATA:\r\n                if (this.deviceId === 0 && this.channel != undefined) {\r\n                    await this.write(Messages.requestMessage(this.channel, Constants.MESSAGE_CHANNEL_ID));\r\n                }\r\n                this.updateState(this.deviceId, data);\r\n                break;\r\n            case Constants.MESSAGE_CHANNEL_ID:\r\n                this.deviceId = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA, true);\r\n                this.transmissionType = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}\r\n","/*\r\n * ANT+ profile: https://www.thisisant.com/developer/ant-plus/device-profiles/#526_tab\r\n * Spec sheet: https://www.thisisant.com/resources/heart-rate-monitor/\r\n */\r\n\r\nimport { Page, PageState, updateState } from \"./heartRateUtils.js\";\r\nimport { HeartRateSensorState } from \"./heartRateSensorState.js\";\r\nimport { AntPlusSensor } from \"../antPlusSensor.js\";\r\n\r\n/**\r\n * Represents a Heart Rate sensor.\r\n * This class extends the AntPlusSensor class to handle specific data related to heart rate monitoring.\r\n *\r\n * @category Sensors\r\n */\r\nexport class HeartRateSensor extends AntPlusSensor {\r\n    /**\r\n     * The device type code for Heart Rate sensors.\r\n     * @type {number}\r\n     * @readonly\r\n     */\r\n    static deviceType: number = 120;\r\n\r\n    /**\r\n     * Attaches the sensor to a specified ANT+ channel and initializes its state.\r\n     *\r\n     * @public\r\n     * @param {number} channel - The ANT+ channel number used for communication with the sensor.\r\n     * @param {number} deviceId - The unique identifier of the sensor device.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * const sensor = new HeartRateSensor();\r\n     * sensor.attach(1, 12345); // Attaches to channel 1 with device ID 12345\r\n     */\r\n    public async attach(channel: number, deviceId: number): Promise<void> {\r\n        await super.attachSensor(channel, \"receive\", deviceId, HeartRateSensor.deviceType, 0, 255, 8070);\r\n        this.state = new HeartRateSensorState(deviceId);\r\n    }\r\n\r\n    /**\r\n     * The current state of the Heart Rate sensor.\r\n     * @private\r\n     * @type {HeartRateSensorState}\r\n     */\r\n    private state!: HeartRateSensorState;\r\n\r\n    /**\r\n     * Represents the page information used in communication with the sensor.\r\n     * @private\r\n     * @type {Page}\r\n     * @default { oldPage: -1, pageState: PageState.INIT_PAGE }\r\n     */\r\n    private page: Page = {\r\n        oldPage: -1,\r\n        pageState: PageState.INIT_PAGE,\r\n    };\r\n\r\n    /**\r\n     * Updates the state of the sensor based on incoming data.\r\n     *\r\n     * @protected\r\n     * @param {number} deviceId - The unique identifier of the sensor device.\r\n     * @param {DataView} data - The raw data buffer received from the sensor.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * const dataBuffer = getDataFromSensor(); // assume this function gets data from a sensor\r\n     * sensor.updateState(12345, dataBuffer);\r\n     */\r\n    protected updateState(deviceId: number, data: DataView): void {\r\n        this.state.DeviceId = deviceId;\r\n        updateState(this, this.state, this.page, data);\r\n    }\r\n}\r\n","import { AntPlusBaseSensor } from \"./antPlusBaseSensor.js\";\r\nimport { Constants } from \"../types/constants.js\";\r\nimport { Messages } from \"../utils/messages.js\";\r\nimport { USBDriverBase } from \"../types/usbDriverBase.js\";\r\n\r\n/**\r\n * Abstract base class for scanning and decoding data from ANT+ sensors.\r\n * This class provides methods to scan for sensors, handle sensor data, and manage sensor states.\r\n */\r\nexport abstract class AntPlusScanner extends AntPlusBaseSensor {\r\n    /**\r\n     * Returns the type of device being scanned for.\r\n     *\r\n     * @protected\r\n     * @returns {number} The numeric code representing the device type.\r\n     */\r\n    protected abstract deviceType(): number;\r\n\r\n    /**\r\n     * Creates a new state for the device if it does not already exist.\r\n     *\r\n     * @protected\r\n     * @param {number} deviceId - The unique identifier of the device.\r\n     */\r\n    protected abstract createStateIfNew(deviceId: number): void;\r\n\r\n    /**\r\n     * Updates the RSSI (Received Signal Strength Indicator) and the signal threshold for the specified device.\r\n     *\r\n     * @protected\r\n     * @param {number} deviceId - The unique identifier of the device.\r\n     * @param {number} rssi - The received signal strength indicator of the device.\r\n     * @param {number} threshold - The signal threshold value for the device.\r\n     */\r\n    protected abstract updateRssiAndThreshold(deviceId: number, rssi: number, threshold: number): void;\r\n\r\n    /**\r\n     * Constructs an instance of the AntPlusScanner class.\r\n     *\r\n     * @param {USBDriverBase} stick - The USB driver instance used for communication with the ANT+ stick.\r\n     */\r\n    constructor(stick: USBDriverBase) {\r\n        super(stick);\r\n        this.decodeDataCbk = this.decodeData.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Initiates a scan for ANT+ sensors by receiving broadcast messages.\r\n     *\r\n     * @public\r\n     * @returns {Promise<void>} A promise that resolves when the scanning process is complete.\r\n     *\r\n     * @example\r\n     * // Example usage:\r\n     * const scanner = new AntPlusScanner();\r\n     * scanner.scan();\r\n     */\r\n    public async scan(): Promise<void> {\r\n        return await super.scan(\"receive\");\r\n    }\r\n\r\n    /**\r\n     * Unsupported method for attaching to a sensor. Throws an error when called.\r\n     *\r\n     * @protected\r\n     * @throws {Error} Always throws an error indicating that attaching is unsupported.\r\n     */\r\n    protected attach() {\r\n        throw new Error(\"attach unsupported\");\r\n    }\r\n\r\n    /**\r\n     * Unsupported method for sending data to a sensor. Throws an error when called.\r\n     *\r\n     * @protected\r\n     * @throws {Error} Always throws an error indicating that sending is unsupported.\r\n     */\r\n    protected send(): Promise<void> {\r\n        throw new Error(\"send unsupported\");\r\n    }\r\n\r\n    /**\r\n     * Decodes the incoming data from the ANT+ sensors and updates the sensor state.\r\n     *\r\n     * @private\r\n     * @param {DataView} data - The raw data buffer received from the ANT+ sensor.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * // Example usage:\r\n     * const dataBuffer = getDataFromSensor(); // assume this function gets data from a sensor\r\n     * decodeData(dataBuffer);\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/require-await\r\n    private async decodeData(data: DataView): Promise<void> {\r\n        if (data.byteLength <= Messages.BUFFER_INDEX_EXT_MSG_BEGIN + 3 || !(data.getUint8(Messages.BUFFER_INDEX_EXT_MSG_BEGIN) & 0x80)) {\r\n            const bytesArray = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\r\n            console.log(\r\n                \"wrong message format\",\r\n                Array.from(bytesArray)\r\n                    .map((byte) => byte.toString(16))\r\n                    .join(\" \")\r\n            );\r\n            return;\r\n        }\r\n\r\n        const deviceId = data.getUint16(Messages.BUFFER_INDEX_EXT_MSG_BEGIN + 1, true);\r\n        console.log(this.deviceId);\r\n        const deviceType = data.getUint8(Messages.BUFFER_INDEX_EXT_MSG_BEGIN + 3);\r\n\r\n        if (deviceType !== this.deviceType()) {\r\n            return;\r\n        }\r\n\r\n        this.createStateIfNew(deviceId);\r\n\r\n        // Check if the RSSI and threshold should be updated\r\n        if (data.getUint8(Messages.BUFFER_INDEX_EXT_MSG_BEGIN) & 0x40) {\r\n            if (data.getUint8(Messages.BUFFER_INDEX_EXT_MSG_BEGIN + 5) === 0x20) {\r\n                const rssi = data.getInt8(Messages.BUFFER_INDEX_EXT_MSG_BEGIN + 6);\r\n                const threshold = data.getInt8(Messages.BUFFER_INDEX_EXT_MSG_BEGIN + 7);\r\n                this.updateRssiAndThreshold(deviceId, rssi, threshold);\r\n            }\r\n        }\r\n\r\n        // Handle different message types\r\n        switch (data.getUint8(Messages.BUFFER_INDEX_MSG_TYPE)) {\r\n            case Constants.MESSAGE_CHANNEL_BROADCAST_DATA:\r\n            case Constants.MESSAGE_CHANNEL_ACKNOWLEDGED_DATA:\r\n            case Constants.MESSAGE_CHANNEL_BURST_DATA:\r\n                this.updateState(deviceId, data);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}\r\n","import { StrideSpeedDistanceScanner } from \"./strideSpeedDistanceScanner.js\";\r\nimport { StrideSpeedDistanceScanState } from \"./strideSpeedDistanceScanState.js\";\r\nimport { StrideSpeedDistanceSensor } from \"./strideSpeedDistanceSensor.js\";\r\nimport { StrideSpeedDistanceSensorState } from \"./strideSpeedDistanceSensorState.js\";\r\nimport { Messages } from \"../../utils/messages.js\";\r\n\r\n/**\r\n * Updates the state of a Stride-Based Speed and Distance Monitor (SDM) sensor or scanner\r\n * based on the data received from the sensor.\r\n *\r\n * @param {StrideSpeedDistanceSensor | StrideSpeedDistanceScanner} sensor - The sensor or scanner instance emitting the data.\r\n * @param {StrideSpeedDistanceSensorState | StrideSpeedDistanceScanState} state - The current state of the sensor or scanner.\r\n * @param {DataView} data - The raw data buffer received from the sensor.\r\n * @returns {void}\r\n *\r\n * @example\r\n * const sensor = new StrideSpeedDistanceSensor();\r\n * const state = new StrideSpeedDistanceSensorState(12345);\r\n * const dataBuffer = getDataFromSensor(); // Assume this function gets data from a sensor\r\n * updateState(sensor, state, dataBuffer);\r\n */\r\nexport function updateState(sensor: StrideSpeedDistanceSensor | StrideSpeedDistanceScanner, state: StrideSpeedDistanceSensorState | StrideSpeedDistanceScanState, data: DataView) {\r\n    const page = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA);\r\n\r\n    if (page === 1) {\r\n        state.TimeFractional = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1);\r\n        state.TimeInteger = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2);\r\n        state.DistanceInteger = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\r\n        state.DistanceFractional = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 4) >>> 4;\r\n        state.SpeedInteger = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 4) & 0x0f;\r\n        state.SpeedFractional = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 5);\r\n        state.StrideCount = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 6);\r\n        state.UpdateLatency = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 7);\r\n    } else if (page >= 2 && page <= 15) {\r\n        state.CadenceInteger = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\r\n        state.CadenceFractional = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 4) >>> 4;\r\n        state.SpeedInteger = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 4) & 0x0f;\r\n        state.SpeedFractional = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 5);\r\n        state.Status = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 7);\r\n\r\n        switch (page) {\r\n            case 3:\r\n                state.Calories = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 6);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    sensor.emit(\"ssddata\", state);\r\n    sensor.emit(\"ssdData\", state);\r\n}\r\n","/**\n * Represents the state of a Stride-Based Speed and Distance Monitor (SDM) sensor.\n * This class holds the data fields associated with the SDM sensor's state, including device ID,\n * speed, distance, cadence, and other relevant metrics.\n */\nexport class StrideSpeedDistanceSensorState {\n    /**\n     * Creates an instance of the StrideSpeedDistanceSensorState.\n     *\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @example\n     * const sensorState = new StrideSpeedDistanceSensorState(12345);\n     */\n    constructor(deviceId: number) {\n        this.DeviceId = deviceId;\n    }\n\n    /**\n     * The unique identifier of the sensor device.\n     * @type {number}\n     */\n    DeviceId: number;\n\n    /**\n     * The fractional part of the elapsed time in seconds.\n     * @type {number | undefined}\n     */\n    TimeFractional: number | undefined;\n\n    /**\n     * The integer part of the elapsed time in seconds.\n     * @type {number | undefined}\n     */\n    TimeInteger: number | undefined;\n\n    /**\n     * The integer part of the total distance traveled in meters.\n     * @type {number | undefined}\n     */\n    DistanceInteger: number | undefined;\n\n    /**\n     * The fractional part of the total distance traveled in meters.\n     * @type {number | undefined}\n     */\n    DistanceFractional: number | undefined;\n\n    /**\n     * The integer part of the speed in meters per second.\n     * @type {number | undefined}\n     */\n    SpeedInteger: number | undefined;\n\n    /**\n     * The fractional part of the speed in meters per second.\n     * @type {number | undefined}\n     */\n    SpeedFractional: number | undefined;\n\n    /**\n     * The total number of strides counted.\n     * @type {number | undefined}\n     */\n    StrideCount: number | undefined;\n\n    /**\n     * The latency in milliseconds between updates.\n     * @type {number | undefined}\n     */\n    UpdateLatency: number | undefined;\n\n    /**\n     * The integer part of the cadence in strides per minute.\n     * @type {number | undefined}\n     */\n    CadenceInteger: number | undefined;\n\n    /**\n     * The fractional part of the cadence in strides per minute.\n     * @type {number | undefined}\n     */\n    CadenceFractional: number | undefined;\n\n    /**\n     * The status of the sensor, represented by a numeric value.\n     * @type {number | undefined}\n     */\n    Status: number | undefined;\n\n    /**\n     * The total calories burned, if available.\n     * @type {number | undefined}\n     */\n    Calories: number | undefined;\n}\n","import { StrideSpeedDistanceSensorState } from \"./strideSpeedDistanceSensorState.js\";\n\n/**\n * Represents the state of a Stride-Based Speed and Distance Monitor (SDM) sensor during scanning.\n * Extends the StrideSpeedDistanceSensorState to include additional fields specific to scanning,\n * such as RSSI (Received Signal Strength Indicator) and the signal threshold.\n */\nexport class StrideSpeedDistanceScanState extends StrideSpeedDistanceSensorState {\n    /**\n     * The received signal strength indicator (RSSI) of the sensor signal.\n     * @type {number | undefined}\n     */\n    Rssi: number | undefined;\n\n    /**\n     * The signal threshold value.\n     * @type {number | undefined}\n     */\n    Threshold: number | undefined;\n}\n","/*\r\n * ANT+ profile: https://www.thisisant.com/developer/ant-plus/device-profiles/#528_tab\r\n * Spec sheet: https://www.thisisant.com/resources/stride-based-speed-and-distance-monitor/\r\n */\r\n\r\nimport { AntPlusSensor } from \"../antPlusSensor.js\";\r\nimport { updateState } from \"./strideSpeedDistanceUtils.js\";\r\nimport { StrideSpeedDistanceSensorState } from \"./strideSpeedDistanceSensorState.js\";\r\n\r\n/**\r\n * Represents a Stride-Based Speed and Distance Monitor (SDM) sensor.\r\n * This class extends the AntPlusSensor class to provide specific functionality for handling SDM sensor data.\r\n *\r\n * @category Sensors\r\n */\r\nexport class StrideSpeedDistanceSensor extends AntPlusSensor {\r\n    /**\r\n     * The device type code for Stride-Based Speed and Distance Monitor (SDM) sensors.\r\n     * @type {number}\r\n     * @readonly\r\n     */\r\n    static deviceType: number = 124;\r\n\r\n    /**\r\n     * Attaches the sensor to a specified ANT+ channel and initializes its state.\r\n     *\r\n     * @public\r\n     * @param {number} channel - The ANT+ channel number used for communication with the sensor.\r\n     * @param {number} deviceId - The unique identifier of the sensor device.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * const sensor = new StrideSpeedDistanceSensor();\r\n     * sensor.attach(1, 12345); // Attaches to channel 1 with device ID 12345\r\n     */\r\n    public async attach(channel: number, deviceId: number): Promise<void> {\r\n        await super.attachSensor(channel, \"receive\", deviceId, StrideSpeedDistanceSensor.deviceType, 0, 255, 8134);\r\n        this.state = new StrideSpeedDistanceSensorState(deviceId);\r\n    }\r\n\r\n    /**\r\n     * The current state of the Stride-Based Speed and Distance Monitor sensor.\r\n     * @private\r\n     * @type {StrideSpeedDistanceSensorState}\r\n     */\r\n    private state!: StrideSpeedDistanceSensorState;\r\n\r\n    /**\r\n     * Updates the state of the sensor based on incoming data.\r\n     *\r\n     * @protected\r\n     * @param {number} deviceId - The unique identifier of the sensor device.\r\n     * @param {DataView} data - The raw data buffer received from the sensor.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * const dataBuffer = getDataFromSensor(); // assume this function gets data from a sensor\r\n     * sensor.updateState(12345, dataBuffer);\r\n     */\r\n    protected updateState(deviceId: number, data: DataView) {\r\n        this.state.DeviceId = deviceId;\r\n        updateState(this, this.state, data);\r\n    }\r\n}\r\n","import { SpeedCadenceScanner } from \"./speedCadenceScanner.js\";\r\nimport { SpeedCadenceScanState } from \"./speedCadenceScanState.js\";\r\nimport { SpeedCadenceSensor } from \"./speedCadenceSensor.js\";\r\nimport { SpeedCadenceSensorState } from \"./speedCadenceSensorState.js\";\r\nimport { Messages } from \"../../utils/messages.js\";\r\n\r\n/**\r\n * Updates the state of a Speed and Cadence sensor or scanner based on the incoming data.\r\n * Calculates the cadence and speed based on the revolution counts and event times provided in the data buffer.\r\n *\r\n * @param {SpeedCadenceSensor | SpeedCadenceScanner} sensor - The sensor or scanner instance emitting the data.\r\n * @param {SpeedCadenceSensorState | SpeedCadenceScanState} state - The current state of the sensor or scanner.\r\n * @param {DataView} data - The raw data buffer received from the sensor.\r\n * @returns {void}\r\n *\r\n * @example\r\n * const sensor = new SpeedCadenceSensor();\r\n * const state = new SpeedCadenceSensorState(12345);\r\n * const dataBuffer = getDataFromSensor(); // Assume this function gets data from a sensor\r\n * updateState(sensor, state, dataBuffer);\r\n */\r\nexport function updateState(sensor: SpeedCadenceSensor | SpeedCadenceScanner, state: SpeedCadenceSensorState | SpeedCadenceScanState, data: DataView) {\r\n    // Get old state for calculating cumulative values\r\n    const oldCadenceTime = state.CadenceEventTime ?? 0;\r\n    const oldCadenceCount = state.CumulativeCadenceRevolutionCount ?? 0;\r\n    const oldSpeedTime = state.SpeedEventTime ?? 0;\r\n    const oldSpeedCount = state.CumulativeSpeedRevolutionCount ?? 0;\r\n\r\n    let cadenceTime = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA, true);\r\n    let cadenceCount = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 2, true);\r\n    let speedEventTime = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 4, true);\r\n    let speedRevolutionCount = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 6, true);\r\n\r\n    if (cadenceTime !== oldCadenceTime) {\r\n        state.CadenceEventTime = cadenceTime;\r\n        state.CumulativeCadenceRevolutionCount = cadenceCount;\r\n\r\n        if (oldCadenceTime > cadenceTime) {\r\n            // Hit rollover value\r\n            cadenceTime += 1024 * 64;\r\n        }\r\n\r\n        if (oldCadenceCount > cadenceCount) {\r\n            // Hit rollover value\r\n            cadenceCount += 1024 * 64;\r\n        }\r\n\r\n        const cadence = (60 * (cadenceCount - oldCadenceCount) * 1024) / (cadenceTime - oldCadenceTime);\r\n        if (!isNaN(cadence)) {\r\n            state.CalculatedCadence = cadence;\r\n            sensor.emit(\"cadenceData\", state);\r\n        }\r\n    }\r\n\r\n    if (speedEventTime !== oldSpeedTime) {\r\n        state.SpeedEventTime = speedEventTime;\r\n        state.CumulativeSpeedRevolutionCount = speedRevolutionCount;\r\n\r\n        if (oldSpeedTime > speedEventTime) {\r\n            // Hit rollover value\r\n            speedEventTime += 1024 * 64;\r\n        }\r\n\r\n        if (oldSpeedCount > speedRevolutionCount) {\r\n            // Hit rollover value\r\n            speedRevolutionCount += 1024 * 64;\r\n        }\r\n\r\n        const distance = sensor.wheelCircumference * (speedRevolutionCount - oldSpeedCount);\r\n        state.CalculatedDistance = distance;\r\n\r\n        // Calculate speed in m/sec\r\n        const speed = (distance * 1024) / (speedEventTime - oldSpeedTime);\r\n        if (!isNaN(speed)) {\r\n            state.CalculatedSpeed = speed;\r\n            sensor.emit(\"speedData\", state);\r\n        }\r\n    }\r\n}\r\n","/**\n * Represents the state of a Speed and Cadence sensor.\n * This class holds the data fields associated with the state of a Speed and Cadence sensor, including\n * cadence, speed, distance, and event times.\n */\nexport class SpeedCadenceSensorState {\n    /**\n     * Creates an instance of the SpeedCadenceSensorState.\n     *\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @example\n     * const sensorState = new SpeedCadenceSensorState(12345);\n     */\n    constructor(deviceId: number) {\n        this.DeviceId = deviceId;\n    }\n\n    /**\n     * The unique identifier of the sensor device.\n     * @type {number}\n     */\n    DeviceId: number;\n\n    /**\n     * The time of the last cadence event in seconds, measured as a fractional part.\n     * @type {number | undefined}\n     */\n    CadenceEventTime: number | undefined;\n\n    /**\n     * The cumulative count of cadence revolutions since the sensor started.\n     * @type {number | undefined}\n     */\n    CumulativeCadenceRevolutionCount: number | undefined;\n\n    /**\n     * The time of the last speed event in seconds, measured as a fractional part.\n     * @type {number | undefined}\n     */\n    SpeedEventTime: number | undefined;\n\n    /**\n     * The cumulative count of speed revolutions since the sensor started.\n     * @type {number | undefined}\n     */\n    CumulativeSpeedRevolutionCount: number | undefined;\n\n    /**\n     * The calculated cadence in revolutions per minute (RPM).\n     * @type {number | undefined}\n     */\n    CalculatedCadence: number | undefined;\n\n    /**\n     * The calculated distance traveled in meters.\n     * @type {number | undefined}\n     */\n    CalculatedDistance: number | undefined;\n\n    /**\n     * The calculated speed in meters per second (m/s).\n     * @type {number | undefined}\n     */\n    CalculatedSpeed: number | undefined;\n}\n","import { SpeedCadenceSensorState } from \"./speedCadenceSensorState.js\";\n\n/**\n * Represents the state of a Speed and Cadence sensor during scanning.\n * Extends the SpeedCadenceSensorState to include additional fields specific to scanning,\n * such as RSSI (Received Signal Strength Indicator) and signal threshold.\n */\nexport class SpeedCadenceScanState extends SpeedCadenceSensorState {\n    /**\n     * The received signal strength indicator (RSSI) of the sensor signal.\n     * @type {number | undefined}\n     */\n    Rssi: number | undefined;\n\n    /**\n     * The signal threshold value.\n     * @type {number | undefined}\n     */\n    Threshold: number | undefined;\n}\n","/*\r\n * ANT+ profile: https://www.thisisant.com/developer/ant-plus/device-profiles/#523_tab\r\n * Spec sheet: https://www.thisisant.com/resources/bicycle-speed-and-cadence/\r\n */\r\n\r\nimport { AntPlusSensor } from \"../antPlusSensor.js\";\r\nimport { updateState } from \"./speedCadenceUtils.js\";\r\nimport { SpeedCadenceSensorState } from \"./speedCadenceSensorState.js\";\r\n\r\n/**\r\n * Represents a Bicycle Speed and Cadence sensor.\r\n * This class extends the AntPlusSensor class to handle specific data related to speed and cadence.\r\n *\r\n * @category Sensors\r\n */\r\nexport class SpeedCadenceSensor extends AntPlusSensor {\r\n    /**\r\n     * The device type code for Bicycle Speed and Cadence sensors.\r\n     * @type {number}\r\n     * @readonly\r\n     */\r\n    static deviceType: number = 0x79;\r\n\r\n    /**\r\n     * The wheel circumference in meters, used to calculate speed.\r\n     * @type {number}\r\n     * @default 2.199\r\n     */\r\n    wheelCircumference: number = 2.199; // default 70cm wheel\r\n\r\n    /**\r\n     * Sets the wheel circumference for speed calculation.\r\n     *\r\n     * @public\r\n     * @param {number} wheelCircumference - The wheel circumference in meters.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * const sensor = new SpeedCadenceSensor();\r\n     * sensor.setWheelCircumference(2.105); // Sets the wheel circumference to 2.105 meters\r\n     */\r\n    public setWheelCircumference(wheelCircumference: number) {\r\n        this.wheelCircumference = wheelCircumference;\r\n    }\r\n\r\n    /**\r\n     * Attaches the sensor to a specified ANT+ channel and initializes its state.\r\n     *\r\n     * @public\r\n     * @param {number} channel - The ANT+ channel number used for communication with the sensor.\r\n     * @param {number} deviceId - The unique identifier of the sensor device.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * const sensor = new SpeedCadenceSensor();\r\n     * sensor.attach(1, 12345); // Attaches to channel 1 with device ID 12345\r\n     */\r\n    public async attach(channel: number, deviceId: number): Promise<void> {\r\n        await super.attachSensor(channel, \"receive\", deviceId, SpeedCadenceSensor.deviceType, 0, 255, 8086);\r\n        this.state = new SpeedCadenceSensorState(deviceId);\r\n    }\r\n\r\n    /**\r\n     * The current state of the Bicycle Speed and Cadence sensor.\r\n     * @private\r\n     * @type {SpeedCadenceSensorState}\r\n     */\r\n    private state!: SpeedCadenceSensorState;\r\n\r\n    /**\r\n     * Updates the state of the sensor based on incoming data.\r\n     *\r\n     * @protected\r\n     * @param {number} deviceId - The unique identifier of the sensor device.\r\n     * @param {DataView} data - The raw data buffer received from the sensor.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * const dataBuffer = getDataFromSensor(); // assume this function gets data from a sensor\r\n     * sensor.updateState(12345, dataBuffer);\r\n     */\r\n    protected updateState(deviceId: number, data: DataView) {\r\n        this.state.DeviceId = deviceId;\r\n        updateState(this, this.state, data);\r\n    }\r\n}\r\n","import { SpeedScanner } from \"./speedScanner.js\";\r\nimport { SpeedScanState } from \"./speedScanState.js\";\r\nimport { SpeedSensor } from \"./speedSensor.js\";\r\nimport { SpeedSensorState } from \"./speedSensorState.js\";\r\nimport { Messages } from \"../../utils/messages.js\";\r\n\r\nconst TOGGLE_MASK = 0x80;\r\n\r\n/**\r\n * Updates the state of a Speed sensor or scanner based on the incoming data.\r\n * Decodes various pages of data to update the state, including cumulative operating time,\r\n * manufacturer details, hardware and software versions, battery status, motion status, and speed.\r\n *\r\n * @param {SpeedSensor | SpeedScanner} sensor - The sensor or scanner instance emitting the data.\r\n * @param {SpeedSensorState | SpeedScanState} state - The current state of the sensor or scanner.\r\n * @param {DataView} data - The raw data buffer received from the sensor.\r\n * @returns {void}\r\n * @example\r\n * const sensor = new SpeedSensor();\r\n * const state = new SpeedSensorState(12345);\r\n * const dataBuffer = getDataFromSensor(); // Assume this function gets data from a sensor\r\n * updateState(sensor, state, dataBuffer);\r\n */\r\nexport function updateState(sensor: SpeedSensor | SpeedScanner, state: SpeedSensorState | SpeedScanState, data: DataView) {\r\n    const pageNum = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA);\r\n    switch (\r\n        pageNum & ~TOGGLE_MASK // Check the new pages and remove the toggle bit\r\n    ) {\r\n        case 1:\r\n            // Decode the cumulative operating time\r\n            state.OperatingTime = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1);\r\n            state.OperatingTime |= data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2) << 8;\r\n            state.OperatingTime |= data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3) << 16;\r\n            state.OperatingTime *= 2;\r\n            break;\r\n        case 2:\r\n            // Decode the Manufacturer ID\r\n            state.ManId = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1);\r\n            // Decode the 4-byte serial number\r\n            state.SerialNumber = state.DeviceId;\r\n            state.SerialNumber |= data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 2, true) << 16;\r\n            state.SerialNumber >>>= 0;\r\n            break;\r\n        case 3:\r\n            // Decode hardware version, software version, and model number\r\n            state.HwVersion = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1);\r\n            state.SwVersion = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2);\r\n            state.ModelNum = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\r\n            break;\r\n        case 4: {\r\n            // Decode battery status\r\n            const batteryFrac = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2);\r\n            const batteryStatus = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\r\n            state.BatteryVoltage = (batteryStatus & 0x0f) + batteryFrac / 256;\r\n            const batteryFlags = (batteryStatus & 0x70) >>> 4;\r\n            state.BatteryStatusBit = batteryFlags;\r\n            switch (batteryFlags) {\r\n                case 1:\r\n                    state.BatteryStatus = \"New\";\r\n                    break;\r\n                case 2:\r\n                    state.BatteryStatus = \"Good\";\r\n                    break;\r\n                case 3:\r\n                    state.BatteryStatus = \"Ok\";\r\n                    break;\r\n                case 4:\r\n                    state.BatteryStatus = \"Low\";\r\n                    break;\r\n                case 5:\r\n                    state.BatteryStatus = \"Critical\";\r\n                    break;\r\n                default:\r\n                    state.BatteryVoltage = undefined;\r\n                    state.BatteryStatus = \"Invalid\";\r\n                    break;\r\n            }\r\n            break;\r\n        }\r\n        case 5:\r\n            // Decode motion status\r\n            state.Motion = (data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1) & 0x01) === 0x01;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    // Get old state for calculating cumulative values\r\n    const oldSpeedTime = state.SpeedEventTime ?? 0;\r\n    const oldSpeedCount = state.CumulativeSpeedRevolutionCount ?? 0;\r\n\r\n    let speedEventTime = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 4, true);\r\n    let speedRevolutionCount = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 6, true);\r\n\r\n    if (speedEventTime !== oldSpeedTime) {\r\n        state.SpeedEventTime = speedEventTime;\r\n        state.CumulativeSpeedRevolutionCount = speedRevolutionCount;\r\n\r\n        if (oldSpeedTime > speedEventTime) {\r\n            // Hit rollover value\r\n            speedEventTime += 1024 * 64;\r\n        }\r\n\r\n        if (oldSpeedCount > speedRevolutionCount) {\r\n            // Hit rollover value\r\n            speedRevolutionCount += 1024 * 64;\r\n        }\r\n\r\n        const distance = sensor.wheelCircumference * (speedRevolutionCount - oldSpeedCount);\r\n        state.CalculatedDistance = distance;\r\n\r\n        // Calculate speed in m/sec\r\n        const speed = (distance * 1024) / (speedEventTime - oldSpeedTime);\r\n        if (!isNaN(speed)) {\r\n            state.CalculatedSpeed = speed;\r\n            sensor.emit(\"speedData\", state);\r\n        }\r\n    }\r\n}\r\n","/**\n * Represents the state of a Speed sensor.\n * This class holds the data fields associated with the state of a Speed sensor, including\n * speed, distance, event times, and various sensor-specific details.\n */\nexport class SpeedSensorState {\n    /**\n     * Creates an instance of the SpeedSensorState.\n     *\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @example\n     * const sensorState = new SpeedSensorState(12345);\n     */\n    constructor(deviceId: number) {\n        this.DeviceId = deviceId;\n    }\n\n    /**\n     * The unique identifier of the sensor device.\n     * @type {number}\n     */\n    DeviceId: number;\n\n    /**\n     * The time of the last speed event in seconds, measured as a fractional part.\n     * @type {number | undefined}\n     */\n    SpeedEventTime: number | undefined;\n\n    /**\n     * The cumulative count of speed revolutions since the sensor started.\n     * @type {number | undefined}\n     */\n    CumulativeSpeedRevolutionCount: number | undefined;\n\n    /**\n     * The calculated distance traveled in meters.\n     * @type {number | undefined}\n     */\n    CalculatedDistance: number | undefined;\n\n    /**\n     * The calculated speed in meters per second (m/s).\n     * @type {number | undefined}\n     */\n    CalculatedSpeed: number | undefined;\n\n    /**\n     * The cumulative operating time of the sensor in seconds.\n     * @type {number | undefined}\n     */\n    OperatingTime?: number;\n\n    /**\n     * The manufacturer ID of the sensor.\n     * @type {number | undefined}\n     */\n    ManId?: number;\n\n    /**\n     * The serial number of the sensor.\n     * @type {number | undefined}\n     */\n    SerialNumber?: number;\n\n    /**\n     * The hardware version of the sensor.\n     * @type {number | undefined}\n     */\n    HwVersion?: number;\n\n    /**\n     * The software version of the sensor.\n     * @type {number | undefined}\n     */\n    SwVersion?: number;\n\n    /**\n     * The model number of the sensor.\n     * @type {number | undefined}\n     */\n    ModelNum?: number;\n\n    /**\n     * The battery voltage of the sensor.\n     * @type {number | undefined}\n     */\n    BatteryVoltage?: number;\n\n    /**\n     * The battery status of the sensor.\n     * Can be \"New\", \"Good\", \"Ok\", \"Low\", \"Critical\", or \"Invalid\".\n     * @type {\"New\" | \"Good\" | \"Ok\" | \"Low\" | \"Critical\" | \"Invalid\" | undefined}\n     */\n    BatteryStatus?: \"New\" | \"Good\" | \"Ok\" | \"Low\" | \"Critical\" | \"Invalid\";\n\n    /**\n     * The battery status bit of the sensor.\n     */\n    BatteryStatusBit?: number;\n\n    /**\n     * Indicates whether the sensor detects motion.\n     * @type {boolean | undefined}\n     */\n    Motion?: boolean;\n}\n","import { SpeedSensorState } from \"./speedSensorState.js\";\n\n/**\n * Represents the state of a Speed sensor during scanning.\n * Extends the SpeedSensorState to include additional fields specific to scanning,\n * such as RSSI (Received Signal Strength Indicator) and signal threshold.\n */\nexport class SpeedScanState extends SpeedSensorState {\n    /**\n     * The received signal strength indicator (RSSI) of the sensor signal.\n     * @type {number | undefined}\n     */\n    Rssi: number | undefined;\n\n    /**\n     * The signal threshold value for the sensor.\n     * @type {number | undefined}\n     */\n    Threshold: number | undefined;\n}\n","/*\r\n * ANT+ profile: https://www.thisisant.com/developer/ant-plus/device-profiles/#523_tab\r\n * Spec sheet: https://www.thisisant.com/resources/bicycle-speed-and-cadence/\r\n */\r\n\r\nimport { AntPlusSensor } from \"../antPlusSensor.js\";\r\nimport { updateState } from \"./speedUtils.js\";\r\nimport { SpeedSensorState } from \"./speedSensorState.js\";\r\n\r\n/**\r\n * Represents a Bicycle Speed sensor.\r\n * This class extends the AntPlusSensor class to handle specific data related to speed measurement.\r\n *\r\n * @category Sensors\r\n */\r\nexport class SpeedSensor extends AntPlusSensor {\r\n    /**\r\n     * The device type code for Bicycle Speed sensors.\r\n     * @type {number}\r\n     * @readonly\r\n     */\r\n    static deviceType: number = 0x7b;\r\n\r\n    /**\r\n     * The wheel circumference in meters, used to calculate speed.\r\n     * @type {number}\r\n     * @default 2.199\r\n     */\r\n    wheelCircumference: number = 2.199; // default 70cm wheel\r\n\r\n    /**\r\n     * Sets the wheel circumference for speed calculation.\r\n     *\r\n     * @public\r\n     * @param {number} wheelCircumference - The wheel circumference in meters.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * const sensor = new SpeedSensor();\r\n     * sensor.setWheelCircumference(2.105); // Sets the wheel circumference to 2.105 meters\r\n     */\r\n    public setWheelCircumference(wheelCircumference: number) {\r\n        this.wheelCircumference = wheelCircumference;\r\n    }\r\n\r\n    /**\r\n     * Attaches the sensor to a specified ANT+ channel and initializes its state.\r\n     *\r\n     * @public\r\n     * @param {number} channel - The ANT+ channel number used for communication with the sensor.\r\n     * @param {number} deviceId - The unique identifier of the sensor device.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * const sensor = new SpeedSensor();\r\n     * sensor.attach(1, 12345); // Attaches to channel 1 with device ID 12345\r\n     */\r\n    public async attach(channel: number, deviceId: number): Promise<void> {\r\n        await super.attachSensor(channel, \"receive\", deviceId, SpeedSensor.deviceType, 0, 255, 8118);\r\n        this.state = new SpeedSensorState(deviceId);\r\n    }\r\n\r\n    /**\r\n     * The current state of the Bicycle Speed sensor.\r\n     * @private\r\n     * @type {SpeedSensorState}\r\n     */\r\n    private state!: SpeedSensorState;\r\n\r\n    /**\r\n     * Updates the state of the sensor based on incoming data.\r\n     *\r\n     * @protected\r\n     * @param {number} deviceId - The unique identifier of the sensor device.\r\n     * @param {DataView} data - The raw data buffer received from the sensor.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * const dataBuffer = getDataFromSensor(); // assume this function gets data from a sensor\r\n     * sensor.updateState(12345, dataBuffer);\r\n     */\r\n    protected updateState(deviceId: number, data: DataView) {\r\n        this.state.DeviceId = deviceId;\r\n        updateState(this, this.state, data);\r\n    }\r\n}\r\n","import { CadenceScanner } from \"./cadenceScanner.js\";\r\nimport { CadenceScanState } from \"./cadenceScanState.js\";\r\nimport { CadenceSensor } from \"./cadenceSensor.js\";\r\nimport { CadenceSensorState } from \"./cadenceSensorState.js\";\r\nimport { Messages } from \"../../utils/messages.js\";\r\n\r\nconst TOGGLE_MASK = 0x80;\r\n\r\n/**\r\n * Updates the state of a Cadence sensor or scanner based on incoming data.\r\n * Decodes the data buffer and updates the sensor state accordingly, including\r\n * cumulative values such as operating time, manufacturer details, battery status,\r\n * and calculated cadence.\r\n *\r\n * @param {CadenceSensor | CadenceScanner} sensor - The sensor or scanner instance emitting the data.\r\n * @param {CadenceSensorState | CadenceScanState} state - The current state of the sensor or scanner.\r\n * @param {DataView} data - The raw data buffer received from the sensor.\r\n * @returns {void}\r\n */\r\nexport function updateState(sensor: CadenceSensor | CadenceScanner, state: CadenceSensorState | CadenceScanState, data: DataView): void {\r\n    const pageNum = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA);\r\n\r\n    switch (\r\n        pageNum & ~TOGGLE_MASK // Check the new pages and remove the toggle bit\r\n    ) {\r\n        case 1:\r\n            // Decode the cumulative operating time\r\n            state.OperatingTime = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1);\r\n            state.OperatingTime |= data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2) << 8;\r\n            state.OperatingTime |= data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3) << 16;\r\n            state.OperatingTime *= 2;\r\n            break;\r\n        case 2:\r\n            // Decode the Manufacturer ID\r\n            state.ManId = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1);\r\n            // Decode the 4-byte serial number\r\n            state.SerialNumber = state.DeviceId;\r\n            state.SerialNumber |= data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 2, true) << 16;\r\n            state.SerialNumber >>>= 0;\r\n            break;\r\n        case 3:\r\n            // Decode HW version, SW version, and model number\r\n            state.HwVersion = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1);\r\n            state.SwVersion = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2);\r\n            state.ModelNum = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\r\n            break;\r\n        case 4: {\r\n            const batteryFrac = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2);\r\n            const batteryStatus = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\r\n            state.BatteryVoltage = (batteryStatus & 0x0f) + batteryFrac / 256;\r\n            const batteryFlags = (batteryStatus & 0x70) >>> 4;\r\n            state.BatteryStatusBit = batteryFlags;\r\n            switch (batteryFlags) {\r\n                case 1:\r\n                    state.BatteryStatus = \"New\";\r\n                    break;\r\n                case 2:\r\n                    state.BatteryStatus = \"Good\";\r\n                    break;\r\n                case 3:\r\n                    state.BatteryStatus = \"Ok\";\r\n                    break;\r\n                case 4:\r\n                    state.BatteryStatus = \"Low\";\r\n                    break;\r\n                case 5:\r\n                    state.BatteryStatus = \"Critical\";\r\n                    break;\r\n                default:\r\n                    state.BatteryVoltage = undefined;\r\n                    state.BatteryStatus = \"Invalid\";\r\n                    break;\r\n            }\r\n            break;\r\n        }\r\n        case 5:\r\n            state.Motion = (data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1) & 0x01) === 0x01;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    // Get old state for calculating cumulative values\r\n    const oldCadenceTime = state.CadenceEventTime ?? 0;\r\n    const oldCadenceCount = state.CumulativeCadenceRevolutionCount ?? 0;\r\n\r\n    let cadenceTime = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 4, true);\r\n    let cadenceCount = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 6, true);\r\n\r\n    if (cadenceTime !== oldCadenceTime) {\r\n        state.CadenceEventTime = cadenceTime;\r\n        state.CumulativeCadenceRevolutionCount = cadenceCount;\r\n\r\n        if (oldCadenceTime > cadenceTime) {\r\n            // Handle rollover\r\n            cadenceTime += 1024 * 64;\r\n        }\r\n\r\n        if (oldCadenceCount > cadenceCount) {\r\n            // Handle rollover\r\n            cadenceCount += 1024 * 64;\r\n        }\r\n\r\n        const cadence = (60 * (cadenceCount - oldCadenceCount) * 1024) / (cadenceTime - oldCadenceTime);\r\n        if (!isNaN(cadence)) {\r\n            state.CalculatedCadence = cadence;\r\n            sensor.emit(\"cadenceData\", state);\r\n        }\r\n    }\r\n}\r\n","/**\n * Represents the state of a Cadence Sensor.\n * This class holds the data fields associated with the state of a cadence sensor,\n * including event times, revolution counts, and device information.\n */\nexport class CadenceSensorState {\n    /**\n     * Creates an instance of the CadenceSensorState.\n     *\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     *\n     * @example\n     * const sensorState = new CadenceSensorState(12345);\n     */\n    constructor(deviceId: number) {\n        this.DeviceId = deviceId;\n    }\n\n    /**\n     * The unique identifier of the sensor device.\n     * @type {number}\n     */\n    DeviceId: number;\n\n    /**\n     * The time of the last cadence event, in seconds.\n     * @type {number | undefined}\n     */\n    CadenceEventTime: number | undefined;\n\n    /**\n     * The cumulative number of cadence revolutions counted by the sensor.\n     * @type {number | undefined}\n     */\n    CumulativeCadenceRevolutionCount: number | undefined;\n\n    /**\n     * The calculated cadence in revolutions per minute (RPM).\n     * @type {number | undefined}\n     */\n    CalculatedCadence: number | undefined;\n\n    /**\n     * The cumulative operating time of the sensor in seconds.\n     * @type {number | undefined}\n     */\n    OperatingTime?: number;\n\n    /**\n     * The manufacturer ID of the sensor.\n     * @type {number | undefined}\n     */\n    ManId?: number;\n\n    /**\n     * The serial number of the sensor.\n     * @type {number | undefined}\n     */\n    SerialNumber?: number;\n\n    /**\n     * The hardware version of the sensor.\n     * @type {number | undefined}\n     */\n    HwVersion?: number;\n\n    /**\n     * The software version of the sensor.\n     * @type {number | undefined}\n     */\n    SwVersion?: number;\n\n    /**\n     * The model number of the sensor.\n     * @type {number | undefined}\n     */\n    ModelNum?: number;\n\n    /**\n     * The battery voltage of the sensor.\n     * @type {number | undefined}\n     */\n    BatteryVoltage?: number;\n\n    /**\n     * The battery status of the sensor.\n     * Can be one of the following: \"New\", \"Good\", \"Ok\", \"Low\", \"Critical\", \"Invalid\".\n     * @type {\"New\" | \"Good\" | \"Ok\" | \"Low\" | \"Critical\" | \"Invalid\" | undefined}\n     */\n    BatteryStatus?: \"New\" | \"Good\" | \"Ok\" | \"Low\" | \"Critical\" | \"Invalid\";\n\n    /**\n     * The battery status bit of the sensor.\n     */\n    BatteryStatusBit?: number;\n\n    /**\n     * Indicates whether the sensor is in motion.\n     * @type {boolean | undefined}\n     */\n    Motion?: boolean;\n}\n","import { CadenceSensorState } from \"./cadenceSensorState.js\";\n\n/**\n * Represents the state of a Cadence Sensor during scanning.\n * Extends the CadenceSensorState to include additional fields specific to scanning,\n * such as RSSI (Received Signal Strength Indicator) and signal threshold.\n */\nexport class CadenceScanState extends CadenceSensorState {\n    /**\n     * The received signal strength indicator (RSSI) of the sensor signal.\n     * Indicates the strength of the received signal from the cadence sensor.\n     * @type {number | undefined}\n     */\n    Rssi: number | undefined;\n\n    /**\n     * The signal threshold value for the sensor.\n     * Represents the minimum signal strength required for a reliable connection.\n     * @type {number | undefined}\n     */\n    Threshold: number | undefined;\n}\n","/*\r\n * ANT+ profile: https://www.thisisant.com/developer/ant-plus/device-profiles/#523_tab\r\n * Spec sheet: https://www.thisisant.com/resources/bicycle-speed-and-cadence/\r\n */\r\n\r\nimport { updateState } from \"./cadenceUtils.js\";\r\nimport { CadenceSensorState } from \"./cadenceSensorState.js\";\r\nimport { AntPlusSensor } from \"../antPlusSensor.js\";\r\n\r\n/**\r\n * Represents a Bicycle Cadence sensor.\r\n * This class extends the AntPlusSensor class to handle specific data related to cadence measurement.\r\n *\r\n * @category Sensors\r\n */\r\nexport class CadenceSensor extends AntPlusSensor {\r\n    /**\r\n     * The device type code for Bicycle Cadence sensors.\r\n     * @type {number}\r\n     * @readonly\r\n     */\r\n    static deviceType: number = 0x7a;\r\n\r\n    /**\r\n     * The wheel circumference in meters, used to calculate speed.\r\n     * @type {number}\r\n     * @default 2.199\r\n     */\r\n    wheelCircumference: number = 2.199; // default 70cm wheel\r\n\r\n    /**\r\n     * The current state of the Bicycle Cadence sensor.\r\n     * @private\r\n     * @type {CadenceSensorState}\r\n     */\r\n    private state!: CadenceSensorState;\r\n\r\n    /**\r\n     * Attaches the sensor to a specified ANT+ channel and initializes its state.\r\n     *\r\n     * @public\r\n     * @param {number} channel - The ANT+ channel number used for communication with the sensor.\r\n     * @param {number} deviceId - The unique identifier of the sensor device.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * const sensor = new CadenceSensor();\r\n     * sensor.attach(1, 12345); // Attaches to channel 1 with device ID 12345\r\n     */\r\n    public async attach(channel: number, deviceId: number): Promise<void> {\r\n        await super.attachSensor(channel, \"receive\", deviceId, CadenceSensor.deviceType, 0, 255, 8102);\r\n        this.state = new CadenceSensorState(deviceId);\r\n    }\r\n\r\n    /**\r\n     * Sets the wheel circumference for speed calculation.\r\n     *\r\n     * @public\r\n     * @param {number} wheelCircumference - The wheel circumference in meters.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * const sensor = new CadenceSensor();\r\n     * sensor.setWheelCircumference(2.105); // Sets the wheel circumference to 2.105 meters\r\n     */\r\n    public setWheelCircumference(wheelCircumference: number): void {\r\n        this.wheelCircumference = wheelCircumference;\r\n    }\r\n\r\n    /**\r\n     * Updates the state of the sensor based on incoming data.\r\n     *\r\n     * @protected\r\n     * @param {number} deviceId - The unique identifier of the sensor device.\r\n     * @param {DataView} data - The raw data buffer received from the sensor.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * const dataBuffer = getDataFromSensor(); // assume this function gets data from a sensor\r\n     * sensor.updateState(12345, dataBuffer);\r\n     */\r\n    protected updateState(deviceId: number, data: DataView): void {\r\n        this.state.DeviceId = deviceId;\r\n        updateState(this, this.state, data);\r\n    }\r\n}\r\n","import { BicyclePowerScanner } from \"./bicyclePowerScanner.js\";\r\nimport { BicyclePowerScanState } from \"./bicyclePowerScanState.js\";\r\nimport { BicyclePowerSensor } from \"./bicyclePowerSensor.js\";\r\nimport { BicyclePowerSensorState } from \"./bicyclePowerSensorState.js\";\r\nimport { Messages } from \"../../utils/messages.js\";\r\n\r\n/**\r\n * Updates the state of a Bicycle Power sensor or scanner based on incoming data.\r\n * Processes various types of data pages to update the sensor state, including calibration data,\r\n * pedal power, cadence, and torque calculations.\r\n *\r\n * @param {BicyclePowerSensor | BicyclePowerScanner} sensor - The sensor or scanner to update.\r\n * @param {BicyclePowerSensorState | BicyclePowerScanState} state - The state object representing the current state of the sensor.\r\n * @param {DataView} data - The raw data buffer received from the sensor.\r\n * @returns {void}\r\n */\r\nexport function updateState(sensor: BicyclePowerSensor | BicyclePowerScanner, state: BicyclePowerSensorState | BicyclePowerScanState, data: DataView): void {\r\n    const page = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA);\r\n\r\n    switch (page) {\r\n        case 0x01: {\r\n            const calId = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1);\r\n            if (calId === 0x10) {\r\n                const calParam = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2);\r\n                if (calParam === 0x01) {\r\n                    state.offset = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 6, true); // true for little-endian\r\n                }\r\n            }\r\n            break;\r\n        }\r\n        case 0x10: {\r\n            const pedalPower = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2);\r\n            if (pedalPower !== 0xff) {\r\n                if (pedalPower & 0x80) {\r\n                    state.PedalPower = pedalPower & 0x7f;\r\n                    state.RightPedalPower = state.PedalPower;\r\n                    state.LeftPedalPower = 100 - state.RightPedalPower;\r\n                } else {\r\n                    state.PedalPower = pedalPower & 0x7f;\r\n                    state.RightPedalPower = undefined;\r\n                    state.LeftPedalPower = undefined;\r\n                }\r\n            } else {\r\n                state.PedalPower = undefined;\r\n                state.RightPedalPower = undefined;\r\n                state.LeftPedalPower = undefined;\r\n            }\r\n\r\n            const cadence = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\r\n            state.Cadence = cadence !== 0xff ? cadence : undefined;\r\n\r\n            state.AccumulatedPower = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 4, true);\r\n            state.Power = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 6, true);\r\n            break;\r\n        }\r\n        case 0x20: {\r\n            const oldEventCount = state.EventCount ?? 0;\r\n            const oldTimeStamp = state.TimeStamp ?? 0;\r\n            const oldTorqueTicksStamp = state.TorqueTicksStamp ?? 0;\r\n\r\n            let eventCount = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1);\r\n            const slope = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 3, true);\r\n            let timeStamp = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 5, true);\r\n            let torqueTicksStamp = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 7, true);\r\n\r\n            if (timeStamp !== oldTimeStamp && eventCount !== oldEventCount) {\r\n                state.EventCount = eventCount;\r\n                if (oldEventCount > eventCount) {\r\n                    // Hit rollover value\r\n                    eventCount += 255;\r\n                }\r\n\r\n                state.TimeStamp = timeStamp;\r\n                if (oldTimeStamp > timeStamp) {\r\n                    // Hit rollover value\r\n                    timeStamp += 65400;\r\n                }\r\n\r\n                state.Slope = slope;\r\n                state.TorqueTicksStamp = torqueTicksStamp;\r\n                if (oldTorqueTicksStamp > torqueTicksStamp) {\r\n                    // Hit rollover value\r\n                    torqueTicksStamp += 65535;\r\n                }\r\n\r\n                const elapsedTime = (timeStamp - oldTimeStamp) * 0.0005;\r\n                const torqueTicks = torqueTicksStamp - oldTorqueTicksStamp;\r\n\r\n                const cadencePeriod = elapsedTime / (eventCount - oldEventCount); // seconds\r\n                const cadence = Math.round(60 / cadencePeriod); // RPM\r\n                state.CalculatedCadence = cadence;\r\n\r\n                const torqueFrequency = 1 / (elapsedTime / torqueTicks) - state.offset; // Hz\r\n                const torque = torqueFrequency / (slope / 10); // Nm\r\n                state.CalculatedTorque = torque;\r\n\r\n                state.CalculatedPower = (torque * cadence * Math.PI) / 30; // Watts\r\n            }\r\n            break;\r\n        }\r\n        default:\r\n            return;\r\n    }\r\n    sensor.emit(\"powerData\", state);\r\n}\r\n","/**\n * Represents the state of a Bicycle Power sensor.\n * Stores various metrics and calculated values related to bicycle power, such as pedal power, cadence, torque, and power.\n */\nexport class BicyclePowerSensorState {\n    /**\n     * Creates an instance of BicyclePowerSensorState.\n     *\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     */\n    constructor(deviceId: number) {\n        this.DeviceId = deviceId;\n    }\n\n    /**\n     * The unique identifier of the sensor device.\n     * @type {number}\n     */\n    DeviceId: number;\n\n    /**\n     * The total pedal power percentage.\n     * Represents the percentage of power produced by the pedal strokes.\n     * @type {number | undefined}\n     */\n    PedalPower?: number;\n\n    /**\n     * The power percentage from the right pedal.\n     * If available, represents the contribution of the right pedal to the total power.\n     * @type {number | undefined}\n     */\n    RightPedalPower?: number;\n\n    /**\n     * The power percentage from the left pedal.\n     * If available, represents the contribution of the left pedal to the total power.\n     * @type {number | undefined}\n     */\n    LeftPedalPower?: number;\n\n    /**\n     * The cadence value in revolutions per minute (RPM).\n     * Represents the number of pedal revolutions per minute.\n     * @type {number | undefined}\n     */\n    Cadence?: number;\n\n    /**\n     * The accumulated power in watts.\n     * Represents the total power output accumulated over time.\n     * @type {number | undefined}\n     */\n    AccumulatedPower?: number;\n\n    /**\n     * The current power output in watts.\n     * Represents the instantaneous power output of the cyclist.\n     * @type {number | undefined}\n     */\n    Power?: number;\n\n    /**\n     * The offset value used for torque calculations.\n     * @type {number}\n     * @default 0\n     */\n    offset: number = 0;\n\n    /**\n     * The event count value.\n     * Represents the number of events recorded by the sensor.\n     * @type {number | undefined}\n     */\n    EventCount?: number;\n\n    /**\n     * The timestamp of the last recorded event.\n     * Represents the time at which the last event was recorded.\n     * @type {number | undefined}\n     */\n    TimeStamp?: number;\n\n    /**\n     * The slope value used for torque calculations.\n     * Represents the slope or gradient used in the torque computation.\n     * @type {number | undefined}\n     */\n    Slope?: number;\n\n    /**\n     * The timestamp for the last torque tick.\n     * Represents the time at which the last torque measurement was recorded.\n     * @type {number | undefined}\n     */\n    TorqueTicksStamp?: number;\n\n    /**\n     * The calculated cadence in RPM.\n     * Represents the calculated cadence based on sensor data.\n     * @type {number | undefined}\n     */\n    CalculatedCadence?: number;\n\n    /**\n     * The calculated torque in Newton meters (Nm).\n     * Represents the torque calculated from sensor data.\n     * @type {number | undefined}\n     */\n    CalculatedTorque?: number;\n\n    /**\n     * The calculated power in watts.\n     * Represents the power calculated from torque and cadence data.\n     * @type {number | undefined}\n     */\n    CalculatedPower?: number;\n}\n","import { BicyclePowerSensorState } from \"./bicyclePowerSensorState.js\";\n\n/**\n * Represents the scan state of a Bicycle Power sensor.\n * Extends the BicyclePowerSensorState to include additional data related to signal quality during a scan.\n */\nexport class BicyclePowerScanState extends BicyclePowerSensorState {\n    /**\n     * Received Signal Strength Indicator (RSSI).\n     * Represents the strength of the received signal from the sensor.\n     * @type {number | undefined}\n     */\n    Rssi: number | undefined;\n\n    /**\n     * The threshold value for the RSSI.\n     * Represents the minimum acceptable signal strength for communication.\n     * @type {number | undefined}\n     */\n    Threshold: number | undefined;\n}\n","/*\r\n * ANT+ profile: https://www.thisisant.com/developer/ant-plus/device-profiles/#521_tab\r\n * Spec sheet: https://www.thisisant.com/resources/bicycle-power/\r\n */\r\n\r\nimport { updateState } from \"./bicyclePowerUtils.js\";\r\nimport { BicyclePowerSensorState } from \"./bicyclePowerSensorState.js\";\r\nimport { AntPlusSensor } from \"../antPlusSensor.js\";\r\n\r\n/**\r\n * Represents a Bicycle Power sensor.\r\n * This class extends the AntPlusSensor class to handle specific data related to bicycle power measurement.\r\n *\r\n * @category Sensors\r\n */\r\nexport class BicyclePowerSensor extends AntPlusSensor {\r\n    /**\r\n     * The device type code for Bicycle Power sensors.\r\n     * @type {number}\r\n     * @readonly\r\n     */\r\n    static deviceType: number = 0x0b;\r\n\r\n    /**\r\n     * The current state of the Bicycle Power sensor.\r\n     * @private\r\n     * @type {BicyclePowerSensorState}\r\n     */\r\n    private state!: BicyclePowerSensorState;\r\n\r\n    /**\r\n     * Attaches the sensor to a specified ANT+ channel and initializes its state.\r\n     *\r\n     * @public\r\n     * @param {number} channel - The ANT+ channel number used for communication with the sensor.\r\n     * @param {number} deviceId - The unique identifier of the sensor device.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * const sensor = new BicyclePowerSensor();\r\n     * sensor.attach(1, 12345); // Attaches to channel 1 with device ID 12345\r\n     */\r\n    public async attach(channel: number, deviceId: number): Promise<void> {\r\n        await super.attachSensor(channel, \"receive\", deviceId, BicyclePowerSensor.deviceType, 0, 255, 8182);\r\n        this.state = new BicyclePowerSensorState(deviceId);\r\n    }\r\n\r\n    /**\r\n     * Updates the state of the sensor based on incoming data.\r\n     *\r\n     * @protected\r\n     * @param {number} deviceId - The unique identifier of the sensor device.\r\n     * @param {DataView} data - The raw data buffer received from the sensor.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * const dataBuffer = getDataFromSensor(); // Assume this function gets data from a sensor\r\n     * sensor.updateState(12345, dataBuffer);\r\n     */\r\n    protected updateState(deviceId: number, data: DataView): void {\r\n        this.state.DeviceId = deviceId;\r\n        updateState(this, this.state, data);\r\n    }\r\n}\r\n","import { Messages } from \"../../utils/messages.js\";\r\nimport { FitnessEquipmentSensorState } from \"./fitnessEquipmentSensorState.js\";\r\nimport { FitnessEquipmentScanState } from \"./fitnessEquipmentScanState.js\";\r\nimport { FitnessEquipmentSensor } from \"./fitnessEquipmentSensor.js\";\r\nimport { FitnessEquipmentScanner } from \"./fitnessEquipmentScanner.js\";\r\n\r\n/**\r\n * Resets the state of the fitness equipment sensor by deleting all relevant properties.\r\n *\r\n * @param {FitnessEquipmentSensorState | FitnessEquipmentScanState} state - The state object of the fitness equipment sensor to reset.\r\n * @returns {void}\r\n */\r\nfunction resetState(state: FitnessEquipmentSensorState | FitnessEquipmentScanState): void {\r\n    delete state.ElapsedTime;\r\n    delete state.Distance;\r\n    delete state.RealSpeed;\r\n    delete state.VirtualSpeed;\r\n    delete state.HeartRate;\r\n    delete state.HeartRateSource;\r\n    delete state.CycleLength;\r\n    delete state.Incline;\r\n    delete state.Resistance;\r\n    delete state.METs;\r\n    delete state.CaloricBurnRate;\r\n    delete state.Calories;\r\n    delete state._EventCount0x19;\r\n    delete state._EventCount0x1A;\r\n    delete state.Cadence;\r\n    delete state.AccumulatedPower;\r\n    delete state.InstantaneousPower;\r\n    delete state.AveragePower;\r\n    delete state.TrainerStatus;\r\n    delete state.TargetStatus;\r\n    delete state.AscendedDistance;\r\n    delete state.DescendedDistance;\r\n    delete state.Strides;\r\n    delete state.Strokes;\r\n    delete state.WheelTicks;\r\n    delete state.WheelPeriod;\r\n    delete state.Torque;\r\n}\r\n\r\n/**\r\n * Updates the state of the fitness equipment sensor or scanner based on the received data.\r\n *\r\n * @param {FitnessEquipmentSensor | FitnessEquipmentScanner} sensor - The sensor or scanner instance to update.\r\n * @param {FitnessEquipmentSensorState | FitnessEquipmentScanState} state - The current state of the sensor or scanner.\r\n * @param {DataView} data - The raw data buffer received from the fitness equipment.\r\n * @returns {void}\r\n *\r\n * @example\r\n * updateState(sensor, state, data);\r\n */\r\nexport function updateState(sensor: FitnessEquipmentSensor | FitnessEquipmentScanner, state: FitnessEquipmentSensorState | FitnessEquipmentScanState, data: DataView): void {\r\n    const page = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA);\r\n    switch (page) {\r\n        case 0x01: {\r\n            const temperature = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\r\n            if (temperature !== 0xff) {\r\n                state.Temperature = -25 + temperature * 0.5;\r\n            }\r\n            const calBF = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1);\r\n            if (calBF & 0x40) {\r\n                state.ZeroOffset = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 4, true);\r\n            }\r\n            if (calBF & 0x80) {\r\n                state.SpinDownTime = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 6, true);\r\n            }\r\n            break;\r\n        }\r\n        case 0x10: {\r\n            const equipmentTypeBF = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1);\r\n            switch (equipmentTypeBF & 0x1f) {\r\n                case 19:\r\n                    state.EquipmentType = \"Treadmill\";\r\n                    break;\r\n                case 20:\r\n                    state.EquipmentType = \"Elliptical\";\r\n                    break;\r\n                case 21:\r\n                    state.EquipmentType = \"Reserved\";\r\n                    break;\r\n                case 22:\r\n                    state.EquipmentType = \"Rower\";\r\n                    break;\r\n                case 23:\r\n                    state.EquipmentType = \"Climber\";\r\n                    break;\r\n                case 24:\r\n                    state.EquipmentType = \"NordicSkier\";\r\n                    break;\r\n                case 25:\r\n                    state.EquipmentType = \"Trainer/StationaryBike\";\r\n                    break;\r\n                default:\r\n                    state.EquipmentType = \"General\";\r\n                    break;\r\n            }\r\n            let elapsedTime = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2);\r\n            let distance = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\r\n            const speed = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 4, true);\r\n            const heartRate = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 6);\r\n            const capStateBF = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 7);\r\n            if (heartRate !== 0xff) {\r\n                switch (capStateBF & 0x03) {\r\n                    case 3: {\r\n                        state.HeartRate = heartRate;\r\n                        state.HeartRateSource = \"HandContact\";\r\n                        break;\r\n                    }\r\n                    case 2: {\r\n                        state.HeartRate = heartRate;\r\n                        state.HeartRateSource = \"EM\";\r\n                        break;\r\n                    }\r\n                    case 1: {\r\n                        state.HeartRate = heartRate;\r\n                        state.HeartRateSource = \"ANT+\";\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        delete state.HeartRate;\r\n                        delete state.HeartRateSource;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            elapsedTime /= 4;\r\n            const oldElapsedTime = (state.ElapsedTime || 0) % 64;\r\n            if (elapsedTime !== oldElapsedTime) {\r\n                if (oldElapsedTime > elapsedTime) {\r\n                    // Hit rollover value\r\n                    elapsedTime += 64;\r\n                }\r\n            }\r\n            state.ElapsedTime = (state.ElapsedTime || 0) + elapsedTime - oldElapsedTime;\r\n\r\n            if (capStateBF & 0x04) {\r\n                const oldDistance = (state.Distance || 0) % 256;\r\n                if (distance !== oldDistance) {\r\n                    if (oldDistance > distance) {\r\n                        // Hit rollover value\r\n                        distance += 256;\r\n                    }\r\n                }\r\n                state.Distance = (state.Distance || 0) + distance - oldDistance;\r\n            } else {\r\n                delete state.Distance;\r\n            }\r\n            if (capStateBF & 0x08) {\r\n                state.VirtualSpeed = speed / 1000;\r\n                delete state.RealSpeed;\r\n            } else {\r\n                delete state.VirtualSpeed;\r\n                state.RealSpeed = speed / 1000;\r\n            }\r\n            switch ((capStateBF & 0x70) >> 4) {\r\n                case 1:\r\n                    state.State = \"OFF\";\r\n                    break;\r\n                case 2:\r\n                    state.State = \"READY\";\r\n                    resetState(state);\r\n                    break;\r\n                case 3:\r\n                    state.State = \"IN_USE\";\r\n                    break;\r\n                case 4:\r\n                    state.State = \"FINISHED\";\r\n                    break;\r\n                default:\r\n                    delete state.State;\r\n                    break;\r\n            }\r\n            if (capStateBF & 0x80) {\r\n                // lap\r\n            }\r\n            break;\r\n        }\r\n        case 0x11: {\r\n            const cycleLen = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\r\n            const incline = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 4, true);\r\n            const resistance = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 6);\r\n            const capStateBF = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 7);\r\n            if (cycleLen !== 0xff) {\r\n                state.CycleLength = cycleLen / 100;\r\n            }\r\n            if (incline >= -10000 && incline <= 10000) {\r\n                state.Incline = incline / 100;\r\n            }\r\n            if (resistance !== 0xff) {\r\n                state.Resistance = resistance;\r\n            }\r\n            switch ((capStateBF & 0x70) >> 4) {\r\n                case 1:\r\n                    state.State = \"OFF\";\r\n                    break;\r\n                case 2:\r\n                    state.State = \"READY\";\r\n                    resetState(state);\r\n                    break;\r\n                case 3:\r\n                    state.State = \"IN_USE\";\r\n                    break;\r\n                case 4:\r\n                    state.State = \"FINISHED\";\r\n                    break;\r\n                default:\r\n                    delete state.State;\r\n                    break;\r\n            }\r\n            if (capStateBF & 0x80) {\r\n                // lap\r\n            }\r\n            break;\r\n        }\r\n        case 0x12: {\r\n            const mets = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 2, true);\r\n            const caloricbr = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 4, true);\r\n            const calories = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 6);\r\n            const capStateBF = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 7);\r\n            if (mets !== 0xffff) {\r\n                state.METs = mets / 100;\r\n            }\r\n            if (caloricbr !== 0xffff) {\r\n                state.CaloricBurnRate = caloricbr / 10;\r\n            }\r\n            if (capStateBF & 0x01) {\r\n                state.Calories = calories;\r\n            }\r\n            switch ((capStateBF & 0x70) >> 4) {\r\n                case 1:\r\n                    state.State = \"OFF\";\r\n                    break;\r\n                case 2:\r\n                    state.State = \"READY\";\r\n                    resetState(state);\r\n                    break;\r\n                case 3:\r\n                    state.State = \"IN_USE\";\r\n                    break;\r\n                case 4:\r\n                    state.State = \"FINISHED\";\r\n                    break;\r\n                default:\r\n                    delete state.State;\r\n                    break;\r\n            }\r\n            if (capStateBF & 0x80) {\r\n                // lap\r\n            }\r\n            break;\r\n        }\r\n        case 0x13: {\r\n            const cadence = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 4);\r\n            let negDistance = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 5);\r\n            let posDistance = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 6);\r\n            const flagStateBF = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 7);\r\n\r\n            if (cadence !== 0xff) {\r\n                state.Cadence = cadence;\r\n            }\r\n\r\n            if (flagStateBF & 0x02) {\r\n                const oldNegDistance = (state.DescendedDistance || 0) % 256;\r\n                if (negDistance !== oldNegDistance) {\r\n                    if (oldNegDistance > negDistance) {\r\n                        negDistance += 256;\r\n                    }\r\n                }\r\n                state.DescendedDistance = (state.DescendedDistance || 0) + negDistance - oldNegDistance;\r\n            }\r\n\r\n            if (flagStateBF & 0x01) {\r\n                const oldPosDistance = (state.AscendedDistance || 0) % 256;\r\n                if (posDistance !== oldPosDistance) {\r\n                    if (oldPosDistance > posDistance) {\r\n                        posDistance += 256;\r\n                    }\r\n                }\r\n                state.AscendedDistance = (state.AscendedDistance || 0) + posDistance - oldPosDistance;\r\n            }\r\n\r\n            switch ((flagStateBF & 0x70) >> 4) {\r\n                case 1:\r\n                    state.State = \"OFF\";\r\n                    break;\r\n                case 2:\r\n                    state.State = \"READY\";\r\n                    resetState(state);\r\n                    break;\r\n                case 3:\r\n                    state.State = \"IN_USE\";\r\n                    break;\r\n                case 4:\r\n                    state.State = \"FINISHED\";\r\n                    break;\r\n                default:\r\n                    delete state.State;\r\n                    break;\r\n            }\r\n            if (flagStateBF & 0x80) {\r\n                // lap\r\n            }\r\n\r\n            break;\r\n        }\r\n        case 0x14: {\r\n            let posDistance = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2);\r\n            let strides = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\r\n            const cadence = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 4);\r\n            const power = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 5, true);\r\n            const flagStateBF = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 7);\r\n\r\n            if (cadence !== 0xff) {\r\n                state.Cadence = cadence;\r\n            }\r\n\r\n            if (power !== 0xffff) {\r\n                state.InstantaneousPower = power;\r\n            }\r\n\r\n            if (flagStateBF & 0x02) {\r\n                const oldPosDistance = (state.AscendedDistance || 0) % 256;\r\n                if (posDistance !== oldPosDistance) {\r\n                    if (oldPosDistance > posDistance) {\r\n                        posDistance += 256;\r\n                    }\r\n                }\r\n                state.AscendedDistance = (state.AscendedDistance || 0) + posDistance - oldPosDistance;\r\n            }\r\n\r\n            if (flagStateBF & 0x01) {\r\n                const oldStrides = (state.Strides || 0) % 256;\r\n                if (strides !== oldStrides) {\r\n                    if (oldStrides > strides) {\r\n                        strides += 256;\r\n                    }\r\n                }\r\n                state.Strides = (state.Strides || 0) + strides - oldStrides;\r\n            }\r\n\r\n            switch ((flagStateBF & 0x70) >> 4) {\r\n                case 1:\r\n                    state.State = \"OFF\";\r\n                    break;\r\n                case 2:\r\n                    state.State = \"READY\";\r\n                    resetState(state);\r\n                    break;\r\n                case 3:\r\n                    state.State = \"IN_USE\";\r\n                    break;\r\n                case 4:\r\n                    state.State = \"FINISHED\";\r\n                    break;\r\n                default:\r\n                    delete state.State;\r\n                    break;\r\n            }\r\n            if (flagStateBF & 0x80) {\r\n                // lap\r\n            }\r\n\r\n            break;\r\n        }\r\n        case 0x16: {\r\n            let strokes = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\r\n            const cadence = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 4);\r\n            const power = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 5, true);\r\n            const flagStateBF = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 7);\r\n\r\n            if (cadence !== 0xff) {\r\n                state.Cadence = cadence;\r\n            }\r\n\r\n            if (power !== 0xffff) {\r\n                state.InstantaneousPower = power;\r\n            }\r\n\r\n            if (flagStateBF & 0x01) {\r\n                const oldStrokes = (state.Strokes || 0) % 256;\r\n                if (strokes !== oldStrokes) {\r\n                    if (oldStrokes > strokes) {\r\n                        strokes += 256;\r\n                    }\r\n                }\r\n                state.Strokes = (state.Strokes || 0) + strokes - oldStrokes;\r\n            }\r\n\r\n            switch ((flagStateBF & 0x70) >> 4) {\r\n                case 1:\r\n                    state.State = \"OFF\";\r\n                    break;\r\n                case 2:\r\n                    state.State = \"READY\";\r\n                    resetState(state);\r\n                    break;\r\n                case 3:\r\n                    state.State = \"IN_USE\";\r\n                    break;\r\n                case 4:\r\n                    state.State = \"FINISHED\";\r\n                    break;\r\n                default:\r\n                    delete state.State;\r\n                    break;\r\n            }\r\n            if (flagStateBF & 0x80) {\r\n                // lap\r\n            }\r\n\r\n            break;\r\n        }\r\n        case 0x17: {\r\n            let strides = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\r\n            const cadence = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 4);\r\n            const power = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 5, true);\r\n            const flagStateBF = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 7);\r\n\r\n            if (cadence !== 0xff) {\r\n                state.Cadence = cadence;\r\n            }\r\n\r\n            if (power !== 0xffff) {\r\n                state.InstantaneousPower = power;\r\n            }\r\n\r\n            if (flagStateBF & 0x01) {\r\n                const oldStrides = (state.Strides || 0) % 256;\r\n                if (strides !== oldStrides) {\r\n                    if (oldStrides > strides) {\r\n                        strides += 256;\r\n                    }\r\n                }\r\n                state.Strides = (state.Strides || 0) + strides - oldStrides;\r\n            }\r\n\r\n            switch ((flagStateBF & 0x70) >> 4) {\r\n                case 1:\r\n                    state.State = \"OFF\";\r\n                    break;\r\n                case 2:\r\n                    state.State = \"READY\";\r\n                    resetState(state);\r\n                    break;\r\n                case 3:\r\n                    state.State = \"IN_USE\";\r\n                    break;\r\n                case 4:\r\n                    state.State = \"FINISHED\";\r\n                    break;\r\n                default:\r\n                    delete state.State;\r\n                    break;\r\n            }\r\n            if (flagStateBF & 0x80) {\r\n                // lap\r\n            }\r\n\r\n            break;\r\n        }\r\n        case 0x18: {\r\n            let strides = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\r\n            const cadence = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 4);\r\n            const power = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 5, true);\r\n            const flagStateBF = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 7);\r\n\r\n            if (cadence !== 0xff) {\r\n                state.Cadence = cadence;\r\n            }\r\n\r\n            if (power !== 0xffff) {\r\n                state.InstantaneousPower = power;\r\n            }\r\n\r\n            if (flagStateBF & 0x01) {\r\n                const oldStrides = (state.Strides || 0) % 256;\r\n                if (strides !== oldStrides) {\r\n                    if (oldStrides > strides) {\r\n                        strides += 256;\r\n                    }\r\n                }\r\n                state.Strides = (state.Strides || 0) + strides - oldStrides;\r\n            }\r\n\r\n            switch ((flagStateBF & 0x70) >> 4) {\r\n                case 1:\r\n                    state.State = \"OFF\";\r\n                    break;\r\n                case 2:\r\n                    state.State = \"READY\";\r\n                    resetState(state);\r\n                    break;\r\n                case 3:\r\n                    state.State = \"IN_USE\";\r\n                    break;\r\n                case 4:\r\n                    state.State = \"FINISHED\";\r\n                    break;\r\n                default:\r\n                    delete state.State;\r\n                    break;\r\n            }\r\n            if (flagStateBF & 0x80) {\r\n                // lap\r\n            }\r\n\r\n            break;\r\n        }\r\n        case 0x19: {\r\n            const oldEventCount = state._EventCount0x19 || 0;\r\n\r\n            let eventCount = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1);\r\n            const cadence = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2);\r\n            let accPower = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 3, true);\r\n            const power = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 5, true) & 0xfff;\r\n            const trainerStatus = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 6) >> 4;\r\n            const flagStateBF = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 7);\r\n\r\n            if (eventCount !== oldEventCount) {\r\n                state._EventCount0x19 = eventCount;\r\n                if (oldEventCount > eventCount) {\r\n                    //Hit rollover value\r\n                    eventCount += 255;\r\n                }\r\n            }\r\n\r\n            if (cadence !== 0xff) {\r\n                state.Cadence = cadence;\r\n            }\r\n\r\n            if (power !== 0xfff) {\r\n                state.InstantaneousPower = power;\r\n\r\n                const oldAccPower = (state.AccumulatedPower || 0) % 65536;\r\n                if (accPower !== oldAccPower) {\r\n                    if (oldAccPower > accPower) {\r\n                        accPower += 65536;\r\n                    }\r\n                }\r\n                state.AccumulatedPower = (state.AccumulatedPower || 0) + accPower - oldAccPower;\r\n\r\n                state.AveragePower = (accPower - oldAccPower) / (eventCount - oldEventCount);\r\n            }\r\n\r\n            state.TrainerStatus = trainerStatus;\r\n\r\n            switch (flagStateBF & 0x03) {\r\n                case 0:\r\n                    state.TargetStatus = \"OnTarget\";\r\n                    break;\r\n                case 1:\r\n                    state.TargetStatus = \"LowSpeed\";\r\n                    break;\r\n                case 2:\r\n                    state.TargetStatus = \"HighSpeed\";\r\n                    break;\r\n                default:\r\n                    delete state.TargetStatus;\r\n                    break;\r\n            }\r\n\r\n            switch ((flagStateBF & 0x70) >> 4) {\r\n                case 1:\r\n                    state.State = \"OFF\";\r\n                    break;\r\n                case 2:\r\n                    state.State = \"READY\";\r\n                    resetState(state);\r\n                    break;\r\n                case 3:\r\n                    state.State = \"IN_USE\";\r\n                    break;\r\n                case 4:\r\n                    state.State = \"FINISHED\";\r\n                    break;\r\n                default:\r\n                    delete state.State;\r\n                    break;\r\n            }\r\n            if (flagStateBF & 0x80) {\r\n                // lap\r\n            }\r\n\r\n            break;\r\n        }\r\n        case 0x1a: {\r\n            const oldEventCount = state._EventCount0x1A || 0;\r\n\r\n            let eventCount = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1);\r\n            let wheelTicks = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2);\r\n            let accWheelPeriod = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 3, true);\r\n            let accTorque = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 5, true);\r\n            const flagStateBF = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 7);\r\n\r\n            if (eventCount !== oldEventCount) {\r\n                state._EventCount0x1A = eventCount;\r\n                if (oldEventCount > eventCount) {\r\n                    //Hit rollover value\r\n                    eventCount += 255;\r\n                }\r\n            }\r\n\r\n            const oldWheelTicks = (state.WheelTicks || 0) % 256;\r\n            if (wheelTicks !== oldWheelTicks) {\r\n                if (oldWheelTicks > wheelTicks) {\r\n                    wheelTicks += 65536;\r\n                }\r\n            }\r\n            state.WheelTicks = (state.WheelTicks || 0) + wheelTicks - oldWheelTicks;\r\n\r\n            const oldWheelPeriod = (state.WheelPeriod || 0) % 256;\r\n            if (accWheelPeriod !== oldWheelPeriod) {\r\n                if (oldWheelPeriod > accWheelPeriod) {\r\n                    accWheelPeriod += 65536;\r\n                }\r\n            }\r\n            state.WheelPeriod = (state.WheelPeriod || 0) + accWheelPeriod - oldWheelPeriod;\r\n\r\n            const oldTorque = (state.Torque || 0) % 256;\r\n            if (accTorque !== oldTorque) {\r\n                if (oldTorque > accTorque) {\r\n                    accTorque += 65536;\r\n                }\r\n            }\r\n            state.Torque = (state.Torque || 0) + accTorque - oldTorque;\r\n\r\n            switch ((flagStateBF & 0x70) >> 4) {\r\n                case 1:\r\n                    state.State = \"OFF\";\r\n                    break;\r\n                case 2:\r\n                    state.State = \"READY\";\r\n                    resetState(state);\r\n                    break;\r\n                case 3:\r\n                    state.State = \"IN_USE\";\r\n                    break;\r\n                case 4:\r\n                    state.State = \"FINISHED\";\r\n                    break;\r\n                default:\r\n                    delete state.State;\r\n                    break;\r\n            }\r\n            if (flagStateBF & 0x80) {\r\n                // lap\r\n            }\r\n\r\n            break;\r\n        }\r\n        case 0x50: {\r\n            state.HwVersion = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\r\n            state.ManId = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 4, true);\r\n            state.ModelNum = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 6, true);\r\n            break;\r\n        }\r\n        case 0x51: {\r\n            const swRevSup = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2);\r\n            const swRevMain = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\r\n            const serial = data.getUint32(Messages.BUFFER_INDEX_MSG_DATA + 4, true);\r\n\r\n            state.SwVersion = swRevMain;\r\n\r\n            if (swRevSup !== 0xff) {\r\n                state.SwVersion += swRevSup / 1000;\r\n            }\r\n\r\n            if (serial !== 0xffffffff) {\r\n                state.SerialNumber = serial;\r\n            }\r\n\r\n            break;\r\n        }\r\n        case 0x56: {\r\n            const idx = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1);\r\n            const tot = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2);\r\n            const chState = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\r\n            const devId = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 4, true);\r\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n            const trType = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 6);\r\n            const devType = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 7);\r\n\r\n            if (idx === 0) {\r\n                state.PairedDevices = [];\r\n            }\r\n\r\n            if (tot > 0) {\r\n                state.PairedDevices.push({\r\n                    id: devId,\r\n                    type: devType,\r\n                    paired: chState & 0x80 ? true : false,\r\n                });\r\n            }\r\n\r\n            break;\r\n        }\r\n        default:\r\n            return;\r\n    }\r\n    sensor.emit(\"fitnessData\", state);\r\n}\r\n","import { PairedDevice } from \"../../types/pairedDevice.js\";\n\n/**\n * Represents the state of a Fitness Equipment sensor.\n * This class holds the data fields associated with the state of a fitness equipment sensor,\n * including metrics such as heart rate, speed, distance, power, and more.\n */\nexport class FitnessEquipmentSensorState {\n    /**\n     * Creates an instance of the FitnessEquipmentSensorState.\n     *\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @example\n     * const sensorState = new FitnessEquipmentSensorState(12345);\n     */\n    constructor(deviceId: number) {\n        this.DeviceId = deviceId;\n    }\n\n    /**\n     * The event count for page 0x19.\n     * @type {number | undefined}\n     */\n    _EventCount0x19?: number;\n\n    /**\n     * The event count for page 0x1A.\n     * @type {number | undefined}\n     */\n    _EventCount0x1A?: number;\n\n    /**\n     * The unique identifier of the sensor device.\n     * @type {number}\n     */\n    DeviceId: number;\n\n    /**\n     * The temperature measured by the sensor, in degrees Celsius.\n     * @type {number | undefined}\n     */\n    Temperature?: number;\n\n    /**\n     * The zero offset calibration value for the sensor.\n     * @type {number | undefined}\n     */\n    ZeroOffset?: number;\n\n    /**\n     * The spin-down time for the sensor, in seconds.\n     * @type {number | undefined}\n     */\n    SpinDownTime?: number;\n\n    /**\n     * The type of fitness equipment.\n     * Can be \"Treadmill\", \"Elliptical\", \"Reserved\", \"Rower\", \"Climber\", \"NordicSkier\", \"Trainer/StationaryBike\", or \"General\".\n     * @type {\"Treadmill\" | \"Elliptical\" | \"Reserved\" | \"Rower\" | \"Climber\" | \"NordicSkier\" | \"Trainer/StationaryBike\" | \"General\" | undefined}\n     */\n    EquipmentType?: \"Treadmill\" | \"Elliptical\" | \"Reserved\" | \"Rower\" | \"Climber\" | \"NordicSkier\" | \"Trainer/StationaryBike\" | \"General\";\n\n    /**\n     * The total elapsed time, in seconds.\n     * @type {number | undefined}\n     */\n    ElapsedTime?: number;\n\n    /**\n     * The total distance traveled, in meters.\n     * @type {number | undefined}\n     */\n    Distance?: number;\n\n    /**\n     * The real speed of the equipment, in meters per second.\n     * @type {number | undefined}\n     */\n    RealSpeed?: number;\n\n    /**\n     * The virtual speed of the equipment, in meters per second.\n     * @type {number | undefined}\n     */\n    VirtualSpeed?: number;\n\n    /**\n     * The current heart rate, in beats per minute (BPM).\n     * @type {number | undefined}\n     */\n    HeartRate?: number;\n\n    /**\n     * The source of the heart rate data.\n     * Can be \"HandContact\", \"EM\", or \"ANT+\".\n     * @type {\"HandContact\" | \"EM\" | \"ANT+\" | undefined}\n     */\n    HeartRateSource?: \"HandContact\" | \"EM\" | \"ANT+\";\n\n    /**\n     * The state of the equipment.\n     * Can be \"OFF\", \"READY\", \"IN_USE\", or \"FINISHED\".\n     * @type {\"OFF\" | \"READY\" | \"IN_USE\" | \"FINISHED\" | undefined}\n     */\n    State?: \"OFF\" | \"READY\" | \"IN_USE\" | \"FINISHED\";\n\n    /**\n     * The cycle length of the equipment, in meters.\n     * @type {number | undefined}\n     */\n    CycleLength?: number;\n\n    /**\n     * The incline of the equipment, in percentage.\n     * @type {number | undefined}\n     */\n    Incline?: number;\n\n    /**\n     * The resistance level of the equipment.\n     * @type {number | undefined}\n     */\n    Resistance?: number;\n\n    /**\n     * The metabolic equivalent (MET) value.\n     * @type {number | undefined}\n     */\n    METs?: number;\n\n    /**\n     * The caloric burn rate, in kilocalories per hour.\n     * @type {number | undefined}\n     */\n    CaloricBurnRate?: number;\n\n    /**\n     * The total calories burned.\n     * @type {number | undefined}\n     */\n    Calories?: number;\n\n    /**\n     * The distance ascended, in meters.\n     * @type {number | undefined}\n     */\n    AscendedDistance?: number;\n\n    /**\n     * The distance descended, in meters.\n     * @type {number | undefined}\n     */\n    DescendedDistance?: number;\n\n    /**\n     * The total number of strides taken.\n     * @type {number | undefined}\n     */\n    Strides?: number;\n\n    /**\n     * The total number of strokes taken.\n     * @type {number | undefined}\n     */\n    Strokes?: number;\n\n    /**\n     * The current cadence, in revolutions per minute (RPM).\n     * @type {number | undefined}\n     */\n    Cadence?: number;\n\n    /**\n     * The total accumulated power output, in watts.\n     * @type {number | undefined}\n     */\n    AccumulatedPower?: number;\n\n    /**\n     * The instantaneous power output, in watts.\n     * @type {number | undefined}\n     */\n    InstantaneousPower?: number;\n\n    /**\n     * The average power output, in watts.\n     * @type {number | undefined}\n     */\n    AveragePower?: number;\n\n    /**\n     * The trainer status, typically indicating the current mode or condition of the trainer.\n     * @type {number | undefined}\n     */\n    TrainerStatus?: number;\n\n    /**\n     * The target status of the equipment.\n     * Can be \"OnTarget\", \"LowSpeed\", or \"HighSpeed\".\n     * @type {\"OnTarget\" | \"LowSpeed\" | \"HighSpeed\" | undefined}\n     */\n    TargetStatus?: \"OnTarget\" | \"LowSpeed\" | \"HighSpeed\";\n\n    /**\n     * The total number of wheel ticks.\n     * @type {number | undefined}\n     */\n    WheelTicks?: number;\n\n    /**\n     * The wheel period, in seconds.\n     * @type {number | undefined}\n     */\n    WheelPeriod?: number;\n\n    /**\n     * The torque value, in newton-meters.\n     * @type {number | undefined}\n     */\n    Torque?: number;\n\n    /**\n     * The hardware version of the sensor.\n     * @type {number | undefined}\n     */\n    HwVersion?: number;\n\n    /**\n     * The manufacturer ID of the sensor.\n     * @type {number | undefined}\n     */\n    ManId?: number;\n\n    /**\n     * The model number of the sensor.\n     * @type {number | undefined}\n     */\n    ModelNum?: number;\n\n    /**\n     * The software version of the sensor.\n     * @type {number | undefined}\n     */\n    SwVersion?: number;\n\n    /**\n     * The serial number of the sensor.\n     * @type {number | undefined}\n     */\n    SerialNumber?: number;\n\n    /**\n     * The list of paired devices associated with the sensor.\n     * @type {PairedDevice[]}\n     */\n    PairedDevices: PairedDevice[] = [];\n}\n","import { FitnessEquipmentSensorState } from \"./fitnessEquipmentSensorState.js\";\n\n/**\n * Represents the state of a Fitness Equipment sensor during scanning.\n * Extends the FitnessEquipmentSensorState to include additional fields specific to scanning,\n * such as RSSI (Received Signal Strength Indicator) and signal threshold.\n */\nexport class FitnessEquipmentScanState extends FitnessEquipmentSensorState {\n    /**\n     * The received signal strength indicator (RSSI) of the sensor signal.\n     * Indicates the strength of the received signal from the fitness equipment sensor.\n     * @type {number | undefined}\n     */\n    Rssi: number | undefined;\n\n    /**\n     * The signal threshold value for the sensor.\n     * Represents the minimum signal strength required for a reliable connection.\n     * @type {number | undefined}\n     */\n    Threshold: number | undefined;\n}\n","/*\r\n * ANT+ profile: https://www.thisisant.com/developer/ant-plus/device-profiles/#521_tab\r\n * Spec sheet: https://www.thisisant.com/resources/bicycle-power/\r\n */\r\n\r\nimport { updateState } from \"./fitnessEquipmentUtils.js\";\r\nimport { FitnessEquipmentSensorState } from \"./fitnessEquipmentSensorState.js\";\r\nimport { AntPlusSensor } from \"../antPlusSensor.js\";\r\nimport { SendCallback } from \"../../types/sendCallback.js\";\r\nimport { Messages } from \"../../utils/messages.js\";\r\n\r\n/**\r\n * Represents a Fitness Equipment sensor.\r\n * This class extends the AntPlusSensor class to handle specific data related to fitness equipment.\r\n *\r\n * @category Sensors\r\n */\r\nexport class FitnessEquipmentSensor extends AntPlusSensor {\r\n    /**\r\n     * The device type code for Fitness Equipment sensors.\r\n     * @type {number}\r\n     * @readonly\r\n     */\r\n    static deviceType: number = 0x11;\r\n\r\n    /**\r\n     * The current state of the Fitness Equipment sensor.\r\n     * @private\r\n     * @type {FitnessEquipmentSensorState}\r\n     */\r\n    private state!: FitnessEquipmentSensorState;\r\n\r\n    /**\r\n     * Attaches the sensor to a specified ANT+ channel and initializes its state.\r\n     *\r\n     * @public\r\n     * @param {number} channel - The ANT+ channel number used for communication with the sensor.\r\n     * @param {number} deviceId - The unique identifier of the sensor device.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * const sensor = new FitnessEquipmentSensor();\r\n     * sensor.attach(1, 12345); // Attaches to channel 1 with device ID 12345\r\n     */\r\n    public async attach(channel: number, deviceId: number): Promise<void> {\r\n        await super.attachSensor(channel, \"receive\", deviceId, FitnessEquipmentSensor.deviceType, 0, 255, 8192);\r\n        this.state = new FitnessEquipmentSensorState(deviceId);\r\n    }\r\n\r\n    /**\r\n     * Updates the state of the sensor based on incoming data.\r\n     *\r\n     * @protected\r\n     * @param {number} deviceId - The unique identifier of the sensor device.\r\n     * @param {DataView} data - The raw data buffer received from the sensor.\r\n     * @returns {void}\r\n     */\r\n    protected updateState(deviceId: number, data: DataView): void {\r\n        this.state.DeviceId = deviceId;\r\n        updateState(this, this.state, data);\r\n    }\r\n\r\n    /**\r\n     * Sends user configuration data to the sensor internally.\r\n     *\r\n     * @private\r\n     * @param {number} [userWeight] - The user's weight in kilograms.\r\n     * @param {number} [bikeWeight] - The weight of the bike in kilograms.\r\n     * @param {number} [wheelDiameter] - The diameter of the wheel in meters.\r\n     * @param {number} [gearRatio] - The gear ratio.\r\n     * @param {SendCallback} [cbk] - Optional callback function to handle the send response.\r\n     * @returns {void}\r\n     */\r\n    private async setUserConfigurationInternal(userWeight?: number, bikeWeight?: number, wheelDiameter?: number, gearRatio?: number, cbk?: SendCallback): Promise<void> {\r\n        const m = userWeight == null ? 0xffff : Math.max(0, Math.min(65534, Math.round(userWeight * 100)));\r\n        const df = wheelDiameter == null ? 0xff : Math.round(wheelDiameter * 10) % 10;\r\n        const mb = bikeWeight == null ? 0xfff : Math.max(0, Math.min(1000, Math.round(bikeWeight * 20)));\r\n        const d = wheelDiameter == null ? 0xff : Math.max(0, Math.min(254, Math.round(wheelDiameter)));\r\n        const gr = gearRatio == null ? 0x00 : Math.max(1, Math.min(255, Math.round(gearRatio / 0.03)));\r\n        const payload = [0x37, m & 0xff, (m >> 8) & 0xff, 0xff, (df & 0xf) | ((mb & 0xf) << 4), (mb >> 4) & 0xf, d & 0xff, gr & 0xff];\r\n        const msg = Messages.acknowledgedData(this.channel!, payload);\r\n        await this.send(msg, cbk);\r\n    }\r\n\r\n    /**\r\n     * Sets the user configuration for the sensor.\r\n     *\r\n     * @public\r\n     * @param {number|SendCallback} [userWeightOrCallback] - The user's weight in kilograms or a callback function.\r\n     * @param {number} [bikeWeight] - The weight of the bike in kilograms.\r\n     * @param {number} [wheelDiameter] - The diameter of the wheel in meters.\r\n     * @param {number} [gearRatio] - The gear ratio.\r\n     * @param {SendCallback} [cbk] - Optional callback function to handle the send response.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * sensor.setUserConfiguration(70, 10, 0.7, 3.5, callbackFunction);\r\n     */\r\n    public async setUserConfiguration(userWeightOrCallback?: number | SendCallback, bikeWeight?: number, wheelDiameter?: number, gearRatio?: number, cbk?: SendCallback): Promise<void> {\r\n        if (typeof userWeightOrCallback === \"function\") {\r\n            await this.setUserConfigurationInternal(undefined, undefined, undefined, undefined, userWeightOrCallback);\r\n        } else if (typeof bikeWeight === \"function\") {\r\n            await this.setUserConfigurationInternal(userWeightOrCallback, undefined, undefined, undefined, bikeWeight);\r\n        } else if (typeof wheelDiameter === \"function\") {\r\n            await this.setUserConfigurationInternal(userWeightOrCallback, bikeWeight, undefined, undefined, wheelDiameter);\r\n        } else if (typeof gearRatio === \"function\") {\r\n            await this.setUserConfigurationInternal(userWeightOrCallback, bikeWeight, wheelDiameter, undefined, gearRatio);\r\n        } else {\r\n            await this.setUserConfigurationInternal(userWeightOrCallback, bikeWeight, wheelDiameter, gearRatio, cbk);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the basic resistance level on the fitness equipment.\r\n     *\r\n     * @public\r\n     * @param {number} resistance - The resistance level to set (0 to 100).\r\n     * @param {SendCallback} [cbk] - Optional callback function to handle the send response.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * sensor.setBasicResistance(50, callbackFunction);\r\n     */\r\n    public async setBasicResistance(resistance: number, cbk?: SendCallback): Promise<void> {\r\n        const res = Math.max(0, Math.min(200, Math.round(resistance * 2)));\r\n        const payload = [0x30, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, res & 0xff];\r\n        const msg = Messages.acknowledgedData(this.channel!, payload);\r\n        await this.send(msg, cbk);\r\n    }\r\n\r\n    /**\r\n     * Sets the target power level on the fitness equipment.\r\n     *\r\n     * @public\r\n     * @param {number} power - The target power level in watts.\r\n     * @param {SendCallback} [cbk] - Optional callback function to handle the send response.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * sensor.setTargetPower(250, callbackFunction);\r\n     */\r\n    public async setTargetPower(power: number, cbk?: SendCallback): Promise<void> {\r\n        const p = Math.max(0, Math.min(4000, Math.round(power * 4)));\r\n        const payload = [0x31, 0xff, 0xff, 0xff, 0xff, 0xff, p & 0xff, (p >> 8) & 0xff];\r\n        const msg = Messages.acknowledgedData(this.channel!, payload);\r\n        await this.send(msg, cbk);\r\n    }\r\n\r\n    /**\r\n     * Sends wind resistance data to the sensor internally.\r\n     *\r\n     * @private\r\n     * @param {number} [windCoeff] - The wind resistance coefficient.\r\n     * @param {number} [windSpeed] - The wind speed in km/h.\r\n     * @param {number} [draftFactor] - The drafting factor (0 to 1).\r\n     * @param {SendCallback} [cbk] - Optional callback function to handle the send response.\r\n     * @returns {void}\r\n     */\r\n    private async setWindResistanceInternal(windCoeff?: number, windSpeed?: number, draftFactor?: number, cbk?: SendCallback): Promise<void> {\r\n        const wc = windCoeff == null ? 0xff : Math.max(0, Math.min(186, Math.round(windCoeff * 100)));\r\n        const ws = windSpeed == null ? 0xff : Math.max(0, Math.min(254, Math.round(windSpeed + 127)));\r\n        const df = draftFactor == null ? 0xff : Math.max(0, Math.min(100, Math.round(draftFactor * 100)));\r\n        const payload = [0x32, 0xff, 0xff, 0xff, 0xff, wc & 0xff, ws & 0xff, df & 0xff];\r\n        const msg = Messages.acknowledgedData(this.channel!, payload);\r\n        await this.send(msg, cbk);\r\n    }\r\n\r\n    /**\r\n     * Sets the wind resistance on the fitness equipment.\r\n     *\r\n     * @public\r\n     * @param {number|SendCallback} [windCoeffOrCallback] - The wind resistance coefficient or a callback function.\r\n     * @param {number} [windSpeed] - The wind speed in km/h.\r\n     * @param {number} [draftFactor] - The drafting factor (0 to 1).\r\n     * @param {SendCallback} [cbk] - Optional callback function to handle the send response.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * sensor.setWindResistance(0.5, 20, 0.1, callbackFunction);\r\n     */\r\n    public async setWindResistance(windCoeffOrCallback?: number | SendCallback, windSpeed?: number, draftFactor?: number, cbk?: SendCallback): Promise<void> {\r\n        if (typeof windCoeffOrCallback === \"function\") {\r\n            await this.setWindResistanceInternal(undefined, undefined, undefined, windCoeffOrCallback);\r\n        } else if (typeof windSpeed === \"function\") {\r\n            await this.setWindResistanceInternal(windCoeffOrCallback, undefined, undefined, windSpeed);\r\n        } else if (typeof draftFactor === \"function\") {\r\n            await this.setWindResistanceInternal(windCoeffOrCallback, windSpeed, undefined, draftFactor);\r\n        } else {\r\n            await this.setWindResistanceInternal(windCoeffOrCallback, windSpeed, draftFactor, cbk);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends track resistance data to the sensor internally.\r\n     *\r\n     * @private\r\n     * @param {number} [slope] - The track slope percentage.\r\n     * @param {number} [rollingResistanceCoeff] - The rolling resistance coefficient.\r\n     * @param {SendCallback} [cbk] - Optional callback function to handle the send response.\r\n     * @returns {void}\r\n     */\r\n    private async setTrackResistanceInternal(slope?: number, rollingResistanceCoeff?: number, cbk?: SendCallback): Promise<void> {\r\n        const s = slope == null ? 0xffff : Math.max(0, Math.min(40000, Math.round((slope + 200) * 100)));\r\n        const rr = rollingResistanceCoeff == null ? 0xff : Math.max(0, Math.min(254, Math.round(rollingResistanceCoeff * 20000)));\r\n        const payload = [0x33, 0xff, 0xff, 0xff, 0xff, s & 0xff, (s >> 8) & 0xff, rr & 0xff];\r\n        const msg = Messages.acknowledgedData(this.channel!, payload);\r\n        await this.send(msg, cbk);\r\n    }\r\n\r\n    /**\r\n     * Sets the track resistance on the fitness equipment.\r\n     *\r\n     * @public\r\n     * @param {number|SendCallback} [slopeOrCallback] - The track slope percentage or a callback function.\r\n     * @param {number} [rollingResistanceCoeff] - The rolling resistance coefficient.\r\n     * @param {SendCallback} [cbk] - Optional callback function to handle the send response.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * sensor.setTrackResistance(5, 0.005, callbackFunction);\r\n     */\r\n    public async setTrackResistance(slopeOrCallback?: number | SendCallback, rollingResistanceCoeff?: number, cbk?: SendCallback): Promise<void> {\r\n        if (typeof slopeOrCallback === \"function\") {\r\n            await this.setTrackResistanceInternal(undefined, undefined, slopeOrCallback);\r\n        } else if (typeof rollingResistanceCoeff === \"function\") {\r\n            await this.setTrackResistanceInternal(slopeOrCallback, undefined, rollingResistanceCoeff);\r\n        } else {\r\n            await this.setTrackResistanceInternal(slopeOrCallback, rollingResistanceCoeff, cbk);\r\n        }\r\n    }\r\n}\r\n","import { Messages } from \"../../utils/messages.js\";\r\nimport { MuscleOxygenSensorState } from \"./muscleOxygenSensorState.js\";\r\nimport { MuscleOxygenScanState } from \"./muscleOxygenScanState.js\";\r\nimport { MuscleOxygenSensor } from \"./muscleOxygenSensor.js\";\r\nimport { MuscleOxygenScanner } from \"./muscleOxygenScanner.js\";\r\n\r\n/**\r\n * Updates the state of a Muscle Oxygen sensor or scanner based on the incoming data.\r\n * Decodes various pages of data to update the state, including event counts, sensor capabilities,\r\n * measurement intervals, total hemoglobin concentration, and battery status.\r\n *\r\n * @param {MuscleOxygenSensor | MuscleOxygenScanner} sensor - The sensor or scanner instance emitting the data.\r\n * @param {MuscleOxygenSensorState | MuscleOxygenScanState} state - The current state of the sensor or scanner.\r\n * @param {DataView} data - The raw data buffer received from the sensor.\r\n * @returns {void}\r\n *\r\n * @example\r\n * const sensor = new MuscleOxygenSensor();\r\n * const state = new MuscleOxygenSensorState(12345);\r\n * const dataBuffer = getDataFromSensor(); // Assume this function gets data from a sensor\r\n * updateState(sensor, state, dataBuffer);\r\n */\r\nexport function updateState(sensor: MuscleOxygenSensor | MuscleOxygenScanner, state: MuscleOxygenSensorState | MuscleOxygenScanState, data: DataView) {\r\n    const oldEventCount = state._EventCount || 0;\r\n    const page = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA);\r\n\r\n    switch (page) {\r\n        case 0x01: {\r\n            let eventCount = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 1);\r\n            const notifications = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2);\r\n            const capabilities = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 3, true);\r\n            const total = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 4, true) & 0xfff;\r\n            const previous = (data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 5, true) >> 4) & 0x3ff;\r\n            const current = (data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 6, true) >> 6) & 0x3ff;\r\n\r\n            if (eventCount !== oldEventCount) {\r\n                state._EventCount = eventCount;\r\n                if (oldEventCount > eventCount) {\r\n                    // Hit rollover value\r\n                    eventCount += 255;\r\n                }\r\n            }\r\n\r\n            state.UTCTimeRequired = (notifications & 0x01) === 0x01;\r\n            state.SupportANTFS = (capabilities & 0x01) === 0x01;\r\n\r\n            switch ((capabilities >> 1) & 0x7) {\r\n                case 1:\r\n                    state.MeasurementInterval = 0.25;\r\n                    break;\r\n                case 2:\r\n                    state.MeasurementInterval = 0.5;\r\n                    break;\r\n                case 3:\r\n                    state.MeasurementInterval = 1;\r\n                    break;\r\n                case 4:\r\n                    state.MeasurementInterval = 2;\r\n                    break;\r\n                default:\r\n                    delete state.MeasurementInterval;\r\n            }\r\n\r\n            switch (total) {\r\n                case 0xffe:\r\n                    state.TotalHemoglobinConcentration = \"AmbientLightTooHigh\";\r\n                    break;\r\n                case 0xfff:\r\n                    state.TotalHemoglobinConcentration = \"Invalid\";\r\n                    break;\r\n                default:\r\n                    state.TotalHemoglobinConcentration = total;\r\n            }\r\n\r\n            switch (previous) {\r\n                case 0x3fe:\r\n                    state.PreviousSaturatedHemoglobinPercentage = \"AmbientLightTooHigh\";\r\n                    break;\r\n                case 0x3ff:\r\n                    state.PreviousSaturatedHemoglobinPercentage = \"Invalid\";\r\n                    break;\r\n                default:\r\n                    state.PreviousSaturatedHemoglobinPercentage = previous;\r\n            }\r\n\r\n            switch (current) {\r\n                case 0x3fe:\r\n                    state.CurrentSaturatedHemoglobinPercentage = \"AmbientLightTooHigh\";\r\n                    break;\r\n                case 0x3ff:\r\n                    state.CurrentSaturatedHemoglobinPercentage = \"Invalid\";\r\n                    break;\r\n                default:\r\n                    state.CurrentSaturatedHemoglobinPercentage = current;\r\n            }\r\n\r\n            break;\r\n        }\r\n        case 0x50: {\r\n            state.HwVersion = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\r\n            state.ManId = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 4, true);\r\n            state.ModelNum = data.getUint16(Messages.BUFFER_INDEX_MSG_DATA + 6, true);\r\n            break;\r\n        }\r\n        case 0x51: {\r\n            const swRevSup = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2);\r\n            const swRevMain = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 3);\r\n            const serial = data.getUint32(Messages.BUFFER_INDEX_MSG_DATA + 4, true);\r\n\r\n            state.SwVersion = swRevMain;\r\n\r\n            if (swRevSup !== 0xff) {\r\n                state.SwVersion += swRevSup / 1000;\r\n            }\r\n\r\n            if (serial !== 0xffffffff) {\r\n                state.SerialNumber = serial;\r\n            }\r\n\r\n            break;\r\n        }\r\n        case 0x52: {\r\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n            const batteryId = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2);\r\n            const operatingTime = data.getUint32(Messages.BUFFER_INDEX_MSG_DATA + 3, true) & 0xffffff;\r\n            const batteryFrac = data.getUint32(Messages.BUFFER_INDEX_MSG_DATA + 6, true);\r\n            const batteryStatus = data.getUint32(Messages.BUFFER_INDEX_MSG_DATA + 7, true);\r\n\r\n            state.OperatingTime = operatingTime * ((batteryStatus & 0x80) === 0x80 ? 2 : 16);\r\n            state.BatteryVoltage = (batteryStatus & 0x0f) + batteryFrac / 256;\r\n            const batteryFlags = (batteryStatus & 0x70) >>> 4;\r\n            state.BatteryStatusBit = batteryFlags;\r\n            switch (batteryFlags) {\r\n                case 1:\r\n                    state.BatteryStatus = \"New\";\r\n                    break;\r\n                case 2:\r\n                    state.BatteryStatus = \"Good\";\r\n                    break;\r\n                case 3:\r\n                    state.BatteryStatus = \"Ok\";\r\n                    break;\r\n                case 4:\r\n                    state.BatteryStatus = \"Low\";\r\n                    break;\r\n                case 5:\r\n                    state.BatteryStatus = \"Critical\";\r\n                    break;\r\n                default:\r\n                    state.BatteryVoltage = undefined;\r\n                    state.BatteryStatus = \"Invalid\";\r\n                    break;\r\n            }\r\n            break;\r\n        }\r\n        default:\r\n            return;\r\n    }\r\n    if (page !== 0x01 || state._EventCount !== oldEventCount) {\r\n        sensor.emit(\"oxygenData\", state);\r\n    }\r\n}\r\n","/**\n * Represents the state of a Muscle Oxygen sensor.\n * This class holds the data fields associated with the state of a Muscle Oxygen sensor, including\n * event count, device details, measurement data, and battery status.\n */\nexport class MuscleOxygenSensorState {\n    /**\n     * Creates an instance of the MuscleOxygenSensorState.\n     *\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     * @example\n     * const sensorState = new MuscleOxygenSensorState(12345);\n     */\n    constructor(deviceId: number) {\n        this.DeviceId = deviceId;\n    }\n\n    /**\n     * The count of events detected by the sensor.\n     * @type {number | undefined}\n     */\n    _EventCount?: number;\n\n    /**\n     * The unique identifier of the sensor device.\n     * @type {number}\n     */\n    DeviceId: number;\n\n    /**\n     * Indicates whether UTC time is required by the sensor.\n     * @type {boolean | undefined}\n     */\n    UTCTimeRequired?: boolean;\n\n    /**\n     * Indicates whether ANT-FS is supported by the sensor.\n     * @type {boolean | undefined}\n     */\n    SupportANTFS?: boolean;\n\n    /**\n     * The measurement interval in seconds.\n     * Possible values: 0.25, 0.5, 1, or 2 seconds.\n     * @type {0.25 | 0.5 | 1 | 2 | undefined}\n     */\n    MeasurementInterval?: 0.25 | 0.5 | 1 | 2;\n\n    /**\n     * The total hemoglobin concentration.\n     * Can be a numeric value, \"AmbientLightTooHigh\", or \"Invalid\".\n     * @type {number | \"AmbientLightTooHigh\" | \"Invalid\" | undefined}\n     */\n    TotalHemoglobinConcentration?: number | \"AmbientLightTooHigh\" | \"Invalid\";\n\n    /**\n     * The percentage of saturated hemoglobin from the previous measurement.\n     * Can be a numeric value, \"AmbientLightTooHigh\", or \"Invalid\".\n     * @type {number | \"AmbientLightTooHigh\" | \"Invalid\" | undefined}\n     */\n    PreviousSaturatedHemoglobinPercentage?: number | \"AmbientLightTooHigh\" | \"Invalid\";\n\n    /**\n     * The percentage of saturated hemoglobin from the current measurement.\n     * Can be a numeric value, \"AmbientLightTooHigh\", or \"Invalid\".\n     * @type {number | \"AmbientLightTooHigh\" | \"Invalid\" | undefined}\n     */\n    CurrentSaturatedHemoglobinPercentage?: number | \"AmbientLightTooHigh\" | \"Invalid\";\n\n    /**\n     * The hardware version of the sensor.\n     * @type {number | undefined}\n     */\n    HwVersion?: number;\n\n    /**\n     * The manufacturer ID of the sensor.\n     * @type {number | undefined}\n     */\n    ManId?: number;\n\n    /**\n     * The model number of the sensor.\n     * @type {number | undefined}\n     */\n    ModelNum?: number;\n\n    /**\n     * The software version of the sensor.\n     * @type {number | undefined}\n     */\n    SwVersion?: number;\n\n    /**\n     * The serial number of the sensor.\n     * @type {number | undefined}\n     */\n    SerialNumber?: number;\n\n    /**\n     * The cumulative operating time of the sensor in seconds.\n     * @type {number | undefined}\n     */\n    OperatingTime?: number;\n\n    /**\n     * The battery voltage of the sensor.\n     * @type {number | undefined}\n     */\n    BatteryVoltage?: number;\n\n    /**\n     * The battery status of the sensor.\n     * Can be \"New\", \"Good\", \"Ok\", \"Low\", \"Critical\", or \"Invalid\".\n     * @type {\"New\" | \"Good\" | \"Ok\" | \"Low\" | \"Critical\" | \"Invalid\" | undefined}\n     */\n    BatteryStatus?: \"New\" | \"Good\" | \"Ok\" | \"Low\" | \"Critical\" | \"Invalid\";\n\n    /**\n     * The battery status bit of the sensor.\n     */\n    BatteryStatusBit?: number;\n}\n","import { MuscleOxygenSensorState } from \"./muscleOxygenSensorState.js\";\n\n/**\n * Represents the state of a Muscle Oxygen sensor during scanning.\n * Extends the MuscleOxygenSensorState to include additional fields specific to scanning,\n * such as RSSI (Received Signal Strength Indicator) and signal threshold.\n */\nexport class MuscleOxygenScanState extends MuscleOxygenSensorState {\n    /**\n     * The received signal strength indicator (RSSI) of the sensor signal.\n     * @type {number | undefined}\n     */\n    Rssi: number | undefined;\n\n    /**\n     * The signal threshold value for the sensor.\n     * @type {number | undefined}\n     */\n    Threshold: number | undefined;\n}\n","/*\r\n * ANT+ profile: https://www.thisisant.com/developer/ant-plus/device-profiles/#521_tab\r\n * Spec sheet: https://www.thisisant.com/resources/bicycle-power/\r\n */\r\n\r\nimport { updateState } from \"./muscleOxygenUtils.js\";\r\nimport { MuscleOxygenSensorState } from \"./muscleOxygenSensorState.js\";\r\nimport { AntPlusSensor } from \"../antPlusSensor.js\";\r\nimport { SendCallback } from \"../../types/sendCallback.js\";\r\nimport { Messages } from \"../../utils/messages.js\";\r\n\r\n/**\r\n * Represents a Muscle Oxygen sensor.\r\n * This class extends the AntPlusSensor class to handle specific data related to muscle oxygen measurements.\r\n *\r\n * @category Sensors\r\n */\r\nexport class MuscleOxygenSensor extends AntPlusSensor {\r\n    /**\r\n     * The device type code for Muscle Oxygen sensors.\r\n     * @type {number}\r\n     * @readonly\r\n     */\r\n    static deviceType: number = 0x1f;\r\n\r\n    /**\r\n     * The current state of the Muscle Oxygen sensor.\r\n     * @private\r\n     * @type {MuscleOxygenSensorState}\r\n     */\r\n    private state!: MuscleOxygenSensorState;\r\n\r\n    /**\r\n     * Attaches the sensor to a specified ANT+ channel and initializes its state.\r\n     *\r\n     * @public\r\n     * @param {number} channel - The ANT+ channel number used for communication with the sensor.\r\n     * @param {number} deviceId - The unique identifier of the sensor device.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * const sensor = new MuscleOxygenSensor();\r\n     * sensor.attach(1, 12345); // Attaches to channel 1 with device ID 12345\r\n     */\r\n    public async attach(channel: number, deviceId: number): Promise<void> {\r\n        await super.attachSensor(channel, \"receive\", deviceId, MuscleOxygenSensor.deviceType, 0, 255, 8192);\r\n        this.state = new MuscleOxygenSensorState(deviceId);\r\n    }\r\n\r\n    /**\r\n     * Updates the state of the sensor based on incoming data.\r\n     *\r\n     * @protected\r\n     * @param {number} deviceId - The unique identifier of the sensor device.\r\n     * @param {DataView} data - The raw data buffer received from the sensor.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * const dataBuffer = getDataFromSensor(); // assume this function gets data from a sensor\r\n     * sensor.updateState(12345, dataBuffer);\r\n     */\r\n    protected updateState(deviceId: number, data: DataView) {\r\n        this.state.DeviceId = deviceId;\r\n        updateState(this, this.state, data);\r\n    }\r\n\r\n    /**\r\n     * Sends a time-based command to the sensor.\r\n     *\r\n     * @private\r\n     * @param {number} cmd - The command code to be sent.\r\n     * @param {SendCallback} [cbk] - Optional callback function to handle the send response.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * sensor._sendTimeCmd(0x00, callbackFunction);\r\n     */\r\n    private async _sendTimeCmd(cmd: number, cbk?: SendCallback): Promise<void> {\r\n        const now = new Date();\r\n        const utc = Math.round((now.getTime() - Date.UTC(1989, 11, 31, 0, 0, 0, 0)) / 1000);\r\n        const offset = -Math.round(now.getTimezoneOffset() / 15);\r\n        const payload = [0x10, cmd & 0xff, 0xff, offset & 0xff, (utc >> 0) & 0xff, (utc >> 8) & 0xff, (utc >> 16) & 0xff, (utc >> 24) & 0xff];\r\n        const msg = Messages.acknowledgedData(this.channel!, payload);\r\n        await this.send(msg, cbk);\r\n    }\r\n\r\n    /**\r\n     * Sets the UTC time on the sensor.\r\n     *\r\n     * @public\r\n     * @param {SendCallback} [cbk] - Optional callback function to handle the send response.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * sensor.setUTCTime(callbackFunction);\r\n     */\r\n    public async setUTCTime(cbk?: SendCallback): Promise<void> {\r\n        await this._sendTimeCmd(0x00, cbk);\r\n    }\r\n\r\n    /**\r\n     * Starts a new session on the sensor.\r\n     *\r\n     * @public\r\n     * @param {SendCallback} [cbk] - Optional callback function to handle the send response.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * sensor.startSession(callbackFunction);\r\n     */\r\n    public async startSession(cbk?: SendCallback): Promise<void> {\r\n        await this._sendTimeCmd(0x01, cbk);\r\n    }\r\n\r\n    /**\r\n     * Stops the current session on the sensor.\r\n     *\r\n     * @public\r\n     * @param {SendCallback} [cbk] - Optional callback function to handle the send response.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * sensor.stopSession(callbackFunction);\r\n     */\r\n    public async stopSession(cbk?: SendCallback): Promise<void> {\r\n        await this._sendTimeCmd(0x02, cbk);\r\n    }\r\n\r\n    /**\r\n     * Sets a lap marker on the sensor.\r\n     *\r\n     * @public\r\n     * @param {SendCallback} [cbk] - Optional callback function to handle the send response.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * sensor.setLap(callbackFunction);\r\n     */\r\n    public async setLap(cbk?: SendCallback): Promise<void> {\r\n        await this._sendTimeCmd(0x03, cbk);\r\n    }\r\n}\r\n","import { EnvironmentScanner } from \"./environmentScanner.js\";\r\nimport { EnvironmentScanState } from \"./environmentScanState.js\";\r\nimport { EnvironmentSensor } from \"./environmentSensor.js\";\r\nimport { EnvironmentSensorState } from \"./environmentSensorState.js\";\r\nimport { Messages } from \"../../utils/messages.js\";\r\n\r\n/**\r\n * Updates the state of an Environment sensor or scanner based on incoming data.\r\n * Decodes the data buffer and updates the sensor state accordingly.\r\n *\r\n * @param {EnvironmentSensor | EnvironmentScanner} sensor - The sensor or scanner instance emitting the data.\r\n * @param {EnvironmentSensorState | EnvironmentScanState} state - The current state of the sensor or scanner.\r\n * @param {DataView} data - The raw data buffer received from the sensor.\r\n * @returns {void}\r\n */\r\nexport function updateState(sensor: EnvironmentSensor | EnvironmentScanner, state: EnvironmentSensorState | EnvironmentScanState, data: DataView): void {\r\n    const page = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA);\r\n\r\n    if (page === 1) {\r\n        state.EventCount = data.getUint8(Messages.BUFFER_INDEX_MSG_DATA + 2);\r\n        state.Temperature = data.getInt16(Messages.BUFFER_INDEX_MSG_DATA + 6, true) / 100; // true for little-endian\r\n    }\r\n\r\n    sensor.emit(\"envdata\", state);\r\n    sensor.emit(\"envData\", state);\r\n}\r\n","/**\n * Represents the state of an Environment Sensor.\n * This class holds the data fields associated with the state of an environment sensor,\n * such as the event count and temperature.\n */\nexport class EnvironmentSensorState {\n    /**\n     * Creates an instance of the EnvironmentSensorState.\n     *\n     * @param {number} deviceId - The unique identifier of the sensor device.\n     *\n     * @example\n     * const sensorState = new EnvironmentSensorState(12345);\n     */\n    constructor(deviceId: number) {\n        this.DeviceId = deviceId;\n    }\n\n    /**\n     * The unique identifier of the sensor device.\n     * @type {number}\n     */\n    DeviceId: number;\n\n    /**\n     * The event count recorded by the sensor.\n     * @type {number | undefined}\n     */\n    EventCount: number | undefined;\n\n    /**\n     * The temperature measured by the sensor, in degrees Celsius.\n     * @type {number | undefined}\n     */\n    Temperature: number | undefined;\n}\n","import { EnvironmentSensorState } from \"./environmentSensorState.js\";\n\n/**\n * Represents the state of an Environment Sensor during scanning.\n * Extends the EnvironmentSensorState to include additional fields specific to scanning,\n * such as RSSI (Received Signal Strength Indicator) and signal threshold.\n */\nexport class EnvironmentScanState extends EnvironmentSensorState {\n    /**\n     * The received signal strength indicator (RSSI) of the sensor signal.\n     * Indicates the strength of the received signal from the environment sensor.\n     * @type {number | undefined}\n     */\n    Rssi: number | undefined;\n\n    /**\n     * The signal threshold value for the sensor.\n     * Represents the minimum signal strength required for a reliable connection.\n     * @type {number | undefined}\n     */\n    Threshold: number | undefined;\n}\n","/*\r\n * ANT+ profile: https://www.thisisant.com/developer/ant-plus/device-profiles/#524_tab\r\n * Spec sheet: https://www.thisisant.com/resources/environment/\r\n */\r\n\r\nimport { updateState } from \"./environmentUtils.js\";\r\nimport { EnvironmentSensorState } from \"./environmentSensorState.js\";\r\nimport { AntPlusSensor } from \"../antPlusSensor.js\";\r\n\r\n/**\r\n * Represents an Environment sensor.\r\n * This class extends the AntPlusSensor class to handle specific data related to environmental monitoring.\r\n *\r\n * @category Sensors\r\n */\r\nexport class EnvironmentSensor extends AntPlusSensor {\r\n    /**\r\n     * The device type code for Environment sensors.\r\n     * @type {number}\r\n     * @readonly\r\n     */\r\n    static deviceType: number = 25;\r\n\r\n    /**\r\n     * Attaches the sensor to a specified ANT+ channel and initializes its state.\r\n     *\r\n     * @public\r\n     * @param {number} channel - The ANT+ channel number used for communication with the sensor.\r\n     * @param {number} deviceId - The unique identifier of the sensor device.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * const sensor = new EnvironmentSensor();\r\n     * sensor.attach(1, 12345); // Attaches to channel 1 with device ID 12345\r\n     */\r\n    public async attach(channel: number, deviceId: number): Promise<void> {\r\n        await super.attachSensor(channel, \"receive\", deviceId, EnvironmentSensor.deviceType, 0, 255, 8192);\r\n        this.state = new EnvironmentSensorState(deviceId);\r\n    }\r\n\r\n    /**\r\n     * The current state of the Environment sensor.\r\n     * @private\r\n     * @type {EnvironmentSensorState}\r\n     */\r\n    private state!: EnvironmentSensorState;\r\n\r\n    /**\r\n     * Updates the state of the sensor based on incoming data.\r\n     *\r\n     * @protected\r\n     * @param {number} deviceId - The unique identifier of the sensor device.\r\n     * @param {DataView} data - The raw data buffer received from the sensor.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * const dataBuffer = getDataFromSensor(); // assume this function gets data from a sensor\r\n     * sensor.updateState(12345, dataBuffer);\r\n     */\r\n    protected updateState(deviceId: number, data: DataView): void {\r\n        this.state.DeviceId = deviceId;\r\n        updateState(this, this.state, data);\r\n    }\r\n}\r\n","import { updateState } from \"./bicyclePowerUtils.js\";\r\nimport { BicyclePowerScanState } from \"./bicyclePowerScanState.js\";\r\nimport { BicyclePowerSensor } from \"./bicyclePowerSensor.js\";\r\nimport { AntPlusScanner } from \"../antPlusScanner.js\";\r\n\r\n/**\r\n * Represents a scanner for Bicycle Power sensors.\r\n * Extends the AntPlusScanner class to handle scanning for multiple Bicycle Power sensors.\r\n *\r\n * @category Sensors\r\n */\r\nexport class BicyclePowerScanner extends AntPlusScanner {\r\n    /**\r\n     * Returns the device type for Bicycle Power sensors.\r\n     *\r\n     * @protected\r\n     * @returns {number} The device type identifier for Bicycle Power sensors.\r\n     */\r\n    protected deviceType() {\r\n        return BicyclePowerSensor.deviceType;\r\n    }\r\n\r\n    /**\r\n     * A collection of states for each detected Bicycle Power sensor, keyed by device ID.\r\n     * @private\r\n     * @type {{ [id: number]: BicyclePowerScanState }}\r\n     */\r\n    private states: { [id: number]: BicyclePowerScanState } = {};\r\n\r\n    /**\r\n     * Creates a new state entry for a Bicycle Power sensor if it does not already exist.\r\n     *\r\n     * @protected\r\n     * @param {number} deviceId - The unique identifier of the sensor device.\r\n     * @returns {void}\r\n     */\r\n    protected createStateIfNew(deviceId: number) {\r\n        if (!this.states[deviceId]) {\r\n            this.states[deviceId] = new BicyclePowerScanState(deviceId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the RSSI (Received Signal Strength Indicator) and threshold for a specific Bicycle Power sensor.\r\n     *\r\n     * @protected\r\n     * @param {number} deviceId - The unique identifier of the sensor device.\r\n     * @param {number} rssi - The received signal strength indicator value.\r\n     * @param {number} threshold - The threshold value for the RSSI.\r\n     * @returns {void}\r\n     */\r\n    protected updateRssiAndThreshold(deviceId: number, rssi: number, threshold: number) {\r\n        this.states[deviceId].Rssi = rssi;\r\n        this.states[deviceId].Threshold = threshold;\r\n    }\r\n\r\n    /**\r\n     * Updates the state of a specific Bicycle Power sensor based on incoming data.\r\n     *\r\n     * @protected\r\n     * @param {number} deviceId - The unique identifier of the sensor device.\r\n     * @param {DataView} data - The raw data buffer received from the sensor.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * const dataBuffer = getDataFromSensor(); // assume this function gets data from a sensor\r\n     * scanner.updateState(12345, dataBuffer);\r\n     */\r\n    protected updateState(deviceId: number, data: DataView) {\r\n        updateState(this, this.states[deviceId], data);\r\n    }\r\n}\r\n","import { updateState } from \"./cadenceUtils.js\";\r\nimport { CadenceScanState } from \"./cadenceScanState.js\";\r\nimport { CadenceSensor } from \"./cadenceSensor.js\";\r\nimport { AntPlusScanner } from \"../antPlusScanner.js\";\r\n\r\n/**\r\n * Represents a scanner for Cadence sensors.\r\n * Extends the AntPlusScanner class to handle scanning and state updates for multiple cadence sensors.\r\n *\r\n * @category Sensors\r\n */\r\nexport class CadenceScanner extends AntPlusScanner {\r\n    /**\r\n     * Returns the device type code for Cadence sensors.\r\n     *\r\n     * @protected\r\n     * @returns {number} The device type code for Cadence sensors.\r\n     */\r\n    protected deviceType(): number {\r\n        return CadenceSensor.deviceType;\r\n    }\r\n\r\n    /**\r\n     * The wheel circumference used for cadence calculations, in meters.\r\n     * Defaults to 2.199 meters (70 cm wheel).\r\n     * @type {number}\r\n     */\r\n    wheelCircumference: number = 2.199;\r\n\r\n    /**\r\n     * Sets the wheel circumference for cadence calculations.\r\n     *\r\n     * @public\r\n     * @param {number} wheelCircumference - The wheel circumference in meters.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * scanner.setWheelCircumference(2.105); // Sets the wheel circumference to 2.105 meters\r\n     */\r\n    public setWheelCircumference(wheelCircumference: number): void {\r\n        this.wheelCircumference = wheelCircumference;\r\n    }\r\n\r\n    /**\r\n     * A dictionary to store the states of detected Cadence sensors by their device ID.\r\n     * @private\r\n     * @type {{ [id: number]: CadenceScanState }}\r\n     */\r\n    private states: { [id: number]: CadenceScanState } = {};\r\n\r\n    /**\r\n     * Creates a new state entry for a sensor if it does not already exist.\r\n     *\r\n     * @protected\r\n     * @param {number} deviceId - The unique identifier of the sensor device.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * scanner.createStateIfNew(12345); // Creates a new state for device ID 12345 if it does not exist.\r\n     */\r\n    protected createStateIfNew(deviceId: number): void {\r\n        if (!this.states[deviceId]) {\r\n            this.states[deviceId] = new CadenceScanState(deviceId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the RSSI (Received Signal Strength Indicator) and signal threshold for a specific sensor.\r\n     *\r\n     * @protected\r\n     * @param {number} deviceId - The unique identifier of the sensor device.\r\n     * @param {number} rssi - The received signal strength indicator of the device.\r\n     * @param {number} threshold - The signal threshold value for the device.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * scanner.updateRssiAndThreshold(12345, -70, 30); // Updates the RSSI and threshold for device ID 12345.\r\n     */\r\n    protected updateRssiAndThreshold(deviceId: number, rssi: number, threshold: number): void {\r\n        this.states[deviceId].Rssi = rssi;\r\n        this.states[deviceId].Threshold = threshold;\r\n    }\r\n\r\n    /**\r\n     * Updates the state of a sensor based on incoming data.\r\n     *\r\n     * @protected\r\n     * @param {number} deviceId - The unique identifier of the sensor device.\r\n     * @param {DataView} data - The raw data buffer received from the sensor.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * const dataBuffer = getDataFromSensor(); // Assume this function gets data from a sensor\r\n     * scanner.updateState(12345, dataBuffer); // Updates the state for device ID 12345.\r\n     */\r\n    protected updateState(deviceId: number, data: DataView): void {\r\n        updateState(this, this.states[deviceId], data);\r\n    }\r\n}\r\n","import { updateState } from \"./environmentUtils.js\";\r\nimport { EnvironmentScanState } from \"./environmentScanState.js\";\r\nimport { EnvironmentSensor } from \"./environmentSensor.js\";\r\nimport { AntPlusScanner } from \"../antPlusScanner.js\";\r\n\r\n/**\r\n * Represents a scanner for Environment sensors.\r\n * Extends the AntPlusScanner class to handle scanning and state updates for multiple environment sensors.\r\n *\r\n * @category Sensors\r\n */\r\nexport class EnvironmentScanner extends AntPlusScanner {\r\n    /**\r\n     * Returns the device type code for Environment sensors.\r\n     *\r\n     * @protected\r\n     * @returns {number} The device type code for Environment sensors.\r\n     */\r\n    protected deviceType(): number {\r\n        return EnvironmentSensor.deviceType;\r\n    }\r\n\r\n    /**\r\n     * A dictionary to store the states of detected Environment sensors by their device ID.\r\n     * @private\r\n     * @type {{ [id: number]: EnvironmentScanState }}\r\n     */\r\n    private states: { [id: number]: EnvironmentScanState } = {};\r\n\r\n    /**\r\n     * Creates a new state entry for a sensor if it does not already exist.\r\n     *\r\n     * @protected\r\n     * @param {number} deviceId - The unique identifier of the sensor device.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * scanner.createStateIfNew(12345); // Creates a new state for device ID 12345 if it does not exist.\r\n     */\r\n    protected createStateIfNew(deviceId: number): void {\r\n        if (!this.states[deviceId]) {\r\n            this.states[deviceId] = new EnvironmentScanState(deviceId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the RSSI (Received Signal Strength Indicator) and signal threshold for a specific sensor.\r\n     *\r\n     * @protected\r\n     * @param {number} deviceId - The unique identifier of the sensor device.\r\n     * @param {number} rssi - The received signal strength indicator of the device.\r\n     * @param {number} threshold - The signal threshold value for the device.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * scanner.updateRssiAndThreshold(12345, -70, 30); // Updates the RSSI and threshold for device ID 12345.\r\n     */\r\n    protected updateRssiAndThreshold(deviceId: number, rssi: number, threshold: number): void {\r\n        this.states[deviceId].Rssi = rssi;\r\n        this.states[deviceId].Threshold = threshold;\r\n    }\r\n\r\n    /**\r\n     * Updates the state of a sensor based on incoming data.\r\n     *\r\n     * @protected\r\n     * @param {number} deviceId - The unique identifier of the sensor device.\r\n     * @param {DataView} data - The raw data buffer received from the sensor.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * const dataBuffer = getDataFromSensor(); // Assume this function gets data from a sensor\r\n     * scanner.updateState(12345, dataBuffer); // Updates the state for device ID 12345.\r\n     */\r\n    protected updateState(deviceId: number, data: DataView): void {\r\n        updateState(this, this.states[deviceId], data);\r\n    }\r\n}\r\n","import { updateState } from \"./fitnessEquipmentUtils.js\";\r\nimport { FitnessEquipmentScanState } from \"./fitnessEquipmentScanState.js\";\r\nimport { FitnessEquipmentSensor } from \"./fitnessEquipmentSensor.js\";\r\nimport { AntPlusScanner } from \"../antPlusScanner.js\";\r\n\r\n/**\r\n * Represents a scanner for Fitness Equipment sensors.\r\n * Extends the AntPlusScanner class to handle scanning and state updates for multiple fitness equipment sensors.\r\n *\r\n * @category Sensors\r\n */\r\nexport class FitnessEquipmentScanner extends AntPlusScanner {\r\n    /**\r\n     * Returns the device type code for Fitness Equipment sensors.\r\n     *\r\n     * @protected\r\n     * @returns {number} The device type code for Fitness Equipment sensors.\r\n     */\r\n    protected deviceType(): number {\r\n        return FitnessEquipmentSensor.deviceType;\r\n    }\r\n\r\n    /**\r\n     * A dictionary to store the states of detected Fitness Equipment sensors by their device ID.\r\n     * @private\r\n     * @type {{ [id: number]: FitnessEquipmentScanState }}\r\n     */\r\n    private states: { [id: number]: FitnessEquipmentScanState } = {};\r\n\r\n    /**\r\n     * Creates a new state entry for a sensor if it does not already exist.\r\n     *\r\n     * @protected\r\n     * @param {number} deviceId - The unique identifier of the sensor device.\r\n     * @returns {void}\r\n     * @example\r\n     * scanner.createStateIfNew(12345); // Creates a new state for device ID 12345 if it does not exist.\r\n     */\r\n    protected createStateIfNew(deviceId: number): void {\r\n        if (!this.states[deviceId]) {\r\n            this.states[deviceId] = new FitnessEquipmentScanState(deviceId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the RSSI (Received Signal Strength Indicator) and signal threshold for a specific sensor.\r\n     *\r\n     * @protected\r\n     * @param {number} deviceId - The unique identifier of the sensor device.\r\n     * @param {number} rssi - The received signal strength indicator of the device.\r\n     * @param {number} threshold - The signal threshold value for the device.\r\n     * @returns {void}\r\n     * @example\r\n     * scanner.updateRssiAndThreshold(12345, -70, 30); // Updates the RSSI and threshold for device ID 12345.\r\n     */\r\n    protected updateRssiAndThreshold(deviceId: number, rssi: number, threshold: number): void {\r\n        this.states[deviceId].Rssi = rssi;\r\n        this.states[deviceId].Threshold = threshold;\r\n    }\r\n\r\n    /**\r\n     * Updates the state of a sensor based on incoming data.\r\n     *\r\n     * @protected\r\n     * @param {number} deviceId - The unique identifier of the sensor device.\r\n     * @param {DataView} data - The raw data buffer received from the sensor.\r\n     * @returns {void}\r\n     * @example\r\n     * const dataBuffer = getDataFromSensor(); // Assume this function gets data from a sensor\r\n     * scanner.updateState(12345, dataBuffer); // Updates the state for device ID 12345.\r\n     */\r\n    protected updateState(deviceId: number, data: DataView): void {\r\n        updateState(this, this.states[deviceId], data);\r\n    }\r\n}\r\n","import { DebugOptions } from \"../types/debugOptions.js\";\r\nimport { NodeUSBDriver } from \"./driver/nodeUSBDriver.js\";\r\n\r\n/**\r\n * Class representing a Garmin Stick 2 USB driver, which extends the base USBDriver class.\r\n *\r\n * @category Drivers\r\n * @extends NodeUSBDriver\r\n */\r\nexport class GarminStick2 extends NodeUSBDriver {\r\n    /**\r\n     * Creates an instance of GarminStick2.\r\n     *\r\n     * @param {DebugOptions} [debugOptions={}] - Optional debug options for USB operations.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * const garminStick = new GarminStick2();\r\n     * garminStick.open(); // Opens the connection to the Garmin Stick 2 device.\r\n     * ```\r\n     */\r\n    constructor(debugOptions: DebugOptions = {}) {\r\n        super(0x0fcf, 0x1008, debugOptions);\r\n    }\r\n}\r\n\r\n/**\r\n * Class representing a Garmin Stick 3 USB driver, which extends the base USBDriver class.\r\n *\r\n * @category Drivers\r\n * @extends NodeUSBDriver\r\n */\r\nexport class GarminStick3 extends NodeUSBDriver {\r\n    /**\r\n     * Creates an instance of GarminStick3.\r\n     *\r\n     * @param {DebugOptions} [debugOptions={}] - Optional debug options for USB operations.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * const garminStick = new GarminStick3({ usbDebugLevel: 1 });\r\n     * garminStick.open(); // Opens the connection to the Garmin Stick 3 device.\r\n     * ```\r\n     */\r\n    constructor(debugOptions: DebugOptions = {}) {\r\n        super(0x0fcf, 0x1009, debugOptions);\r\n    }\r\n}\r\n","import { Page, PageState, updateState } from \"./heartRateUtils.js\";\r\nimport { HeartRateScannerState } from \"./heartRateScannerState.js\";\r\nimport { HeartRateSensor } from \"./heartRateSensor.js\";\r\nimport { AntPlusScanner } from \"../antPlusScanner.js\";\r\n\r\n/**\r\n * Represents a scanner for Heart Rate sensors.\r\n * Extends the AntPlusScanner class to handle scanning and state updates for multiple Heart Rate sensors.\r\n *\r\n * @category Sensors\r\n */\r\nexport class HeartRateScanner extends AntPlusScanner {\r\n    /**\r\n     * Returns the device type code for Heart Rate sensors.\r\n     *\r\n     * @protected\r\n     * @returns {number} The device type code for Heart Rate sensors.\r\n     */\r\n    protected deviceType(): number {\r\n        return HeartRateSensor.deviceType;\r\n    }\r\n\r\n    /**\r\n     * A dictionary to store the states of detected Heart Rate sensors by their device ID.\r\n     * @private\r\n     * @type {{ [id: number]: HeartRateScannerState }}\r\n     */\r\n    private states: { [id: number]: HeartRateScannerState } = {};\r\n\r\n    /**\r\n     * A dictionary to store page information for each detected Heart Rate sensor by their device ID.\r\n     * @private\r\n     * @type {{ [id: number]: Page }}\r\n     */\r\n    private pages: { [id: number]: Page } = {};\r\n\r\n    /**\r\n     * Creates a new state entry and page information for a sensor if they do not already exist.\r\n     *\r\n     * @protected\r\n     * @param {number} deviceId - The unique identifier of the sensor device.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * scanner.createStateIfNew(12345); // Creates a new state and page info for device ID 12345 if they do not exist.\r\n     */\r\n    protected createStateIfNew(deviceId: number): void {\r\n        if (!this.states[deviceId]) {\r\n            this.states[deviceId] = new HeartRateScannerState(deviceId);\r\n        }\r\n\r\n        if (!this.pages[deviceId]) {\r\n            this.pages[deviceId] = { oldPage: -1, pageState: PageState.INIT_PAGE };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the RSSI (Received Signal Strength Indicator) and signal threshold for a specific sensor.\r\n     *\r\n     * @protected\r\n     * @param {number} deviceId - The unique identifier of the sensor device.\r\n     * @param {number} rssi - The received signal strength indicator of the device.\r\n     * @param {number} threshold - The signal threshold value for the device.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * scanner.updateRssiAndThreshold(12345, -70, 30); // Updates the RSSI and threshold for device ID 12345.\r\n     */\r\n    protected updateRssiAndThreshold(deviceId: number, rssi: number, threshold: number): void {\r\n        this.states[deviceId].Rssi = rssi;\r\n        this.states[deviceId].Threshold = threshold;\r\n    }\r\n\r\n    /**\r\n     * Updates the state of a sensor based on incoming data.\r\n     *\r\n     * @protected\r\n     * @param {number} deviceId - The unique identifier of the sensor device.\r\n     * @param {Uint8Array} data - The raw data buffer received from the sensor.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * const dataBuffer = getDataFromSensor(); // Assume this function gets data from a sensor\r\n     * scanner.updateState(12345, dataBuffer); // Updates the state for device ID 12345.\r\n     */\r\n    protected updateState(deviceId: number, data: DataView): void {\r\n        updateState(this, this.states[deviceId], this.pages[deviceId], data);\r\n    }\r\n}\r\n","import { updateState } from \"./muscleOxygenUtils.js\";\r\nimport { MuscleOxygenScanState } from \"./muscleOxygenScanState.js\";\r\nimport { MuscleOxygenSensor } from \"./muscleOxygenSensor.js\";\r\nimport { AntPlusScanner } from \"../antPlusScanner.js\";\r\n\r\n/**\r\n * Represents a scanner for Muscle Oxygen sensors.\r\n * Extends the AntPlusScanner class to handle scanning and state updates for multiple Muscle Oxygen sensors.\r\n *\r\n * @category Sensors\r\n */\r\nexport class MuscleOxygenScanner extends AntPlusScanner {\r\n    /**\r\n     * Returns the device type code for Muscle Oxygen sensors.\r\n     *\r\n     * @protected\r\n     * @returns {number} The device type code for Muscle Oxygen sensors.\r\n     */\r\n    protected deviceType(): number {\r\n        return MuscleOxygenSensor.deviceType;\r\n    }\r\n\r\n    /**\r\n     * A dictionary to store the states of detected Muscle Oxygen sensors by their device ID.\r\n     * @private\r\n     * @type {{ [id: number]: MuscleOxygenScanState }}\r\n     */\r\n    private states: { [id: number]: MuscleOxygenScanState } = {};\r\n\r\n    /**\r\n     * Creates a new state entry for a sensor if it does not already exist.\r\n     *\r\n     * @protected\r\n     * @param {number} deviceId - The unique identifier of the sensor device.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * scanner.createStateIfNew(12345); // Creates a new state for device ID 12345 if it does not exist.\r\n     */\r\n    protected createStateIfNew(deviceId: number): void {\r\n        if (!this.states[deviceId]) {\r\n            this.states[deviceId] = new MuscleOxygenScanState(deviceId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the RSSI (Received Signal Strength Indicator) and signal threshold for a specific sensor.\r\n     *\r\n     * @protected\r\n     * @param {number} deviceId - The unique identifier of the sensor device.\r\n     * @param {number} rssi - The received signal strength indicator of the device.\r\n     * @param {number} threshold - The signal threshold value for the device.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * scanner.updateRssiAndThreshold(12345, -70, 30); // Updates the RSSI and threshold for device ID 12345.\r\n     */\r\n    protected updateRssiAndThreshold(deviceId: number, rssi: number, threshold: number): void {\r\n        this.states[deviceId].Rssi = rssi;\r\n        this.states[deviceId].Threshold = threshold;\r\n    }\r\n\r\n    /**\r\n     * Updates the state of a sensor based on incoming data.\r\n     *\r\n     * @protected\r\n     * @param {number} deviceId - The unique identifier of the sensor device.\r\n     * @param {DataView} data - The raw data buffer received from the sensor.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * const dataBuffer = getDataFromSensor(); // Assume this function gets data from a sensor\r\n     * scanner.updateState(12345, dataBuffer); // Updates the state for device ID 12345.\r\n     */\r\n    protected updateState(deviceId: number, data: DataView): void {\r\n        updateState(this, this.states[deviceId], data);\r\n    }\r\n}\r\n","import { AntPlusScanner } from \"../antPlusScanner.js\";\r\nimport { updateState } from \"./speedCadenceUtils.js\";\r\nimport { SpeedCadenceScanState } from \"./speedCadenceScanState.js\";\r\nimport { SpeedCadenceSensor } from \"./speedCadenceSensor.js\";\r\n\r\n/**\r\n * Represents a scanner for Speed and Cadence sensors.\r\n * Extends the AntPlusScanner class to handle scanning and state updates for multiple Speed and Cadence sensors.\r\n *\r\n * @category Sensors\r\n */\r\nexport class SpeedCadenceScanner extends AntPlusScanner {\r\n    /**\r\n     * Returns the device type code for Speed and Cadence sensors.\r\n     *\r\n     * @protected\r\n     * @returns {number} The device type code for Speed and Cadence sensors.\r\n     */\r\n    protected deviceType(): number {\r\n        return SpeedCadenceSensor.deviceType;\r\n    }\r\n\r\n    /**\r\n     * The wheel circumference in meters, used to calculate speed.\r\n     * @type {number}\r\n     * @default 2.199\r\n     */\r\n    wheelCircumference: number = 2.199; // default 70cm wheel\r\n\r\n    /**\r\n     * Sets the wheel circumference for speed calculation.\r\n     *\r\n     * @public\r\n     * @param {number} wheelCircumference - The wheel circumference in meters.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * const scanner = new SpeedCadenceScanner();\r\n     * scanner.setWheelCircumference(2.105); // Sets the wheel circumference to 2.105 meters\r\n     */\r\n    public setWheelCircumference(wheelCircumference: number): void {\r\n        this.wheelCircumference = wheelCircumference;\r\n    }\r\n\r\n    /**\r\n     * A dictionary to store the states of detected Speed and Cadence sensors by their device ID.\r\n     * @private\r\n     * @type {{ [id: number]: SpeedCadenceScanState }}\r\n     */\r\n    private states: { [id: number]: SpeedCadenceScanState } = {};\r\n\r\n    /**\r\n     * Creates a new state entry for a sensor if it does not already exist.\r\n     *\r\n     * @protected\r\n     * @param {number} deviceId - The unique identifier of the sensor device.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * scanner.createStateIfNew(12345); // Creates a new state for device ID 12345 if it does not exist.\r\n     */\r\n    protected createStateIfNew(deviceId: number): void {\r\n        if (!this.states[deviceId]) {\r\n            this.states[deviceId] = new SpeedCadenceScanState(deviceId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the RSSI (Received Signal Strength Indicator) and signal threshold for a specific sensor.\r\n     *\r\n     * @protected\r\n     * @param {number} deviceId - The unique identifier of the sensor device.\r\n     * @param {number} rssi - The received signal strength indicator of the device.\r\n     * @param {number} threshold - The signal threshold value for the device.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * scanner.updateRssiAndThreshold(12345, -70, 30); // Updates the RSSI and threshold for device ID 12345.\r\n     */\r\n    protected updateRssiAndThreshold(deviceId: number, rssi: number, threshold: number): void {\r\n        this.states[deviceId].Rssi = rssi;\r\n        this.states[deviceId].Threshold = threshold;\r\n    }\r\n\r\n    /**\r\n     * Updates the state of a sensor based on incoming data.\r\n     *\r\n     * @protected\r\n     * @param {number} deviceId - The unique identifier of the sensor device.\r\n     * @param {DataView} data - The raw data buffer received from the sensor.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * const dataBuffer = getDataFromSensor(); // Assume this function gets data from a sensor\r\n     * scanner.updateState(12345, dataBuffer); // Updates the state for device ID 12345.\r\n     */\r\n    protected updateState(deviceId: number, data: DataView): void {\r\n        updateState(this, this.states[deviceId], data);\r\n    }\r\n}\r\n","import { AntPlusScanner } from \"../antPlusScanner.js\";\r\nimport { updateState } from \"./speedUtils.js\";\r\nimport { SpeedScanState } from \"./speedScanState.js\";\r\nimport { SpeedSensor } from \"./speedSensor.js\";\r\n\r\n/**\r\n * Represents a scanner for Speed sensors.\r\n * Extends the AntPlusScanner class to handle scanning and state updates for multiple Speed sensors.\r\n *\r\n * @category Sensors\r\n */\r\nexport class SpeedScanner extends AntPlusScanner {\r\n    /**\r\n     * Returns the device type code for Speed sensors.\r\n     *\r\n     * @protected\r\n     * @returns {number} The device type code for Speed sensors.\r\n     */\r\n    protected deviceType(): number {\r\n        return SpeedSensor.deviceType;\r\n    }\r\n\r\n    /**\r\n     * The wheel circumference in meters, used to calculate speed.\r\n     * @type {number}\r\n     * @default 2.199\r\n     */\r\n    wheelCircumference: number = 2.199; // default 70cm wheel\r\n\r\n    /**\r\n     * Sets the wheel circumference for speed calculation.\r\n     *\r\n     * @public\r\n     * @param {number} wheelCircumference - The wheel circumference in meters.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * const scanner = new SpeedScanner();\r\n     * scanner.setWheelCircumference(2.105); // Sets the wheel circumference to 2.105 meters\r\n     */\r\n    public setWheelCircumference(wheelCircumference: number): void {\r\n        this.wheelCircumference = wheelCircumference;\r\n    }\r\n\r\n    /**\r\n     * A dictionary to store the states of detected Speed sensors by their device ID.\r\n     * @private\r\n     * @type {{ [id: number]: SpeedScanState }}\r\n     */\r\n    private states: { [id: number]: SpeedScanState } = {};\r\n\r\n    /**\r\n     * Creates a new state entry for a sensor if it does not already exist.\r\n     *\r\n     * @protected\r\n     * @param {number} deviceId - The unique identifier of the sensor device.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * scanner.createStateIfNew(12345); // Creates a new state for device ID 12345 if it does not exist.\r\n     */\r\n    protected createStateIfNew(deviceId: number): void {\r\n        if (!this.states[deviceId]) {\r\n            this.states[deviceId] = new SpeedScanState(deviceId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the RSSI (Received Signal Strength Indicator) and signal threshold for a specific sensor.\r\n     *\r\n     * @protected\r\n     * @param {number} deviceId - The unique identifier of the sensor device.\r\n     * @param {number} rssi - The received signal strength indicator of the device.\r\n     * @param {number} threshold - The signal threshold value for the device.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * scanner.updateRssiAndThreshold(12345, -70, 30); // Updates the RSSI and threshold for device ID 12345.\r\n     */\r\n    protected updateRssiAndThreshold(deviceId: number, rssi: number, threshold: number): void {\r\n        this.states[deviceId].Rssi = rssi;\r\n        this.states[deviceId].Threshold = threshold;\r\n    }\r\n\r\n    /**\r\n     * Updates the state of a sensor based on incoming data.\r\n     *\r\n     * @protected\r\n     * @param {number} deviceId - The unique identifier of the sensor device.\r\n     * @param {DataView} data - The raw data buffer received from the sensor.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * const dataBuffer = getDataFromSensor(); // Assume this function gets data from a sensor\r\n     * scanner.updateState(12345, dataBuffer); // Updates the state for device ID 12345.\r\n     */\r\n    protected updateState(deviceId: number, data: DataView): void {\r\n        updateState(this, this.states[deviceId], data);\r\n    }\r\n}\r\n","import { AntPlusScanner } from \"../antPlusScanner.js\";\r\nimport { updateState } from \"./strideSpeedDistanceUtils.js\";\r\nimport { StrideSpeedDistanceScanState } from \"./strideSpeedDistanceScanState.js\";\r\nimport { StrideSpeedDistanceSensor } from \"./strideSpeedDistanceSensor.js\";\r\n\r\n/**\r\n * Represents a scanner for Stride-Based Speed and Distance Monitor (SDM) sensors.\r\n * Extends the AntPlusScanner class to handle scanning and state updates for multiple SDM sensors.\r\n *\r\n * @category Sensors\r\n */\r\nexport class StrideSpeedDistanceScanner extends AntPlusScanner {\r\n    /**\r\n     * Returns the device type code for Stride-Based Speed and Distance Monitor sensors.\r\n     *\r\n     * @protected\r\n     * @returns {number} The device type code for SDM sensors.\r\n     */\r\n    protected deviceType(): number {\r\n        return StrideSpeedDistanceSensor.deviceType;\r\n    }\r\n\r\n    /**\r\n     * A dictionary to store the states of detected SDM sensors by their device ID.\r\n     * @private\r\n     * @type {{ [id: number]: StrideSpeedDistanceScanState }}\r\n     */\r\n    private states: { [id: number]: StrideSpeedDistanceScanState } = {};\r\n\r\n    /**\r\n     * Creates a new state entry for a sensor if it does not already exist.\r\n     *\r\n     * @protected\r\n     * @param {number} deviceId - The unique identifier of the sensor device.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * scanner.createStateIfNew(12345); // Creates a new state for device ID 12345 if it does not exist.\r\n     */\r\n    protected createStateIfNew(deviceId: number): void {\r\n        if (!this.states[deviceId]) {\r\n            this.states[deviceId] = new StrideSpeedDistanceScanState(deviceId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the RSSI (Received Signal Strength Indicator) and signal threshold for a specific sensor.\r\n     *\r\n     * @protected\r\n     * @param {number} deviceId - The unique identifier of the sensor device.\r\n     * @param {number} rssi - The received signal strength indicator of the device.\r\n     * @param {number} threshold - The signal threshold value for the device.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * scanner.updateRssiAndThreshold(12345, -70, 30); // Updates the RSSI and threshold for device ID 12345.\r\n     */\r\n    protected updateRssiAndThreshold(deviceId: number, rssi: number, threshold: number): void {\r\n        this.states[deviceId].Rssi = rssi;\r\n        this.states[deviceId].Threshold = threshold;\r\n    }\r\n\r\n    /**\r\n     * Updates the state of a sensor based on incoming data.\r\n     *\r\n     * @protected\r\n     * @param {number} deviceId - The unique identifier of the sensor device.\r\n     * @param {DataView} data - The raw data buffer received from the sensor.\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * const dataBuffer = getDataFromSensor(); // Assume this function gets data from a sensor\r\n     * scanner.updateState(12345, dataBuffer); // Updates the state for device ID 12345.\r\n     */\r\n    protected updateState(deviceId: number, data: DataView): void {\r\n        updateState(this, this.states[deviceId], data);\r\n    }\r\n}\r\n","import { WebUSBDriver } from \"./driver/webUSBDriver.js\";\r\n\r\n/**\r\n * WebUsbStick class extends the WebUSBDriver to represent a specific USB stick that uses the WebUSB API.\r\n * It checks for WebUSB API availability in the environment before initializing.\r\n *\r\n * @category Drivers\r\n * @extends WebUSBDriver\r\n */\r\nexport class WebUsbStick extends WebUSBDriver {\r\n    /**\r\n     * Creates an instance of WebUsbStick.\r\n     * Throws an error if the WebUSB API is not available in the current environment (e.g., unsupported browsers).\r\n     *\r\n     * @throws {Error} If the WebUSB API is not available in the environment.\r\n     *\r\n     * @example\r\n     * try {\r\n     *   const usbStick = new WebUsbStick();\r\n     *   // Use usbStick for further operations\r\n     * } catch (error) {\r\n     *   console.error(error.message);\r\n     * }\r\n     */\r\n    constructor() {\r\n        if (typeof navigator === \"undefined\" || typeof navigator.usb === \"undefined\") {\r\n            throw new Error(\"WebUSB API is not available in this environment.\");\r\n        }\r\n\r\n        super();\r\n    }\r\n}\r\n"],"names":["Constants","MESSAGE_RF","MESSAGE_TX_SYNC","DEFAULT_NETWORK_NUMBER","MESSAGE_CHANNEL_UNASSIGN","MESSAGE_CHANNEL_ASSIGN","MESSAGE_CHANNEL_ID","MESSAGE_CHANNEL_PERIOD","MESSAGE_CHANNEL_SEARCH_TIMEOUT","MESSAGE_CHANNEL_FREQUENCY","MESSAGE_CHANNEL_TX_POWER","MESSAGE_NETWORK_KEY","MESSAGE_TX_POWER","MESSAGE_PROXIMITY_SEARCH","MESSAGE_ENABLE_RX_EXT","MESSAGE_LIB_CONFIG","MESSAGE_CHANNEL_OPEN_RX_SCAN","MESSAGE_STARTUP","MESSAGE_SYSTEM_RESET","MESSAGE_CHANNEL_OPEN","MESSAGE_CHANNEL_CLOSE","MESSAGE_CHANNEL_REQUEST","MESSAGE_CHANNEL_BROADCAST_DATA","MESSAGE_CHANNEL_ACKNOWLEDGED_DATA","MESSAGE_CHANNEL_BURST_DATA","MESSAGE_CHANNEL_EVENT","MESSAGE_CHANNEL_STATUS","MESSAGE_VERSION","MESSAGE_CAPABILITIES","MESSAGE_SERIAL_NUMBER","CHANNEL_TYPE_TWOWAY_RECEIVE","CHANNEL_TYPE_TWOWAY_TRANSMIT","CHANNEL_TYPE_SHARED_RECEIVE","CHANNEL_TYPE_SHARED_TRANSMIT","CHANNEL_TYPE_ONEWAY_RECEIVE","CHANNEL_TYPE_ONEWAY_TRANSMIT","RADIO_TX_POWER_MINUS20DB","RADIO_TX_POWER_MINUS10DB","RADIO_TX_POWER_0DB","RADIO_TX_POWER_PLUS4DB","RESPONSE_NO_ERROR","EVENT_RX_SEARCH_TIMEOUT","EVENT_RX_FAIL","EVENT_TX","EVENT_TRANSFER_RX_FAILED","EVENT_TRANSFER_TX_COMPLETED","EVENT_TRANSFER_TX_FAILED","EVENT_CHANNEL_CLOSED","EVENT_RX_FAIL_GO_TO_SEARCH","EVENT_CHANNEL_COLLISION","EVENT_TRANSFER_TX_START","CHANNEL_IN_WRONG_STATE","CHANNEL_NOT_OPENED","CHANNEL_ID_NOT_SET","CLOSE_ALL_CHANNELS","TRANSFER_IN_PROGRESS","TRANSFER_SEQUENCE_NUMBER_ERROR","TRANSFER_IN_ERROR","MESSAGE_SIZE_EXCEEDS_LIMIT","INVALID_MESSAGE","INVALID_NETWORK_NUMBER","INVALID_LIST_ID","INVALID_SCAN_TX_CHANNEL","INVALID_PARAMETER_PROVIDED","EVENT_QUEUE_OVERFLOW","USB_STRING_WRITE_FAIL","CHANNEL_STATE_UNASSIGNED","CHANNEL_STATE_ASSIGNED","CHANNEL_STATE_SEARCHING","CHANNEL_STATE_TRACKING","CAPABILITIES_NO_RECEIVE_CHANNELS","CAPABILITIES_NO_TRANSMIT_CHANNELS","CAPABILITIES_NO_RECEIVE_MESSAGES","CAPABILITIES_NO_TRANSMIT_MESSAGES","CAPABILITIES_NO_ACKNOWLEDGED_MESSAGES","CAPABILITIES_NO_BURST_MESSAGES","CAPABILITIES_NETWORK_ENABLED","CAPABILITIES_SERIAL_NUMBER_ENABLED","CAPABILITIES_PER_CHANNEL_TX_POWER_ENABLED","CAPABILITIES_LOW_PRIORITY_SEARCH_ENABLED","CAPABILITIES_SCRIPT_ENABLED","CAPABILITIES_SEARCH_LIST_ENABLED","CAPABILITIES_LED_ENABLED","CAPABILITIES_EXT_MESSAGE_ENABLED","CAPABILITIES_SCAN_MODE_ENABLED","CAPABILITIES_PROX_SEARCH_ENABLED","CAPABILITIES_EXT_ASSIGN_ENABLED","CAPABILITIES_FS_ANTFS_ENABLED","TIMEOUT_NEVER","Messages","resetSystem","payload","push","this","buildMessage","requestMessage","channel","messageId","concat","intToLEHexArray","setNetworkKey","assignChannel","type","Error","setDevice","deviceId","deviceType","transmissionType","searchChannel","timeout","setPeriod","period","setFrequency","frequency","setRxExt","libConfig","how","openRxScan","openChannel","closeChannel","unassignChannel","acknowledgedData","broadcastData","message","length","forEach","byte","getChecksum","Uint8Array","int","numBytes","a","hexString","decimalToHex","i","parseInt","substr","d","numDigits","hex","Number","toString","checksum","BUFFER_INDEX_MSG_LEN","BUFFER_INDEX_MSG_TYPE","BUFFER_INDEX_CHANNEL_NUM","BUFFER_INDEX_MSG_DATA","BUFFER_INDEX_EXT_MSG_BEGIN","NodeUSBDriver","EventEmitter","constructor","idVendor","idProduct","debugOptions","super","detachedKernelDriver","usedChannels","attachedSensors","maxChannels","_canScan","throwLibUSBException","setMaxListeners","usb","setDebugLevel","usbDebugLevel","canAttach","Promise","resolve","canScan","open","devices","getDevices","device","shift","iface","interfaces","isKernelDriverActive","detachKernelDriver","_a","claim","error","LibUSBException","errno","LIBUSB_ERROR_ACCESS","LIBUSB_ERROR_NO_DEVICE","LIBUSB_ERROR_BUSY","console","close","undefined","deviceInUse","inEndpoint","endpoints","on","data","onData","catch","err","startPoll","outEndpoint","reset","detachAll","stopPoll","release","attachKernelDriver","_b","emit","devIdx","indexOf","splice","listenerCount","read","dataView","DataView","buffer","getUint8","write","reject","transfer","Buffer","from","attach","sensor","forScan","detach","idx","isPresent","isScanning","getDeviceList","filter","deviceDescriptor","copy","leftover","concatUint8Arrays","len","beginBlock","slice","endBlock","readData","arr1","arr2","result","set","supportHardware","vendorId","productId","WebUSBDriver","abortController","AbortController","signal","navigator","requestDevice","filters","configuration","claimInterface","interfaceNumber","alternate","find","e","direction","readLoop","log","aborted","transferIn","endpointNumber","packetSize","cancelReadLoop","abort","transferOut","PageState","updateState","state","page","pageNum","pageState","INIT_PAGE","STD_PAGE","oldPage","EXT_PAGE","OperatingTime","ManId","SerialNumber","DeviceId","getUint16","HwVersion","SwVersion","ModelNum","PreviousBeat","IntervalAverage","IntervalMax","SessionAverage","SupportedFeatures","EnabledFeatures","batteryLevel","batteryFrac","batteryStatus","BatteryLevel","BatteryVoltage","batteryFlags","BatteryStatusBit","BatteryStatus","pucPayload","BeatTime","BeatCount","ComputedHeartRate","DecodeDefaultHRM","HeartRateSensorState","HeartRateScannerState","nextTick","fn","process","setImmediate","setTimeout","BaseSensor","stick","messageQueue","handleEventMessages","scan","onStatus","status","__awaiter","msg","code","mc","cbk","statusCbk","errorMessage","attachSensor","Array","map","join","decodeDataCbk","send","AntPlusBaseSensor","_super","call","AntPlusSensor","decodeData","bind","HeartRateSensor","AntPlusScanner","byteLength","bytesArray","byteOffset","createStateIfNew","rssi","getInt8","threshold","updateRssiAndThreshold","TimeFractional","TimeInteger","DistanceInteger","DistanceFractional","SpeedInteger","SpeedFractional","StrideCount","UpdateLatency","CadenceInteger","CadenceFractional","Status","Calories","StrideSpeedDistanceSensorState","StrideSpeedDistanceScanState","StrideSpeedDistanceSensor","oldCadenceTime","CadenceEventTime","oldCadenceCount","CumulativeCadenceRevolutionCount","oldSpeedTime","_c","SpeedEventTime","oldSpeedCount","_d","CumulativeSpeedRevolutionCount","cadenceTime","cadenceCount","speedEventTime","speedRevolutionCount","cadence","isNaN","CalculatedCadence","distance","wheelCircumference","CalculatedDistance","speed","CalculatedSpeed","SpeedCadenceSensorState","SpeedCadenceScanState","SpeedCadenceSensor","setWheelCircumference","Motion","SpeedSensorState","SpeedScanState","SpeedSensor","CadenceSensorState","CadenceScanState","CadenceSensor","offset","pedalPower","PedalPower","RightPedalPower","LeftPedalPower","Cadence","AccumulatedPower","Power","oldEventCount","EventCount","oldTimeStamp","TimeStamp","oldTorqueTicksStamp","TorqueTicksStamp","eventCount","slope","timeStamp","torqueTicksStamp","Slope","elapsedTime","torqueTicks","cadencePeriod","Math","round","torque","CalculatedTorque","CalculatedPower","PI","BicyclePowerSensorState","BicyclePowerScanState","BicyclePowerSensor","resetState","ElapsedTime","Distance","RealSpeed","VirtualSpeed","HeartRate","HeartRateSource","CycleLength","Incline","Resistance","METs","CaloricBurnRate","_EventCount0x19","_EventCount0x1A","InstantaneousPower","AveragePower","TrainerStatus","TargetStatus","AscendedDistance","DescendedDistance","Strides","Strokes","WheelTicks","WheelPeriod","Torque","temperature","Temperature","calBF","ZeroOffset","SpinDownTime","EquipmentType","heartRate","capStateBF","oldElapsedTime","oldDistance","State","cycleLen","incline","resistance","mets","caloricbr","calories","negDistance","posDistance","flagStateBF","oldNegDistance","oldPosDistance","strides","power","oldStrides","strokes","oldStrokes","accPower","trainerStatus","oldAccPower","wheelTicks","accWheelPeriod","accTorque","oldWheelTicks","oldWheelPeriod","oldTorque","swRevSup","swRevMain","serial","getUint32","tot","chState","devId","devType","PairedDevices","id","paired","FitnessEquipmentSensorState","FitnessEquipmentScanState","FitnessEquipmentSensor","setUserConfigurationInternal","userWeight","bikeWeight","wheelDiameter","gearRatio","m","max","min","df","mb","setUserConfiguration","userWeightOrCallback","setBasicResistance","setTargetPower","p","setWindResistanceInternal","windCoeff","windSpeed","draftFactor","setWindResistance","windCoeffOrCallback","setTrackResistanceInternal","rollingResistanceCoeff","s","setTrackResistance","slopeOrCallback","_EventCount","notifications","capabilities","total","previous","current","UTCTimeRequired","SupportANTFS","MeasurementInterval","TotalHemoglobinConcentration","PreviousSaturatedHemoglobinPercentage","CurrentSaturatedHemoglobinPercentage","operatingTime","MuscleOxygenSensorState","MuscleOxygenScanState","MuscleOxygenSensor","_sendTimeCmd","cmd","now","Date","utc","getTime","UTC","getTimezoneOffset","setUTCTime","startSession","stopSession","setLap","getInt16","EnvironmentSensorState","EnvironmentScanState","EnvironmentSensor","states","Rssi","Threshold","pages"],"mappings":"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"}